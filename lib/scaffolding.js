"use strict";
var Bliss, bliss, copyContents, cwd, deleteFolders, filesAtBase, fs, initFiles, log, makeFolders, path, relativeToThisFile, removeAllFilesFromDirectory, resetFileSystem, setupFileSystem, wrench, _, _ref;

fs = require('fs');

path = require('path');

wrench = require('wrench');

_ = require('lodash');

_ref = require('./util'), log = _ref.log, relativeToThisFile = _ref.relativeToThisFile;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

setupFileSystem = function(args, retrieveConfig) {
  return retrieveConfig(false, function(config) {
    var baseDir;
    baseDir = config.fubumvc ? config.fubumvc.baseDir : cwd;
    makeFolders(baseDir);
    return initFiles(args, baseDir);
  });
};

resetFileSystem = function(args, retrieveConfig) {
  return retrieveConfig(false, function(config) {
    var baseDir;
    baseDir = config.fubumvc ? config.fubumvc.baseDir : cwd;
    deleteFolders(baseDir);
    return setupFileSystem(args, retrieveConfig);
  });
};

makeFolders = function(baseDir) {
  var folders;
  if (baseDir == null) {
    baseDir = "";
  }
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    var target;
    if (!fs.existsSync(dir)) {
      target = path.join(baseDir, dir);
      log("info", "creating " + target);
      return wrench.mkdirSyncRecursive(target, 0x1ff);
    }
  });
};

removeAllFilesFromDirectory = function(folder, keep) {
  return fs.readdirSync(folder).forEach(function(file) {
    var err, isDir, targetFile;
    targetFile = path.join(folder, file);
    isDir = fs.lstatSync(targetFile).isDirectory();
    if (file === keep) {
      if (isDir) {
        removeAllFilesFromDirectory(targetFile);
      }
      return;
    }
    try {
      if (isDir) {
        return wrench.rmdirSyncRecursive(targetFile);
      } else {
        if (/\.gitignore/.test(targetFile)) {
          return;
        }
        fs.unlinkSync(targetFile);
        return log("success", "deleted " + targetFile);
      }
    } catch (_error) {
      err = _error;
      return log("error", err);
    }
  });
};

deleteFolders = function(baseDir) {
  var folders;
  if (baseDir == null) {
    baseDir = "";
  }
  folders = ['assets', 'public'];
  return _.each(folders, function(dir) {
    var target;
    target = path.join(baseDir, dir);
    return removeAllFilesFromDirectory(target, "scripts");
  });
};

filesAtBase = function(baseDir, files) {
  return _.map(files, function(f) {
    return path.join(baseDir, f);
  });
};

initFiles = function(flags, baseDir) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  if (baseDir == null) {
    baseDir = "";
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext, "assets/dont-delete-me.js"];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile(path.join("../fubu-import-templates/", f));
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(filesAtBase(baseDir, files), contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    log("info", "creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

module.exports = {
  setupFileSystem: setupFileSystem,
  resetFileSystem: resetFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3NtaXRobS9kZXYvbWltb3NhLWZ1YnVtdmMvbGliL3NjYWZmb2xkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL3NtaXRobS9kZXYvbWltb3NhLWZ1YnVtdmMvc3JjL3NjYWZmb2xkaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLHNNQUFBOztBQUFBLEVBQ0EsR0FBSyxPQUFBLENBQVEsSUFBUixDQURMLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxNQUdBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FIVCxDQUFBOztBQUFBLENBSUEsR0FBSSxPQUFBLENBQVEsUUFBUixDQUpKLENBQUE7O0FBQUEsT0FLNEIsT0FBQSxDQUFRLFFBQVIsQ0FBNUIsRUFBQyxXQUFBLEdBQUQsRUFBTSwwQkFBQSxrQkFMTixDQUFBOztBQUFBLEtBTUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQU5SLENBQUE7O0FBQUEsS0FPQSxHQUFZLElBQUEsS0FBQSxDQUNWO0FBQUEsRUFBQSxHQUFBLEVBQUssUUFBTDtBQUFBLEVBQ0EsWUFBQSxFQUFjLEtBRGQ7QUFBQSxFQUVBLE9BQUEsRUFBUyxFQUZUO0NBRFUsQ0FQWixDQUFBOztBQUFBLEdBV0EsR0FBTSxPQUFPLENBQUMsR0FBUixDQUFBLENBWE4sQ0FBQTs7QUFBQSxlQWFBLEdBQWtCLFNBQUMsSUFBRCxFQUFPLGNBQVAsR0FBQTtTQUNoQixjQUFBLENBQWUsS0FBZixFQUFzQixTQUFDLE1BQUQsR0FBQTtBQUNwQixRQUFBLE9BQUE7QUFBQSxJQUFBLE9BQUEsR0FBYSxNQUFNLENBQUMsT0FBVixHQUF1QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQXRDLEdBQW1ELEdBQTdELENBQUE7QUFBQSxJQUNBLFdBQUEsQ0FBWSxPQUFaLENBREEsQ0FBQTtXQUVBLFNBQUEsQ0FBVSxJQUFWLEVBQWdC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Q0FBQTtBQUFBLEVBVUEsZ0JBQUEsR0FBbUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxXQUFBLENBQVksT0FBWixFQUFxQixLQUFyQixDQUFOLEVBQW1DLFFBQW5DLENBVm5CLENBQUE7QUFBQSxFQVlBLENBQUMsQ0FBQyxJQUFGLENBQU8sZ0JBQVAsRUFBeUIsU0FBQyxJQUFELEdBQUE7V0FDdkIsWUFBQSxDQUFhLElBQWIsRUFEdUI7RUFBQSxDQUF6QixDQVpBLENBRFU7QUFBQSxDQTVEWixDQUFBOztBQUFBLFlBK0VBLEdBQWUsU0FBQyxJQUFELEdBQUE7QUFDYixNQUFBLGtCQUFBO0FBQUEsRUFEZSxvQkFBVSxrQkFDekIsQ0FBQTtBQUFBLEVBQUEsSUFBQSxDQUFBLEVBQVMsQ0FBQyxVQUFILENBQWMsUUFBZCxDQUFQO0FBQ0UsSUFBQSxHQUFBLENBQUksTUFBSixFQUFhLFdBQUEsR0FBVSxRQUF2QixDQUFBLENBQUE7V0FDQSxFQUFFLENBQUMsYUFBSCxDQUFpQixRQUFqQixFQUEyQixRQUEzQixFQUZGO0dBRGE7QUFBQSxDQS9FZixDQUFBOztBQUFBLE1Bb0ZNLENBQUMsT0FBUCxHQUFpQjtBQUFBLEVBQUMsaUJBQUEsZUFBRDtBQUFBLEVBQWtCLGlCQUFBLGVBQWxCO0NBcEZqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcclxuZnMgPSByZXF1aXJlICdmcydcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbndyZW5jaCA9IHJlcXVpcmUgJ3dyZW5jaCdcclxuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcclxue2xvZywgcmVsYXRpdmVUb1RoaXNGaWxlfSA9IHJlcXVpcmUgJy4vdXRpbCdcclxuQmxpc3MgPSByZXF1aXJlICdibGlzcydcclxuYmxpc3MgPSBuZXcgQmxpc3NcclxuICBleHQ6IFwiLmJsaXNzXCJcclxuICBjYWNoZUVuYWJsZWQ6IGZhbHNlLFxyXG4gIGNvbnRleHQ6IHt9XHJcbmN3ZCA9IHByb2Nlc3MuY3dkKClcclxuXHJcbnNldHVwRmlsZVN5c3RlbSA9IChhcmdzLCByZXRyaWV2ZUNvbmZpZykgLT5cclxuICByZXRyaWV2ZUNvbmZpZyhmYWxzZSwgKGNvbmZpZykgLT5cbiAgICBiYXNlRGlyID0gaWYgY29uZmlnLmZ1YnVtdmMgdGhlbiBjb25maWcuZnVidW12Yy5iYXNlRGlyIGVsc2UgY3dkXG4gICAgbWFrZUZvbGRlcnMoYmFzZURpcilcclxuICAgIGluaXRGaWxlcyhhcmdzLCBiYXNlRGlyKVxyXG4gIClcblxyXG5yZXNldEZpbGVTeXN0ZW0gPSAoYXJncywgcmV0cmlldmVDb25maWcpIC0+XHJcbiAgcmV0cmlldmVDb25maWcoZmFsc2UsIChjb25maWcpIC0+XG4gICAgYmFzZURpciA9IGlmIGNvbmZpZy5mdWJ1bXZjIHRoZW4gY29uZmlnLmZ1YnVtdmMuYmFzZURpciBlbHNlIGN3ZFxuICAgIGRlbGV0ZUZvbGRlcnMoYmFzZURpcilcclxuICAgIHNldHVwRmlsZVN5c3RlbSBhcmdzLCByZXRyaWV2ZUNvbmZpZ1xyXG4gIClcblxyXG5tYWtlRm9sZGVycyA9IChiYXNlRGlyID0gXCJcIiktPlxyXG4gIGZvbGRlcnMgPSBbJ2Fzc2V0cy9zY3JpcHRzJywgJ2Fzc2V0cy9zdHlsZXMnLCAncHVibGljJ11cclxuICBfLmVhY2ggZm9sZGVycywgKGRpcikgLT5cclxuICAgIHVubGVzcyBmcy5leGlzdHNTeW5jIGRpclxyXG4gICAgICB0YXJnZXQgPSBwYXRoLmpvaW4oYmFzZURpciwgZGlyKVxuICAgICAgbG9nIFwiaW5mb1wiLCBcImNyZWF0aW5nICN7dGFyZ2V0fVwiXHJcbiAgICAgIHdyZW5jaC5ta2RpclN5bmNSZWN1cnNpdmUgdGFyZ2V0LCAwbzA3NzdcclxuXG5yZW1vdmVBbGxGaWxlc0Zyb21EaXJlY3RvcnkgPSAoZm9sZGVyLCBrZWVwKSAtPlxuICBmcy5yZWFkZGlyU3luYyhmb2xkZXIpLmZvckVhY2ggKGZpbGUpIC0+XG4gICAgdGFyZ2V0RmlsZSA9IHBhdGguam9pbihmb2xkZXIsIGZpbGUpXG4gICAgaXNEaXIgPSBmcy5sc3RhdFN5bmModGFyZ2V0RmlsZSkuaXNEaXJlY3RvcnkoKVxuICAgIGlmIGZpbGUgaXMga2VlcFxuICAgICAgaWYgaXNEaXIgdGhlbiByZW1vdmVBbGxGaWxlc0Zyb21EaXJlY3RvcnkgdGFyZ2V0RmlsZVxuICAgICAgcmV0dXJuXG4gICAgdHJ5XG4gICAgICBpZiBpc0RpciB0aGVuIHdyZW5jaC5ybWRpclN5bmNSZWN1cnNpdmUodGFyZ2V0RmlsZSkgZWxzZVxuICAgICAgICBpZiAoL1xcLmdpdGlnbm9yZS8udGVzdCB0YXJnZXRGaWxlKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICBmcy51bmxpbmtTeW5jKHRhcmdldEZpbGUpXG4gICAgICAgIGxvZyBcInN1Y2Nlc3NcIiwgXCJkZWxldGVkICN7dGFyZ2V0RmlsZX1cIlxyXG4gICAgY2F0Y2ggZXJyXG4gICAgICBsb2coXCJlcnJvclwiLCBlcnIpXG5cclxuZGVsZXRlRm9sZGVycyA9IChiYXNlRGlyID0gXCJcIiktPlxyXG4gIGZvbGRlcnMgPSBbJ2Fzc2V0cycsICdwdWJsaWMnXVxyXG4gIF8uZWFjaCBmb2xkZXJzLCAoZGlyKSAtPlxyXG4gICAgdGFyZ2V0ID0gcGF0aC5qb2luKGJhc2VEaXIsIGRpcilcbiAgICByZW1vdmVBbGxGaWxlc0Zyb21EaXJlY3RvcnkgdGFyZ2V0LCBcInNjcmlwdHNcIlxuXG5maWxlc0F0QmFzZSA9IChiYXNlRGlyLCBmaWxlcykgLT5cbiAgXy5tYXAgZmlsZXMsIChmKS0+IHBhdGguam9pbihiYXNlRGlyLCBmKVxuXHJcbmluaXRGaWxlcyA9IChmbGFncyA9IGZhbHNlLCBiYXNlRGlyID0gXCJcIikgLT5cclxuICB1c2VDb2ZmZWUgPSBmbGFncyA9PSBcImNvZmZlZVwiXHJcbiAgZXh0ID0gaWYgdXNlQ29mZmVlIHRoZW4gXCJjb2ZmZWVcIiBlbHNlIFwianNcIlxyXG4gIGZpbGVzID0gW1wiYm93ZXIuanNvblwiLCBcIm1pbW9zYS1jb25maWcuI3tleHR9XCIsIFwiYXNzZXRzL2RvbnQtZGVsZXRlLW1lLmpzXCJdXHJcbiAgdmlld01vZGVsID1cclxuICAgIG5hbWU6IHBhdGguYmFzZW5hbWUgY3dkXHJcbiAgY29udGVudHMgPSBfIGZpbGVzXHJcbiAgICAubWFwIChmKSAtPiByZWxhdGl2ZVRvVGhpc0ZpbGUgcGF0aC5qb2luKFwiLi4vZnVidS1pbXBvcnQtdGVtcGxhdGVzL1wiLCBmKVxyXG4gICAgLm1hcCAoZikgLT4gYmxpc3MucmVuZGVyIGYsIHZpZXdNb2RlbFxyXG4gICAgLm1hcCAoZikgLT4gZi50cmltKClcclxuICAgIC52YWx1ZSgpXHJcbiAgZmlsZVdpdGhDb250ZW50cyA9IF8uemlwKGZpbGVzQXRCYXNlKGJhc2VEaXIsIGZpbGVzKSwgY29udGVudHMpXHJcblxyXG4gIF8uZWFjaCBmaWxlV2l0aENvbnRlbnRzLCAocGFpcikgLT5cclxuICAgIGNvcHlDb250ZW50cyBwYWlyXHJcbiAgI2F2b2lkIHJldHVybmluZyBhbiBhcnJheSBvZiBub3RoaW5nIHdoZW4gdXNpbmcgYSBjb21wcmVoZW5zaW9uIGFzIHlvdXIgbGFzdCBsaW5lXHJcbiAgI2J5IHVzaW5nIGFuIGV4cGxpY2l0IHJldHVyblxyXG4gIHJldHVyblxyXG5cclxuY29weUNvbnRlbnRzID0gKFtmaWxlTmFtZSwgY29udGVudHNdKSAtPlxyXG4gIHVubGVzcyBmcy5leGlzdHNTeW5jIGZpbGVOYW1lXHJcbiAgICBsb2cgXCJpbmZvXCIsIFwiY3JlYXRpbmcgI3tmaWxlTmFtZX1cIlxyXG4gICAgZnMud3JpdGVGaWxlU3luYyBmaWxlTmFtZSwgY29udGVudHNcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge3NldHVwRmlsZVN5c3RlbSwgcmVzZXRGaWxlU3lzdGVtfVxyXG4iXX0=
