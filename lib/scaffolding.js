"use strict";
var Bliss, bliss, copyContents, cwd, fs, initFiles, log, makeFolders, path, relativeToThisFile, setupFileSystem, wrench, _, _ref;

fs = require('fs');

path = require('path');

wrench = require('wrench');

_ = require('lodash');

_ref = require('./util'), log = _ref.log, relativeToThisFile = _ref.relativeToThisFile;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    if (!fs.existsSync(dir)) {
      log("info", "creating " + dir);
      return wrench.mkdirSyncRecursive(dir, 0x1ff);
    }
  });
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    log("info", "creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

module.exports = {
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcZGVsZXRlTWVcXG1pbW9zYS1mdWJ1bXZjXFxsaWJcXHNjYWZmb2xkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYzpcXGhvbWVcXGdpdGh1YlxcZGVsZXRlTWVcXG1pbW9zYS1mdWJ1bXZjXFxzcmNcXHNjYWZmb2xkaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLDRIQUFBOztBQUFBLEVBQ0EsR0FBSyxPQUFBLENBQVEsSUFBUixDQURMLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxNQUdBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FIVCxDQUFBOztBQUFBLENBSUEsR0FBSSxPQUFBLENBQVEsUUFBUixDQUpKLENBQUE7O0FBQUEsT0FLNEIsT0FBQSxDQUFRLFFBQVIsQ0FBNUIsRUFBQyxXQUFBLEdBQUQsRUFBTSwwQkFBQSxrQkFMTixDQUFBOztBQUFBLEtBTUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQU5SLENBQUE7O0FBQUEsS0FPQSxHQUFZLElBQUEsS0FBQSxDQUNWO0FBQUEsRUFBQSxHQUFBLEVBQUssUUFBTDtBQUFBLEVBQ0EsWUFBQSxFQUFjLEtBRGQ7QUFBQSxFQUVBLE9BQUEsRUFBUyxFQUZUO0NBRFUsQ0FQWixDQUFBOztBQUFBLEdBV0EsR0FBTSxPQUFPLENBQUMsR0FBUixDQUFBLENBWE4sQ0FBQTs7QUFBQSxlQWFBLEdBQWtCLFNBQUMsSUFBRCxHQUFBO0FBQ2hCLEVBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQTtTQUNBLFNBQUEsQ0FBVSxJQUFWLEVBRmdCO0FBQUEsQ0FibEIsQ0FBQTs7QUFBQSxXQWlCQSxHQUFjLFNBQUEsR0FBQTtBQUNaLE1BQUEsT0FBQTtBQUFBLEVBQUEsT0FBQSxHQUFVLENBQUMsZ0JBQUQsRUFBbUIsZUFBbkIsRUFBb0MsUUFBcEMsQ0FBVixDQUFBO1NBQ0EsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQLEVBQWdCLFNBQUMsR0FBRCxHQUFBO0FBQ2QsSUFBQSxJQUFBLENBQUEsRUFBUyxDQUFDLFVBQUgsQ0FBYyxHQUFkLENBQVA7QUFDRSxNQUFBLEdBQUEsQ0FBSSxNQUFKLEVBQWEsV0FBQSxHQUFVLEdBQXZCLENBQUEsQ0FBQTthQUNBLE1BQU0sQ0FBQyxrQkFBUCxDQUEwQixHQUExQixFQUErQixLQUEvQixFQUZGO0tBRGM7RUFBQSxDQUFoQixFQUZZO0FBQUEsQ0FqQmQsQ0FBQTs7QUFBQSxTQXdCQSxHQUFZLFNBQUMsS0FBRCxHQUFBO0FBQ1YsTUFBQSw0REFBQTs7SUFEVyxRQUFRO0dBQ25CO0FBQUEsRUFBQSxTQUFBLEdBQVksS0FBQSxLQUFTLFFBQXJCLENBQUE7QUFBQSxFQUNBLEdBQUEsR0FBUyxTQUFILEdBQWtCLFFBQWxCLEdBQWdDLElBRHRDLENBQUE7QUFBQSxFQUVBLEtBQUEsR0FBUSxDQUFDLFlBQUQsRUFBZ0IsZ0JBQUEsR0FBZSxHQUEvQixDQUZSLENBQUE7QUFBQSxFQUdBLFNBQUEsR0FDRTtBQUFBLElBQUEsSUFBQSxFQUFNLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUFOO0dBSkYsQ0FBQTtBQUFBLEVBS0EsUUFBQSxHQUFXLENBQUEsQ0FBRSxLQUFGLENBQ1QsQ0FBQyxHQURRLENBQ0osU0FBQyxDQUFELEdBQUE7V0FBTyxrQkFBQSxDQUFvQiwyQkFBQSxHQUEwQixDQUE5QyxFQUFQO0VBQUEsQ0FESSxDQUVULENBQUMsR0FGUSxDQUVKLFNBQUMsQ0FBRCxHQUFBO1dBQU8sS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLFNBQWhCLEVBQVA7RUFBQSxDQUZJLENBR1QsQ0FBQyxHQUhRLENBR0osU0FBQyxDQUFELEdBQUE7V0FBTyxDQUFDLENBQUMsSUFBRixDQUFBLEVBQVA7RUFBQSxDQUhJLENBSVQsQ0FBQyxLQUpRLENBQUEsQ0FMWCxDQUFBO0FBQUEsRUFVQSxnQkFBQSxHQUFtQixDQUFDLENBQUMsR0FBRixDQUFNLEtBQU4sRUFBYSxRQUFiLENBVm5CLENBQUE7QUFBQSxFQVlBLENBQUMsQ0FBQyxJQUFGLENBQU8sZ0JBQVAsRUFBeUIsU0FBQyxJQUFELEdBQUE7V0FDdkIsWUFBQSxDQUFhLElBQWIsRUFEdUI7RUFBQSxDQUF6QixDQVpBLENBRFU7QUFBQSxDQXhCWixDQUFBOztBQUFBLFlBMkNBLEdBQWUsU0FBQyxJQUFELEdBQUE7QUFDYixNQUFBLGtCQUFBO0FBQUEsRUFEZSxvQkFBVSxrQkFDekIsQ0FBQTtBQUFBLEVBQUEsSUFBQSxDQUFBLEVBQVMsQ0FBQyxVQUFILENBQWMsUUFBZCxDQUFQO0FBQ0UsSUFBQSxHQUFBLENBQUksTUFBSixFQUFhLFdBQUEsR0FBVSxRQUF2QixDQUFBLENBQUE7V0FDQSxFQUFFLENBQUMsYUFBSCxDQUFpQixRQUFqQixFQUEyQixRQUEzQixFQUZGO0dBRGE7QUFBQSxDQTNDZixDQUFBOztBQUFBLE1BZ0RNLENBQUMsT0FBUCxHQUFpQjtBQUFBLEVBQUMsaUJBQUEsZUFBRDtDQWhEakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXHJcbmZzID0gcmVxdWlyZSAnZnMnXHJcbnBhdGggPSByZXF1aXJlICdwYXRoJ1xyXG53cmVuY2ggPSByZXF1aXJlICd3cmVuY2gnXHJcbl8gPSByZXF1aXJlICdsb2Rhc2gnXHJcbntsb2csIHJlbGF0aXZlVG9UaGlzRmlsZX0gPSByZXF1aXJlICcuL3V0aWwnXHJcbkJsaXNzID0gcmVxdWlyZSAnYmxpc3MnXHJcbmJsaXNzID0gbmV3IEJsaXNzXHJcbiAgZXh0OiBcIi5ibGlzc1wiXHJcbiAgY2FjaGVFbmFibGVkOiBmYWxzZSxcclxuICBjb250ZXh0OiB7fVxyXG5jd2QgPSBwcm9jZXNzLmN3ZCgpXHJcblxyXG5zZXR1cEZpbGVTeXN0ZW0gPSAoYXJncykgLT5cclxuICBtYWtlRm9sZGVycygpXHJcbiAgaW5pdEZpbGVzKGFyZ3MpXHJcblxyXG5tYWtlRm9sZGVycyA9IC0+XHJcbiAgZm9sZGVycyA9IFsnYXNzZXRzL3NjcmlwdHMnLCAnYXNzZXRzL3N0eWxlcycsICdwdWJsaWMnXVxyXG4gIF8uZWFjaCBmb2xkZXJzLCAoZGlyKSAtPlxyXG4gICAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZGlyXHJcbiAgICAgIGxvZyBcImluZm9cIiwgXCJjcmVhdGluZyAje2Rpcn1cIlxyXG4gICAgICB3cmVuY2gubWtkaXJTeW5jUmVjdXJzaXZlIGRpciwgMG8wNzc3XHJcblxyXG5pbml0RmlsZXMgPSAoZmxhZ3MgPSBmYWxzZSkgLT5cclxuICB1c2VDb2ZmZWUgPSBmbGFncyA9PSBcImNvZmZlZVwiXHJcbiAgZXh0ID0gaWYgdXNlQ29mZmVlIHRoZW4gXCJjb2ZmZWVcIiBlbHNlIFwianNcIlxyXG4gIGZpbGVzID0gW1wiYm93ZXIuanNvblwiLCBcIm1pbW9zYS1jb25maWcuI3tleHR9XCJdXHJcbiAgdmlld01vZGVsID1cclxuICAgIG5hbWU6IHBhdGguYmFzZW5hbWUgY3dkXHJcbiAgY29udGVudHMgPSBfIGZpbGVzXHJcbiAgICAubWFwIChmKSAtPiByZWxhdGl2ZVRvVGhpc0ZpbGUgXCIuLi9mdWJ1LWltcG9ydC10ZW1wbGF0ZXMvI3tmfVwiXHJcbiAgICAubWFwIChmKSAtPiBibGlzcy5yZW5kZXIgZiwgdmlld01vZGVsXHJcbiAgICAubWFwIChmKSAtPiBmLnRyaW0oKVxyXG4gICAgLnZhbHVlKClcclxuICBmaWxlV2l0aENvbnRlbnRzID0gXy56aXAoZmlsZXMsIGNvbnRlbnRzKVxyXG5cclxuICBfLmVhY2ggZmlsZVdpdGhDb250ZW50cywgKHBhaXIpIC0+XHJcbiAgICBjb3B5Q29udGVudHMgcGFpclxyXG4gICNhdm9pZCByZXR1cm5pbmcgYW4gYXJyYXkgb2Ygbm90aGluZyB3aGVuIHVzaW5nIGEgY29tcHJlaGVuc2lvbiBhcyB5b3VyIGxhc3QgbGluZVxyXG4gICNieSB1c2luZyBhbiBleHBsaWNpdCByZXR1cm5cclxuICByZXR1cm5cclxuXHJcbmNvcHlDb250ZW50cyA9IChbZmlsZU5hbWUsIGNvbnRlbnRzXSkgLT5cclxuICB1bmxlc3MgZnMuZXhpc3RzU3luYyBmaWxlTmFtZVxyXG4gICAgbG9nIFwiaW5mb1wiLCBcImNyZWF0aW5nICN7ZmlsZU5hbWV9XCJcclxuICAgIGZzLndyaXRlRmlsZVN5bmMgZmlsZU5hbWUsIGNvbnRlbnRzXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtzZXR1cEZpbGVTeXN0ZW19XHJcbiJdfQ==
