"use strict";
var Bliss, bliss, copyContents, cwd, deleteFolders, fs, initFiles, log, makeFolders, path, relativeToThisFile, resetFileSystem, setupFileSystem, wrench, _, _ref;

fs = require('fs');

path = require('path');

wrench = require('wrench');

_ = require('lodash');

_ref = require('./util'), log = _ref.log, relativeToThisFile = _ref.relativeToThisFile;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

resetFileSystem = function(args) {
  deleteFolders();
  return setupFileSystem(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    if (!fs.existsSync(dir)) {
      log("info", "creating " + dir);
      return wrench.mkdirSyncRecursive(dir, 0x1ff);
    }
  });
};

deleteFolders = function() {
  var folders;
  folders = ['assets', 'public'];
  return _.each(folders, function(dir) {
    if (fs.existsSync(dir)) {
      log("info", "deleting " + dir);
      return wrench.rmdirSyncRecursive(dir);
    }
  });
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext, "assets/dont-delete-me.js"];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    log("info", "creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

module.exports = {
  setupFileSystem: setupFileSystem,
  resetFileSystem: resetFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9SZXNvdXJjZXMvUHJvamVjdHMvbWltb3NhLWZ1YnVtdmMvbGliL3NjYWZmb2xkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL21udC9SZXNvdXJjZXMvUHJvamVjdHMvbWltb3NhLWZ1YnVtdmMvc3JjL3NjYWZmb2xkaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLDRKQUFBOztBQUFBLEVBQ0EsR0FBSyxPQUFBLENBQVEsSUFBUixDQURMLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxNQUdBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FIVCxDQUFBOztBQUFBLENBSUEsR0FBSSxPQUFBLENBQVEsUUFBUixDQUpKLENBQUE7O0FBQUEsT0FLNEIsT0FBQSxDQUFRLFFBQVIsQ0FBNUIsRUFBQyxXQUFBLEdBQUQsRUFBTSwwQkFBQSxrQkFMTixDQUFBOztBQUFBLEtBTUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQU5SLENBQUE7O0FBQUEsS0FPQSxHQUFZLElBQUEsS0FBQSxDQUNWO0FBQUEsRUFBQSxHQUFBLEVBQUssUUFBTDtBQUFBLEVBQ0EsWUFBQSxFQUFjLEtBRGQ7QUFBQSxFQUVBLE9BQUEsRUFBUyxFQUZUO0NBRFUsQ0FQWixDQUFBOztBQUFBLEdBV0EsR0FBTSxPQUFPLENBQUMsR0FBUixDQUFBLENBWE4sQ0FBQTs7QUFBQSxlQWFBLEdBQWtCLFNBQUMsSUFBRCxHQUFBO0FBQ2hCLEVBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQTtTQUNBLFNBQUEsQ0FBVSxJQUFWLEVBRmdCO0FBQUEsQ0FibEIsQ0FBQTs7QUFBQSxlQWlCQSxHQUFrQixTQUFDLElBQUQsR0FBQTtBQUNoQixFQUFBLGFBQUEsQ0FBQSxDQUFBLENBQUE7U0FDQSxlQUFBLENBQWdCLElBQWhCLEVBRmdCO0FBQUEsQ0FqQmxCLENBQUE7O0FBQUEsV0FxQkEsR0FBYyxT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Q0EzRGpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxyXG5mcyA9IHJlcXVpcmUgJ2ZzJ1xyXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcclxud3JlbmNoID0gcmVxdWlyZSAnd3JlbmNoJ1xyXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xyXG57bG9nLCByZWxhdGl2ZVRvVGhpc0ZpbGV9ID0gcmVxdWlyZSAnLi91dGlsJ1xyXG5CbGlzcyA9IHJlcXVpcmUgJ2JsaXNzJ1xyXG5ibGlzcyA9IG5ldyBCbGlzc1xyXG4gIGV4dDogXCIuYmxpc3NcIlxyXG4gIGNhY2hlRW5hYmxlZDogZmFsc2UsXHJcbiAgY29udGV4dDoge31cclxuY3dkID0gcHJvY2Vzcy5jd2QoKVxyXG5cclxuc2V0dXBGaWxlU3lzdGVtID0gKGFyZ3MpIC0+XHJcbiAgbWFrZUZvbGRlcnMoKVxyXG4gIGluaXRGaWxlcyhhcmdzKVxyXG5cclxucmVzZXRGaWxlU3lzdGVtID0gKGFyZ3MpIC0+XHJcbiAgZGVsZXRlRm9sZGVycygpXHJcbiAgc2V0dXBGaWxlU3lzdGVtIGFyZ3NcclxuXHJcbm1ha2VGb2xkZXJzID0gLT5cclxuICBmb2xkZXJzID0gWydhc3NldHMvc2NyaXB0cycsICdhc3NldHMvc3R5bGVzJywgJ3B1YmxpYyddXHJcbiAgXy5lYWNoIGZvbGRlcnMsIChkaXIpIC0+XHJcbiAgICB1bmxlc3MgZnMuZXhpc3RzU3luYyBkaXJcclxuICAgICAgbG9nIFwiaW5mb1wiLCBcImNyZWF0aW5nICN7ZGlyfVwiXHJcbiAgICAgIHdyZW5jaC5ta2RpclN5bmNSZWN1cnNpdmUgZGlyLCAwbzA3NzdcclxuXHJcbmRlbGV0ZUZvbGRlcnMgPSAtPlxyXG4gIGZvbGRlcnMgPSBbJ2Fzc2V0cycsICdwdWJsaWMnXVxyXG4gIF8uZWFjaCBmb2xkZXJzLCAoZGlyKSAtPlxyXG4gICAgaWYgZnMuZXhpc3RzU3luYyBkaXJcclxuICAgICAgbG9nIFwiaW5mb1wiLCBcImRlbGV0aW5nICN7ZGlyfVwiXHJcbiAgICAgIHdyZW5jaC5ybWRpclN5bmNSZWN1cnNpdmUgZGlyXHJcblxyXG5pbml0RmlsZXMgPSAoZmxhZ3MgPSBmYWxzZSkgLT5cclxuICB1c2VDb2ZmZWUgPSBmbGFncyA9PSBcImNvZmZlZVwiXHJcbiAgZXh0ID0gaWYgdXNlQ29mZmVlIHRoZW4gXCJjb2ZmZWVcIiBlbHNlIFwianNcIlxyXG4gIGZpbGVzID0gW1wiYm93ZXIuanNvblwiLCBcIm1pbW9zYS1jb25maWcuI3tleHR9XCIsIFwiYXNzZXRzL2RvbnQtZGVsZXRlLW1lLmpzXCJdXHJcbiAgdmlld01vZGVsID1cclxuICAgIG5hbWU6IHBhdGguYmFzZW5hbWUgY3dkXHJcbiAgY29udGVudHMgPSBfIGZpbGVzXHJcbiAgICAubWFwIChmKSAtPiByZWxhdGl2ZVRvVGhpc0ZpbGUgXCIuLi9mdWJ1LWltcG9ydC10ZW1wbGF0ZXMvI3tmfVwiXHJcbiAgICAubWFwIChmKSAtPiBibGlzcy5yZW5kZXIgZiwgdmlld01vZGVsXHJcbiAgICAubWFwIChmKSAtPiBmLnRyaW0oKVxyXG4gICAgLnZhbHVlKClcclxuICBmaWxlV2l0aENvbnRlbnRzID0gXy56aXAoZmlsZXMsIGNvbnRlbnRzKVxyXG5cclxuICBfLmVhY2ggZmlsZVdpdGhDb250ZW50cywgKHBhaXIpIC0+XHJcbiAgICBjb3B5Q29udGVudHMgcGFpclxyXG4gICNhdm9pZCByZXR1cm5pbmcgYW4gYXJyYXkgb2Ygbm90aGluZyB3aGVuIHVzaW5nIGEgY29tcHJlaGVuc2lvbiBhcyB5b3VyIGxhc3QgbGluZVxyXG4gICNieSB1c2luZyBhbiBleHBsaWNpdCByZXR1cm5cclxuICByZXR1cm5cclxuXHJcbmNvcHlDb250ZW50cyA9IChbZmlsZU5hbWUsIGNvbnRlbnRzXSkgLT5cclxuICB1bmxlc3MgZnMuZXhpc3RzU3luYyBmaWxlTmFtZVxyXG4gICAgbG9nIFwiaW5mb1wiLCBcImNyZWF0aW5nICN7ZmlsZU5hbWV9XCJcclxuICAgIGZzLndyaXRlRmlsZVN5bmMgZmlsZU5hbWUsIGNvbnRlbnRzXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtzZXR1cEZpbGVTeXN0ZW0sIHJlc2V0RmlsZVN5c3RlbX1cclxuIl19
