"use strict";
var Bliss, bliss, copyContents, cwd, deleteFolders, filesAtBase, fs, initFiles, log, makeFolders, path, relativeToThisFile, resetFileSystem, setupFileSystem, wrench, _, _ref;

fs = require('fs');

path = require('path');

wrench = require('wrench');

_ = require('lodash');

_ref = require('./util'), log = _ref.log, relativeToThisFile = _ref.relativeToThisFile;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

setupFileSystem = function(args, retrieveConfig) {
  return retrieveConfig(false, function(config) {
    var baseDir;
    baseDir = config.fubumvc.baseDir;
    makeFolders(baseDir);
    return initFiles(args, baseDir);
  });
};

resetFileSystem = function(args, retrieveConfig) {
  return retrieveConfig(false, function(config) {
    deleteFolders(config.fubumvc.baseDir);
    return setupFileSystem(args, retrieveConfig);
  });
};

makeFolders = function(baseDir) {
  var folders;
  if (baseDir == null) {
    baseDir = "";
  }
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    var target;
    if (!fs.existsSync(dir)) {
      target = path.join(baseDir, dir);
      log("info", "creating " + target);
      return wrench.mkdirSyncRecursive(target, 0x1ff);
    }
  });
};

deleteFolders = function(baseDir) {
  var folders;
  if (baseDir == null) {
    baseDir = "";
  }
  folders = ['assets', 'public'];
  return _.each(folders, function(dir) {
    var target;
    target = path.join(baseDir, dir);
    if (fs.existsSync(target)) {
      log("info", "deleting " + target);
      return wrench.rmdirSyncRecursive(target);
    }
  });
};

filesAtBase = function(baseDir, files) {
  return _.map(files, function(f) {
    return path.join(baseDir, f);
  });
};

initFiles = function(flags, baseDir) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  if (baseDir == null) {
    baseDir = "";
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext, "assets/dont-delete-me.js"];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile(path.join("../fubu-import-templates/", f));
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(filesAtBase(baseDir, files), contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    log("info", "creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

module.exports = {
  setupFileSystem: setupFileSystem,
  resetFileSystem: resetFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9SZXNvdXJjZXMvUHJvamVjdHMvbWltb3NhLWZ1YnVtdmMvbGliL3NjYWZmb2xkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL21udC9SZXNvdXJjZXMvUHJvamVjdHMvbWltb3NhLWZ1YnVtdmMvc3JjL3NjYWZmb2xkaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLHlLQUFBOztBQUFBLEVBQ0EsR0FBSyxPQUFBLENBQVEsSUFBUixDQURMLENBQUE7O0FBQUEsSUFFQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRlAsQ0FBQTs7QUFBQSxNQUdBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FIVCxDQUFBOztBQUFBLENBSUEsR0FBSSxPQUFBLENBQVEsUUFBUixDQUpKLENBQUE7O0FBQUEsT0FLNEIsT0FBQSxDQUFRLFFBQVIsQ0FBNUIsRUFBQyxXQUFBLEdBQUQsRUFBTSwwQkFBQSxrQkFMTixDQUFBOztBQUFBLEtBTUEsR0FBUSxPQUFBLENBQVEsT0FBUixDQU5SLENBQUE7O0FBQUEsS0FPQSxHQUFZLElBQUEsS0FBQSxDQUNWO0FBQUEsRUFBQSxHQUFBLEVBQUssUUFBTDtBQUFBLEVBQ0EsWUFBQSxFQUFjLEtBRGQ7QUFBQSxFQUVBLE9BQUEsRUFBUyxFQUZUO0NBRFUsQ0FQWixDQUFBOztBQUFBLEdBV0EsR0FBTSxPQUFPLENBQUMsR0FBUixDQUFBLENBWE4sQ0FBQTs7QUFBQSxlQWFBLEdBQWtCLFNBQUMsSUFBRCxFQUFPLGNBQVAsR0FBQTtTQUNoQixjQUFBLENBQWUsS0FBZixFQUFzQixTQUFDLE1BQUQsR0FBQTtBQUNwQixRQUFBLE9BQUE7QUFBQSxJQUFBLE9BQUEsR0FBVSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQXpCLENBQUE7QUFBQSxJQUNBLFdBQUEsQ0FBWSxPQUFaLENBREEsQ0FBQTtXQUVBLFNBQUEsQ0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBSG9CO0VBQUEsQ0FB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RUosU0FBQyxDQUFELEdBQUE7V0FBTyxLQUFLLENBQUMsTUFBTixDQUFhLENBQWIsRUFBZ0IsU0FBaEIsRUFBUDtFQUFBLENBRkksQ0FHVCxDQUFDLEdBSFEsQ0FHSixTQUFDLENBQUQsR0FBQTtXQUFPLENBQUMsQ0FBQyxJQUFGLENBQUEsRUFBUDtFQUFBLENBSEksQ0FJVCxDQUFDLEtBSlEsQ0FBQSxDQUxYLENBQUE7QUFBQSxFQVVBLGdCQUFBLEdBQW1CLENBQUMsQ0FBQyxHQUFGLENBQU0sV0FBQSxDQUFZLE9BQVosRUFBcUIsS0FBckIsQ0FBTixFQUFtQyxRQUFuQyxDQVZuQixDQUFBO0FBQUEsRUFZQSxDQUFDLENBQUMsSUFBRixDQUFPLGdCQUFQLEVBQXlCLFNBQUMsSUFBRCxHQUFBO1dBQ3ZCLFlBQUEsQ0FBYSxJQUFiLEVBRHVCO0VBQUEsQ0FBekIsQ0FaQSxDQURVO0FBQUEsQ0E3Q1osQ0FBQTs7QUFBQSxZQWdFQSxHQUFlLFNBQUMsSUFBRCxHQUFBO0FBQ2IsTUFBQSxrQkFBQTtBQUFBLEVBRGUsb0JBQVUsa0JBQ3pCLENBQUE7QUFBQSxFQUFBLElBQUEsQ0FBQSxFQUFTLENBQUMsVUFBSCxDQUFjLFFBQWQsQ0FBUDtBQUNFLElBQUEsR0FBQSxDQUFJLE1BQUosRUFBYSxXQUFBLEdBQVUsUUFBdkIsQ0FBQSxDQUFBO1dBQ0EsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsUUFBakIsRUFBMkIsUUFBM0IsRUFGRjtHQURhO0FBQUEsQ0FoRWYsQ0FBQTs7QUFBQSxNQXFFTSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxFQUFDLGlCQUFBLGVBQUQ7QUFBQSxFQUFrQixpQkFBQSxlQUFsQjtDQXJFakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXHJcbmZzID0gcmVxdWlyZSAnZnMnXHJcbnBhdGggPSByZXF1aXJlICdwYXRoJ1xyXG53cmVuY2ggPSByZXF1aXJlICd3cmVuY2gnXHJcbl8gPSByZXF1aXJlICdsb2Rhc2gnXHJcbntsb2csIHJlbGF0aXZlVG9UaGlzRmlsZX0gPSByZXF1aXJlICcuL3V0aWwnXHJcbkJsaXNzID0gcmVxdWlyZSAnYmxpc3MnXHJcbmJsaXNzID0gbmV3IEJsaXNzXHJcbiAgZXh0OiBcIi5ibGlzc1wiXHJcbiAgY2FjaGVFbmFibGVkOiBmYWxzZSxcclxuICBjb250ZXh0OiB7fVxyXG5jd2QgPSBwcm9jZXNzLmN3ZCgpXHJcblxyXG5zZXR1cEZpbGVTeXN0ZW0gPSAoYXJncywgcmV0cmlldmVDb25maWcpIC0+XHJcbiAgcmV0cmlldmVDb25maWcoZmFsc2UsIChjb25maWcpIC0+XG4gICAgYmFzZURpciA9IGNvbmZpZy5mdWJ1bXZjLmJhc2VEaXJcbiAgICBtYWtlRm9sZGVycyhiYXNlRGlyKVxyXG4gICAgaW5pdEZpbGVzKGFyZ3MsIGJhc2VEaXIpXHJcbiAgKVxuXHJcbnJlc2V0RmlsZVN5c3RlbSA9IChhcmdzLCByZXRyaWV2ZUNvbmZpZykgLT5cclxuICByZXRyaWV2ZUNvbmZpZyhmYWxzZSwgKGNvbmZpZykgLT5cbiAgICBkZWxldGVGb2xkZXJzKGNvbmZpZy5mdWJ1bXZjLmJhc2VEaXIpXHJcbiAgICBzZXR1cEZpbGVTeXN0ZW0gYXJncywgcmV0cmlldmVDb25maWdcclxuICApXG5cclxubWFrZUZvbGRlcnMgPSAoYmFzZURpciA9IFwiXCIpLT5cclxuICBmb2xkZXJzID0gWydhc3NldHMvc2NyaXB0cycsICdhc3NldHMvc3R5bGVzJywgJ3B1YmxpYyddXHJcbiAgXy5lYWNoIGZvbGRlcnMsIChkaXIpIC0+XHJcbiAgICB1bmxlc3MgZnMuZXhpc3RzU3luYyBkaXJcclxuICAgICAgdGFyZ2V0ID0gcGF0aC5qb2luKGJhc2VEaXIsIGRpcilcbiAgICAgIGxvZyBcImluZm9cIiwgXCJjcmVhdGluZyAje3RhcmdldH1cIlxyXG4gICAgICB3cmVuY2gubWtkaXJTeW5jUmVjdXJzaXZlIHRhcmdldCwgMG8wNzc3XHJcblxyXG5kZWxldGVGb2xkZXJzID0gKGJhc2VEaXIgPSBcIlwiKS0+XHJcbiAgZm9sZGVycyA9IFsnYXNzZXRzJywgJ3B1YmxpYyddXHJcbiAgXy5lYWNoIGZvbGRlcnMsIChkaXIpIC0+XHJcbiAgICB0YXJnZXQgPSBwYXRoLmpvaW4oYmFzZURpciwgZGlyKVxuICAgIGlmIGZzLmV4aXN0c1N5bmMgdGFyZ2V0XHJcbiAgICAgIGxvZyBcImluZm9cIiwgXCJkZWxldGluZyAje3RhcmdldH1cIlxyXG4gICAgICB3cmVuY2gucm1kaXJTeW5jUmVjdXJzaXZlIHRhcmdldFxyXG5cbmZpbGVzQXRCYXNlID0gKGJhc2VEaXIsIGZpbGVzKSAtPlxuICBfLm1hcCBmaWxlcywgKGYpLT4gcGF0aC5qb2luKGJhc2VEaXIsIGYpXG5cclxuaW5pdEZpbGVzID0gKGZsYWdzID0gZmFsc2UsIGJhc2VEaXIgPSBcIlwiKSAtPlxyXG4gIHVzZUNvZmZlZSA9IGZsYWdzID09IFwiY29mZmVlXCJcclxuICBleHQgPSBpZiB1c2VDb2ZmZWUgdGhlbiBcImNvZmZlZVwiIGVsc2UgXCJqc1wiXHJcbiAgZmlsZXMgPSBbXCJib3dlci5qc29uXCIsIFwibWltb3NhLWNvbmZpZy4je2V4dH1cIiwgXCJhc3NldHMvZG9udC1kZWxldGUtbWUuanNcIl1cclxuICB2aWV3TW9kZWwgPVxyXG4gICAgbmFtZTogcGF0aC5iYXNlbmFtZSBjd2RcclxuICBjb250ZW50cyA9IF8gZmlsZXNcclxuICAgIC5tYXAgKGYpIC0+IHJlbGF0aXZlVG9UaGlzRmlsZSBwYXRoLmpvaW4oXCIuLi9mdWJ1LWltcG9ydC10ZW1wbGF0ZXMvXCIsIGYpXHJcbiAgICAubWFwIChmKSAtPiBibGlzcy5yZW5kZXIgZiwgdmlld01vZGVsXHJcbiAgICAubWFwIChmKSAtPiBmLnRyaW0oKVxyXG4gICAgLnZhbHVlKClcclxuICBmaWxlV2l0aENvbnRlbnRzID0gXy56aXAoZmlsZXNBdEJhc2UoYmFzZURpciwgZmlsZXMpLCBjb250ZW50cylcclxuXHJcbiAgXy5lYWNoIGZpbGVXaXRoQ29udGVudHMsIChwYWlyKSAtPlxyXG4gICAgY29weUNvbnRlbnRzIHBhaXJcclxuICAjYXZvaWQgcmV0dXJuaW5nIGFuIGFycmF5IG9mIG5vdGhpbmcgd2hlbiB1c2luZyBhIGNvbXByZWhlbnNpb24gYXMgeW91ciBsYXN0IGxpbmVcclxuICAjYnkgdXNpbmcgYW4gZXhwbGljaXQgcmV0dXJuXHJcbiAgcmV0dXJuXHJcblxyXG5jb3B5Q29udGVudHMgPSAoW2ZpbGVOYW1lLCBjb250ZW50c10pIC0+XHJcbiAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZmlsZU5hbWVcclxuICAgIGxvZyBcImluZm9cIiwgXCJjcmVhdGluZyAje2ZpbGVOYW1lfVwiXHJcbiAgICBmcy53cml0ZUZpbGVTeW5jIGZpbGVOYW1lLCBjb250ZW50c1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7c2V0dXBGaWxlU3lzdGVtLCByZXNldEZpbGVTeXN0ZW19XHJcbiJdfQ==
