"use strict";
var Bliss, bliss, copyContents, cwd, deleteFolders, fs, initFiles, log, makeFolders, path, relativeToThisFile, resetFileSystem, setupFileSystem, wrench, _, _ref;

fs = require('fs');

path = require('path');

wrench = require('wrench');

_ = require('lodash');

_ref = require('./util'), log = _ref.log, relativeToThisFile = _ref.relativeToThisFile;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

resetFileSystem = function(args) {
  deleteFolders();
  return setupFileSystem(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    if (!fs.existsSync(dir)) {
      log("info", "creating " + dir);
      return wrench.mkdirSyncRecursive(dir, 0x1ff);
    }
  });
};

deleteFolders = function() {
  var folders;
  folders = ['assets', 'public'];
  return _.each(folders, function(dir) {
    if (fs.existsSync(dir)) {
      log("info", "deleting " + dir);
      return wrench.rmdirSyncRecursive(dir);
    }
  });
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext, "assets/dont-delete-me.js"];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    log("info", "creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

module.exports = {
  setupFileSystem: setupFileSystem,
  resetFileSystem: resetFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcc2NhZmZvbGRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcaG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidW12Y1xcc3JjXFxzY2FmZm9sZGluZy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSw0SkFBQTs7QUFBQSxFQUNBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FETCxDQUFBOztBQUFBLElBRUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUZQLENBQUE7O0FBQUEsTUFHQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBSFQsQ0FBQTs7QUFBQSxDQUlBLEdBQUksT0FBQSxDQUFRLFFBQVIsQ0FKSixDQUFBOztBQUFBLE9BSzRCLE9BQUEsQ0FBUSxRQUFSLENBQTVCLEVBQUMsV0FBQSxHQUFELEVBQU0sMEJBQUEsa0JBTE4sQ0FBQTs7QUFBQSxLQU1BLEdBQVEsT0FBQSxDQUFRLE9BQVIsQ0FOUixDQUFBOztBQUFBLEtBT0EsR0FBWSxJQUFBLEtBQUEsQ0FDVjtBQUFBLEVBQUEsR0FBQSxFQUFLLFFBQUw7QUFBQSxFQUNBLFlBQUEsRUFBYyxLQURkO0FBQUEsRUFFQSxPQUFBLEVBQVMsRUFGVDtDQURVLENBUFosQ0FBQTs7QUFBQSxHQVdBLEdBQU0sT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQVhOLENBQUE7O0FBQUEsZUFhQSxHQUFrQixTQUFDLElBQUQsR0FBQTtBQUNoQixFQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUE7U0FDQSxTQUFBLENBQVUsSUFBVixFQUZnQjtBQUFBLENBYmxCLENBQUE7O0FBQUEsZUFpQkEsR0FBa0IsU0FBQyxJQUFELEdBQUE7QUFDaEIsRUFBQSxhQUFBLENBQUEsQ0FBQSxDQUFBO1NBQ0EsZUFBQSxDQUFnQixJQUFoQixFQUZnQjtBQUFBLENBakJsQixDQUFBOztBQUFBLFdBcUJBLEdBQWMsU0FBQSxHQUFB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QUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcclxuZnMgPSByZXF1aXJlICdmcydcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbndyZW5jaCA9IHJlcXVpcmUgJ3dyZW5jaCdcclxuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcclxue2xvZywgcmVsYXRpdmVUb1RoaXNGaWxlfSA9IHJlcXVpcmUgJy4vdXRpbCdcclxuQmxpc3MgPSByZXF1aXJlICdibGlzcydcclxuYmxpc3MgPSBuZXcgQmxpc3NcclxuICBleHQ6IFwiLmJsaXNzXCJcclxuICBjYWNoZUVuYWJsZWQ6IGZhbHNlLFxyXG4gIGNvbnRleHQ6IHt9XHJcbmN3ZCA9IHByb2Nlc3MuY3dkKClcclxuXHJcbnNldHVwRmlsZVN5c3RlbSA9IChhcmdzKSAtPlxyXG4gIG1ha2VGb2xkZXJzKClcclxuICBpbml0RmlsZXMoYXJncylcclxuXHJcbnJlc2V0RmlsZVN5c3RlbSA9IChhcmdzKSAtPlxyXG4gIGRlbGV0ZUZvbGRlcnMoKVxyXG4gIHNldHVwRmlsZVN5c3RlbSBhcmdzXHJcblxyXG5tYWtlRm9sZGVycyA9IC0+XHJcbiAgZm9sZGVycyA9IFsnYXNzZXRzL3NjcmlwdHMnLCAnYXNzZXRzL3N0eWxlcycsICdwdWJsaWMnXVxyXG4gIF8uZWFjaCBmb2xkZXJzLCAoZGlyKSAtPlxyXG4gICAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZGlyXHJcbiAgICAgIGxvZyBcImluZm9cIiwgXCJjcmVhdGluZyAje2Rpcn1cIlxyXG4gICAgICB3cmVuY2gubWtkaXJTeW5jUmVjdXJzaXZlIGRpciwgMG8wNzc3XHJcblxyXG5kZWxldGVGb2xkZXJzID0gLT5cclxuICBmb2xkZXJzID0gWydhc3NldHMnLCAncHVibGljJ11cclxuICBfLmVhY2ggZm9sZGVycywgKGRpcikgLT5cclxuICAgIGlmIGZzLmV4aXN0c1N5bmMgZGlyXHJcbiAgICAgIGxvZyBcImluZm9cIiwgXCJkZWxldGluZyAje2Rpcn1cIlxyXG4gICAgICB3cmVuY2gucm1kaXJTeW5jUmVjdXJzaXZlIGRpclxyXG5cclxuaW5pdEZpbGVzID0gKGZsYWdzID0gZmFsc2UpIC0+XHJcbiAgdXNlQ29mZmVlID0gZmxhZ3MgPT0gXCJjb2ZmZWVcIlxyXG4gIGV4dCA9IGlmIHVzZUNvZmZlZSB0aGVuIFwiY29mZmVlXCIgZWxzZSBcImpzXCJcclxuICBmaWxlcyA9IFtcImJvd2VyLmpzb25cIiwgXCJtaW1vc2EtY29uZmlnLiN7ZXh0fVwiLCBcImFzc2V0cy9kb250LWRlbGV0ZS1tZS5qc1wiXVxyXG4gIHZpZXdNb2RlbCA9XHJcbiAgICBuYW1lOiBwYXRoLmJhc2VuYW1lIGN3ZFxyXG4gIGNvbnRlbnRzID0gXyBmaWxlc1xyXG4gICAgLm1hcCAoZikgLT4gcmVsYXRpdmVUb1RoaXNGaWxlIFwiLi4vZnVidS1pbXBvcnQtdGVtcGxhdGVzLyN7Zn1cIlxyXG4gICAgLm1hcCAoZikgLT4gYmxpc3MucmVuZGVyIGYsIHZpZXdNb2RlbFxyXG4gICAgLm1hcCAoZikgLT4gZi50cmltKClcclxuICAgIC52YWx1ZSgpXHJcbiAgZmlsZVdpdGhDb250ZW50cyA9IF8uemlwKGZpbGVzLCBjb250ZW50cylcclxuXHJcbiAgXy5lYWNoIGZpbGVXaXRoQ29udGVudHMsIChwYWlyKSAtPlxyXG4gICAgY29weUNvbnRlbnRzIHBhaXJcclxuICAjYXZvaWQgcmV0dXJuaW5nIGFuIGFycmF5IG9mIG5vdGhpbmcgd2hlbiB1c2luZyBhIGNvbXByZWhlbnNpb24gYXMgeW91ciBsYXN0IGxpbmVcclxuICAjYnkgdXNpbmcgYW4gZXhwbGljaXQgcmV0dXJuXHJcbiAgcmV0dXJuXHJcblxyXG5jb3B5Q29udGVudHMgPSAoW2ZpbGVOYW1lLCBjb250ZW50c10pIC0+XHJcbiAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZmlsZU5hbWVcclxuICAgIGxvZyBcImluZm9cIiwgXCJjcmVhdGluZyAje2ZpbGVOYW1lfVwiXHJcbiAgICBmcy53cml0ZUZpbGVTeW5jIGZpbGVOYW1lLCBjb250ZW50c1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7c2V0dXBGaWxlU3lzdGVtLCByZXNldEZpbGVTeXN0ZW19XHJcbiJdfQ==
