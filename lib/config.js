"use strict";
var path, _;

_ = require("lodash");

path = require('path');

exports.defaults = function() {
  return {
    fubumvc: {
      excludePaths: ["bin", "obj", /^\./],
      conventions: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n# fubumvc:\n  # excludePaths: [\"bin\", \"obj\", /^\./]\n  # conventions: [\n    # provide 0 or more conventions\n    # { \n      # match: (file, ext) ->\n        # true #filename and extension, return true/false,\n      # transform: (file, path) ->\n        # file #filename and path module to do path.join, etc\n    # }\n  # ]";
};

exports.validate = function(config, validators) {
  var compiledDir, conventions, conventionsOk, errors, excludePaths, excludePathsOk, fubumvc, ignorePaths, sourceDir, _ref;
  errors = [];
  fubumvc = config.fubumvc;
  if (!((fubumvc != null) && _.isObject(fubumvc))) {
    errors.push("fubumvc config");
    return errors;
  }
  excludePaths = fubumvc.excludePaths, conventions = fubumvc.conventions;
  if (!((excludePaths != null) && _.isArray(excludePaths))) {
    errors.push("fubumvc.excludePaths");
    return errors;
  }
  excludePathsOk = _.all(excludePaths, function(item) {
    return _.isString(item) || _.isRegExp(item);
  });
  if (!excludePathsOk) {
    errors.push("fubumvc.excludePaths entries must be either strings or regexes");
    return errors;
  }
  if (!((conventions != null) && _.isArray(conventions))) {
    errors.push("fubumvc.conventions");
    return errors;
  }
  conventionsOk = _.all(conventions, function(item) {
    return _.isObject(item) && _.all(["match", "transform"], function(func) {
      return _.isFunction(item[func]);
    });
  });
  if (!conventionsOk) {
    errors.push("fubumvc.conventions entries must be objects with match: (file, ext) -> and transform: (file, path) ->");
    return errors;
  }
  _ref = config.watch, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir;
  ignorePaths = _.map([sourceDir, compiledDir, 'node_modules'], function(p) {
    return path.basename(p);
  });
  config.fubumvc.excludePaths = excludePaths.concat(ignorePaths);
  config.fubumvc.sourceDir = sourceDir;
  config.fubumvc.compiledDir = compiledDir;
  config.fubumvc.isBuild = config.isBuild;
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcZGVsZXRlTWVcXG1pbW9zYS1mdWJ1bXZjXFxsaWJcXGNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImM6XFxob21lXFxnaXRodWJcXGRlbGV0ZU1lXFxtaW1vc2EtZnVidW12Y1xcc3JjXFxjb25maWcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTtBQUFBLElBQUEsT0FBQTs7QUFBQSxDQUVBLEdBQUksT0FBQSxDQUFRLFFBQVIsQ0FGSixDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsT0FLTyxDQUFDLFFBQVIsR0FBbUIsU0FBQSxHQUFBO1NBQ2pCO0FBQUEsSUFBQSxPQUFBLEVBQ0U7QUFBQSxNQUFBLFlBQUEsRUFBYyxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixDQUFkO0FBQUEsTUFDQSxXQUFBLEVBQWEsRUFEYjtLQURGO0lBRGlCO0FBQUEsQ0FMbkIsQ0FBQTs7QUFBQSxPQVVPLENBQUMsV0FBUixHQUFzQixTQUFBLEdBQUE7U0FDcEIsaVZBRG9CO0FBQUEsQ0FWdEIsQ0FBQTs7QUFBQSxPQTJCTyxDQUFDLFFBQVIsR0FBbUIsU0FBQyxNQUFELEVBQVMsVUFBVCxHQUFBO0FBQ2pCLE1BQUEsb0hBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxFQUFULENBQUE7QUFBQSxFQUNDLFVBQVcsT0FBWCxPQURELENBQUE7QUFFQSxFQUFBLElBQUEsQ0FBQSxDQUFPLGlCQUFBLElBQWEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYLENBQXBCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksZ0JBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FGQTtBQUFBLEVBTUMsdUJBQUEsWUFBRCxFQUFlLHNCQUFBLFdBTmYsQ0FBQTtBQVFBLEVBQUEsSUFBQSxDQUFBLENBQU8sc0JBQUEsSUFBa0IsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxZQUFWLENBQXpCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksc0JBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FSQTtBQUFBLEVBWUEsY0FBQSxHQUFpQixDQUFDLENBQUMsR0FBRixDQUFNLFlBQU4sRUFBb0IsU0FBQyxJQUFELEdBQUE7V0FDbkMsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxJQUFYLENBQUEsSUFBb0IsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxJQUFYLEVBRGU7RUFBQSxDQUFwQixDQVpqQixDQUFBO0FBZUEsRUFBQSxJQUFBLENBQUEsY0FBQTtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxnRUFBWixDQUFBLENBQUE7QUFDQSxXQUFPLE1BQVAsQ0FGRjtHQWZBO0FBbUJBLEVBQUEsSUFBQSxDQUFBLENBQU8scUJBQUEsSUFBaUIsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxXQUFWLENBQXhCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVkscUJBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FuQkE7QUFBQSxFQXVCQSxhQUFBLEdBQWdCLENBQUMsQ0FBQyxHQUFGLENBQU0sV0FBTixFQUFtQixTQUFDLElBQUQsR0FBQTtXQUNqQyxDQUFDLENBQUMsUUFBRixDQUFXLElBQVgsQ0FBQSxJQUFxQixDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsT0FBRCxFQUFVLFdBQVYsQ0FBTixFQUE4QixTQUFDLElBQUQsR0FBQTthQUFVLENBQUMsQ0FBQyxVQUFGLENBQWEsSUFBSyxDQUFBLElBQUEsQ0FBbEIsRUFBVjtJQUFBLENBQTlCLEVBRFk7RUFBQSxDQUFuQixDQXZCaEIsQ0FBQTtBQTBCQSxFQUFBLElBQUEsQ0FBQSxhQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLHVHQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBMUJBO0FBQUEsU0ErQm9DLE9BQW5DLE9BQVEsaUJBQUEsV0FBVyxtQkFBQSxXQS9CcEIsQ0FBQTtBQUFBLEVBZ0NBLFdBQUEsR0FBYyxDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsU0FBRCxFQUFZLFdBQVosRUFBeUIsY0FBekIsQ0FBTixFQUFnRCxTQUFDLENBQUQsR0FBQTtXQUFPLElBQUksQ0FBQyxRQUFMLENBQWMsQ0FBZCxFQUFQO0VBQUEsQ0FBaEQsQ0FoQ2QsQ0FBQTtBQUFBLEVBa0NBLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBZixHQUE4QixZQUFZLENBQUMsTUFBYixDQUFvQixXQUFwQixDQWxDOUIsQ0FBQTtBQUFBLEVBbUNBLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBZixHQUEyQixTQW5DM0IsQ0FBQTtBQUFBLEVBb0NBLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBZixHQUE2QixXQXBDN0IsQ0FBQTtBQUFBLEVBcUNBLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBZixHQUF5QixNQUFNLENBQUMsT0FyQ2hDLENBQUE7U0F1Q0EsT0F4Q2lCO0FBQUEsQ0EzQm5CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSBcImxvZGFzaFwiXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcblxuZXhwb3J0cy5kZWZhdWx0cyA9IC0+XG4gIGZ1YnVtdmM6XG4gICAgZXhjbHVkZVBhdGhzOiBbXCJiaW5cIiwgXCJvYmpcIiwgL15cXC4vXVxuICAgIGNvbnZlbnRpb25zOiBbXVxuXG5leHBvcnRzLnBsYWNlaG9sZGVyID0gLT5cbiAgXCJcIlwiXG4gIFxcdFxuXG4gICMgZnVidW12YzpcbiAgICAjIGV4Y2x1ZGVQYXRoczogW1wiYmluXCIsIFwib2JqXCIsIC9eXFwuL11cbiAgICAjIGNvbnZlbnRpb25zOiBbXG4gICAgICAjIHByb3ZpZGUgMCBvciBtb3JlIGNvbnZlbnRpb25zXG4gICAgICAjIHsgXG4gICAgICAgICMgbWF0Y2g6IChmaWxlLCBleHQpIC0+XG4gICAgICAgICAgIyB0cnVlICNmaWxlbmFtZSBhbmQgZXh0ZW5zaW9uLCByZXR1cm4gdHJ1ZS9mYWxzZSxcbiAgICAgICAgIyB0cmFuc2Zvcm06IChmaWxlLCBwYXRoKSAtPlxuICAgICAgICAgICMgZmlsZSAjZmlsZW5hbWUgYW5kIHBhdGggbW9kdWxlIHRvIGRvIHBhdGguam9pbiwgZXRjXG4gICAgICAjIH1cbiAgICAjIF1cbiAgXCJcIlwiXG5cbmV4cG9ydHMudmFsaWRhdGUgPSAoY29uZmlnLCB2YWxpZGF0b3JzKSAtPlxuICBlcnJvcnMgPSBbXVxuICB7ZnVidW12Y30gPSBjb25maWdcbiAgdW5sZXNzIGZ1YnVtdmM/IGFuZCBfLmlzT2JqZWN0IGZ1YnVtdmNcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMgY29uZmlnXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAge2V4Y2x1ZGVQYXRocywgY29udmVudGlvbnN9ID0gZnVidW12Y1xuXG4gIHVubGVzcyBleGNsdWRlUGF0aHM/IGFuZCBfLmlzQXJyYXkgZXhjbHVkZVBhdGhzXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmV4Y2x1ZGVQYXRoc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIGV4Y2x1ZGVQYXRoc09rID0gXy5hbGwgZXhjbHVkZVBhdGhzLCAoaXRlbSkgLT5cbiAgICBfLmlzU3RyaW5nKGl0ZW0pIG9yIF8uaXNSZWdFeHAoaXRlbSlcblxuICB1bmxlc3MgZXhjbHVkZVBhdGhzT2tcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuZXhjbHVkZVBhdGhzIGVudHJpZXMgbXVzdCBiZSBlaXRoZXIgc3RyaW5ncyBvciByZWdleGVzXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgdW5sZXNzIGNvbnZlbnRpb25zPyBhbmQgXy5pc0FycmF5IGNvbnZlbnRpb25zXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmNvbnZlbnRpb25zXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgY29udmVudGlvbnNPayA9IF8uYWxsIGNvbnZlbnRpb25zLCAoaXRlbSkgLT5cbiAgICBfLmlzT2JqZWN0KGl0ZW0pIGFuZCBfLmFsbCBbXCJtYXRjaFwiLCBcInRyYW5zZm9ybVwiXSwgKGZ1bmMpIC0+IF8uaXNGdW5jdGlvbiBpdGVtW2Z1bmNdXG5cbiAgdW5sZXNzIGNvbnZlbnRpb25zT2tcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuY29udmVudGlvbnMgZW50cmllcyBtdXN0IGJlIG9iamVjdHMgd2l0aCBtYXRjaDogKGZpbGUsIGV4dCkgLT4gYW5kIHRyYW5zZm9ybTogKGZpbGUsIHBhdGgpIC0+XCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgI2F1dG8taW5jbHVkZSB0aGUgc291cmNlRGlyIGFuZCBjb21waWxlZERpciBpbnRvIGV4Y2x1ZGVQYXRocyBsaXN0XG4gIHt3YXRjaDoge3NvdXJjZURpciwgY29tcGlsZWREaXJ9fSA9IGNvbmZpZ1xuICBpZ25vcmVQYXRocyA9IF8ubWFwIFtzb3VyY2VEaXIsIGNvbXBpbGVkRGlyLCAnbm9kZV9tb2R1bGVzJ10sIChwKSAtPiBwYXRoLmJhc2VuYW1lIHBcblxuICBjb25maWcuZnVidW12Yy5leGNsdWRlUGF0aHMgPSBleGNsdWRlUGF0aHMuY29uY2F0IGlnbm9yZVBhdGhzXG4gIGNvbmZpZy5mdWJ1bXZjLnNvdXJjZURpciA9IHNvdXJjZURpclxuICBjb25maWcuZnVidW12Yy5jb21waWxlZERpciA9IGNvbXBpbGVkRGlyXG4gIGNvbmZpZy5mdWJ1bXZjLmlzQnVpbGQgPSBjb25maWcuaXNCdWlsZFxuXG4gIGVycm9yc1xuIl19
