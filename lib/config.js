"use strict";
var fs, path, _;

_ = require("lodash");

path = require('path');

fs = require('fs');

exports.defaults = function() {
  return {
    fubumvc: {
      usePolling: true,
      interval: 500,
      binaryInterval: 1000,
      excludePaths: ["bin", "obj", /^\./],
      conventions: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n# fubumvc:\n  # usePolling: true\n  # interval: 500\n  # binaryInterval: 1000\n  # excludePaths: [\"bin\", \"obj\", /^\./]\n  # conventions: [\n    # provide 0 or more conventions\n    # { \n      # match: (file, ext, log) ->\n        # true #filename and extension, return true/false,\n      # transform: (file, path, log) ->\n        # file #filename and path module to do path.join, etc\n    # }\n  # ]";
};

exports.validate = function(config, validators) {
  var baseDir, binaryInterval, compiledDir, conventions, conventionsOk, errors, excludePaths, excludePathsOk, fubumvc, ignorePaths, interval, sourceDir, usePolling, _ref;
  errors = [];
  fubumvc = config.fubumvc;
  if (!((fubumvc != null) && _.isObject(fubumvc))) {
    errors.push("fubumvc config");
    return errors;
  }
  excludePaths = fubumvc.excludePaths, conventions = fubumvc.conventions, usePolling = fubumvc.usePolling, interval = fubumvc.interval, binaryInterval = fubumvc.binaryInterval, baseDir = fubumvc.baseDir;
  if (!((baseDir == null) || ((baseDir != null) && fs.existsSync(baseDir)))) {
    errors.push("fubumvc.baseDir");
    return errors;
  }
  if (!((usePolling != null) && _.isBoolean(usePolling))) {
    errors.push("fubumvc.usePolling");
    return errors;
  }
  if (!((interval != null) && _.isNumber(interval))) {
    errors.push("fubumvc.interval");
    return errors;
  }
  if (!((binaryInterval != null) && _.isNumber(binaryInterval))) {
    errors.push("fubumvc.binaryInterval");
    return errors;
  }
  if (!((excludePaths != null) && _.isArray(excludePaths))) {
    errors.push("fubumvc.excludePaths");
    return errors;
  }
  excludePathsOk = _.all(excludePaths, function(item) {
    return _.isString(item) || _.isRegExp(item);
  });
  if (!excludePathsOk) {
    errors.push("fubumvc.excludePaths entries must be either strings or regexes");
    return errors;
  }
  if (!((conventions != null) && _.isArray(conventions))) {
    errors.push("fubumvc.conventions");
    return errors;
  }
  conventionsOk = _.all(conventions, function(item) {
    return _.isObject(item) && _.all(["match", "transform"], function(func) {
      return _.isFunction(item[func]);
    });
  });
  if (!conventionsOk) {
    errors.push("fubumvc.conventions entries must be objects with match: (file, ext) -> and transform: (file, path) ->");
    return errors;
  }
  _ref = config.watch, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir;
  ignorePaths = _.map([sourceDir, compiledDir, 'node_modules'], function(p) {
    return path.basename(p);
  });
  config.fubumvc.excludePaths = excludePaths.concat(ignorePaths);
  config.fubumvc.sourceDir = sourceDir;
  config.fubumvc.compiledDir = compiledDir;
  config.fubumvc.isBuild = config.isBuild;
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL21udC9SZXNvdXJjZXMvUHJvamVjdHMvbWltb3NhLWZ1YnVtdmMvbGliL2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9tbnQvUmVzb3VyY2VzL1Byb2plY3RzL21pbW9zYS1mdWJ1bXZjL3NyYy9jb25maWcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTtBQUFBLElBQUEsV0FBQTs7QUFBQSxDQUVBLEdBQUksT0FBQSxDQUFRLFFBQVIsQ0FGSixDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsRUFJQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBSkwsQ0FBQTs7QUFBQSxPQU1PLENBQUMsUUFBUixHQUFtQixTQUFBLEdBQUE7U0FDakI7QUFBQSxJQUFBLE9BQUEsRUFDRTtBQUFBLE1BQUEsVUFBQSxFQUFZLElBQVo7QUFBQSxNQUNBLFFBQUEsRUFBVSxHQURWO0FBQUEsTUFFQSxjQUFBLEVBQWdCLElBRmhCO0FBQUEsTUFHQSxZQUFBLEVBQWMsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsQ0FIZDtBQUFBLE1BSUEsV0FBQSxFQUFhLEVBSmI7S0FERjtJQURpQjtBQUFBLENBTm5CLENBQUE7O0FBQUEsT0FjTyxDQUFDLFdBQVIsR0FBc0IsU0FBQSxHQUFBO1NBQ3BCLDhaQURvQjtBQUFBLENBZHRCLENBQUE7O0FBQUEsT0FrQ08sQ0FBQyxRQUFSLEdBQW1CLFNBQUMsTUFBRCxFQUFTLFVBQVQsR0FBQTtBQUNqQixNQUFBLG1LQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQUEsRUFDQyxVQUFXLE9BQVgsT0FERCxDQUFBO0FBRUEsRUFBQSxJQUFBLENBQUEsQ0FBTyxpQkFBQSxJQUFhLENBQUMsQ0FBQyxRQUFGLENBQVcsT0FBWCxDQUFwQixDQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLGdCQUFaLENBQUEsQ0FBQTtB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R0FBQTtXQUFPLElBQUksQ0FBQyxRQUFMLENBQWMsQ0FBZCxFQUFQO0VBQUEsQ0FBaEQsQ0FoRGQsQ0FBQTtBQUFBLEVBa0RBLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBZixHQUE4QixZQUFZLENBQUMsTUFBYixDQUFvQixXQUFwQixDQWxEOUIsQ0FBQTtBQUFBLEVBbURBLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBZixHQUEyQixTQW5EM0IsQ0FBQTtBQUFBLEVBb0RBLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBZixHQUE2QixXQXBEN0IsQ0FBQTtBQUFBLEVBcURBLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBZixHQUF5QixNQUFNLENBQUMsT0FyRGhDLENBQUE7U0F1REEsT0F4RGlCO0FBQUEsQ0FsQ25CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5fID0gcmVxdWlyZSBcImxvZGFzaFwiXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcbmZzID0gcmVxdWlyZSAnZnMnXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBmdWJ1bXZjOlxuICAgIHVzZVBvbGxpbmc6IHRydWVcbiAgICBpbnRlcnZhbDogNTAwXG4gICAgYmluYXJ5SW50ZXJ2YWw6IDEwMDBcbiAgICBleGNsdWRlUGF0aHM6IFtcImJpblwiLCBcIm9ialwiLCAvXlxcLi9dXG4gICAgY29udmVudGlvbnM6IFtdXG5cbmV4cG9ydHMucGxhY2Vob2xkZXIgPSAtPlxuICBcIlwiXCJcbiAgXFx0XG5cbiAgIyBmdWJ1bXZjOlxuICAgICMgdXNlUG9sbGluZzogdHJ1ZVxuICAgICMgaW50ZXJ2YWw6IDUwMFxuICAgICMgYmluYXJ5SW50ZXJ2YWw6IDEwMDBcbiAgICAjIGV4Y2x1ZGVQYXRoczogW1wiYmluXCIsIFwib2JqXCIsIC9eXFwuL11cbiAgICAjIGNvbnZlbnRpb25zOiBbXG4gICAgICAjIHByb3ZpZGUgMCBvciBtb3JlIGNvbnZlbnRpb25zXG4gICAgICAjIHsgXG4gICAgICAgICMgbWF0Y2g6IChmaWxlLCBleHQsIGxvZykgLT5cbiAgICAgICAgICAjIHRydWUgI2ZpbGVuYW1lIGFuZCBleHRlbnNpb24sIHJldHVybiB0cnVlL2ZhbHNlLFxuICAgICAgICAjIHRyYW5zZm9ybTogKGZpbGUsIHBhdGgsIGxvZykgLT5cbiAgICAgICAgICAjIGZpbGUgI2ZpbGVuYW1lIGFuZCBwYXRoIG1vZHVsZSB0byBkbyBwYXRoLmpvaW4sIGV0Y1xuICAgICAgIyB9XG4gICAgIyBdXG4gIFwiXCJcIlxuXG5leHBvcnRzLnZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgZXJyb3JzID0gW11cbiAge2Z1YnVtdmN9ID0gY29uZmlnXG4gIHVubGVzcyBmdWJ1bXZjPyBhbmQgXy5pc09iamVjdCBmdWJ1bXZjXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjIGNvbmZpZ1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHtleGNsdWRlUGF0aHMsIGNvbnZlbnRpb25zLCB1c2VQb2xsaW5nLCBpbnRlcnZhbCwgYmluYXJ5SW50ZXJ2YWwsIGJhc2VEaXJ9ID0gZnVidW12Y1xuXG4gIHVubGVzcyAhYmFzZURpcj8gb3IgKGJhc2VEaXI/IGFuZCBmcy5leGlzdHNTeW5jIGJhc2VEaXIpXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmJhc2VEaXJcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICB1bmxlc3MgdXNlUG9sbGluZz8gYW5kIF8uaXNCb29sZWFuIHVzZVBvbGxpbmdcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMudXNlUG9sbGluZ1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHVubGVzcyBpbnRlcnZhbD8gYW5kIF8uaXNOdW1iZXIgaW50ZXJ2YWxcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuaW50ZXJ2YWxcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICB1bmxlc3MgYmluYXJ5SW50ZXJ2YWw/IGFuZCBfLmlzTnVtYmVyIGJpbmFyeUludGVydmFsXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmJpbmFyeUludGVydmFsXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgdW5sZXNzIGV4Y2x1ZGVQYXRocz8gYW5kIF8uaXNBcnJheSBleGNsdWRlUGF0aHNcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuZXhjbHVkZVBhdGhzXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgZXhjbHVkZVBhdGhzT2sgPSBfLmFsbCBleGNsdWRlUGF0aHMsIChpdGVtKSAtPlxuICAgIF8uaXNTdHJpbmcoaXRlbSkgb3IgXy5pc1JlZ0V4cChpdGVtKVxuXG4gIHVubGVzcyBleGNsdWRlUGF0aHNPa1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5leGNsdWRlUGF0aHMgZW50cmllcyBtdXN0IGJlIGVpdGhlciBzdHJpbmdzIG9yIHJlZ2V4ZXNcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICB1bmxlc3MgY29udmVudGlvbnM/IGFuZCBfLmlzQXJyYXkgY29udmVudGlvbnNcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuY29udmVudGlvbnNcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICBjb252ZW50aW9uc09rID0gXy5hbGwgY29udmVudGlvbnMsIChpdGVtKSAtPlxuICAgIF8uaXNPYmplY3QoaXRlbSkgYW5kIF8uYWxsIFtcIm1hdGNoXCIsIFwidHJhbnNmb3JtXCJdLCAoZnVuYykgLT4gXy5pc0Z1bmN0aW9uIGl0ZW1bZnVuY11cblxuICB1bmxlc3MgY29udmVudGlvbnNPa1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5jb252ZW50aW9ucyBlbnRyaWVzIG11c3QgYmUgb2JqZWN0cyB3aXRoIG1hdGNoOiAoZmlsZSwgZXh0KSAtPiBhbmQgdHJhbnNmb3JtOiAoZmlsZSwgcGF0aCkgLT5cIlxuICAgIHJldHVybiBlcnJvcnNcblxuICAjYXV0by1pbmNsdWRlIHRoZSBzb3VyY2VEaXIgYW5kIGNvbXBpbGVkRGlyIGludG8gZXhjbHVkZVBhdGhzIGxpc3RcbiAge3dhdGNoOiB7c291cmNlRGlyLCBjb21waWxlZERpcn19ID0gY29uZmlnXG4gIGlnbm9yZVBhdGhzID0gXy5tYXAgW3NvdXJjZURpciwgY29tcGlsZWREaXIsICdub2RlX21vZHVsZXMnXSwgKHApIC0+IHBhdGguYmFzZW5hbWUgcFxuXG4gIGNvbmZpZy5mdWJ1bXZjLmV4Y2x1ZGVQYXRocyA9IGV4Y2x1ZGVQYXRocy5jb25jYXQgaWdub3JlUGF0aHNcbiAgY29uZmlnLmZ1YnVtdmMuc291cmNlRGlyID0gc291cmNlRGlyXG4gIGNvbmZpZy5mdWJ1bXZjLmNvbXBpbGVkRGlyID0gY29tcGlsZWREaXJcbiAgY29uZmlnLmZ1YnVtdmMuaXNCdWlsZCA9IGNvbmZpZy5pc0J1aWxkXG5cbiAgZXJyb3JzXG4iXX0=
