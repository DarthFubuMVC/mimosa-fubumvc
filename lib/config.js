"use strict";
var path, _;

_ = require("lodash");

path = require('path');

exports.defaults = function() {
  return {
    fubumvc: {
      excludePaths: ["bin", "obj", /^\./],
      conventions: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n# fubumvc:\n  # excludePaths: [\"bin\", \"obj\", /^\./]\n  # conventions: [\n    # provide 0 or more conventions\n    # { \n      # match: (file, ext) ->\n        # true #filename and extension, return true/false,\n      # transform: (file, path) ->\n        # file #filename and path module to do path.join, etc\n    # }\n  # ]";
};

exports.validate = function(config, validators) {
  var compiledDir, conventions, conventionsOk, errors, excludePaths, excludePathsOk, fubumvc, ignorePaths, sourceDir, _ref;
  errors = [];
  fubumvc = config.fubumvc;
  if (!((fubumvc != null) && _.isObject(fubumvc))) {
    errors.push("fubumvc config");
    return errors;
  }
  excludePaths = fubumvc.excludePaths, conventions = fubumvc.conventions;
  if (!((excludePaths != null) && _.isArray(excludePaths))) {
    errors.push("fubumvc.excludePaths");
    return errors;
  }
  excludePathsOk = _.all(excludePaths, function(item) {
    return _.isString(item) || _.isRegExp(item);
  });
  if (!excludePathsOk) {
    errors.push("fubumvc.excludePaths entries must be either strings or regexes");
    return errors;
  }
  if (!((conventions != null) && _.isArray(conventions))) {
    errors.push("fubumvc.conventions");
    return errors;
  }
  conventionsOk = _.all(conventions, function(item) {
    return _.isObject(item) && _.all(["match", "transform"], function(func) {
      return _.isFunction(item[func]);
    });
  });
  if (!conventionsOk) {
    errors.push("fubumvc.conventions entries must be objects with match: (file, ext) -> and transform: (file, path) ->");
    return errors;
  }
  _ref = config.watch, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir;
  ignorePaths = _.map([sourceDir, compiledDir, 'node_modules'], function(p) {
    return path.basename(p);
  });
  config.fubumvc.excludePaths = excludePaths.concat(ignorePaths);
  config.fubumvc.sourceDir = sourceDir;
  config.fubumvc.compiledDir = compiledDir;
  config.fubumvc.isBuild = config.isBuild;
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXHNyY1xcY29uZmlnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLE9BQUE7O0FBQUEsQ0FFQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBRkosQ0FBQTs7QUFBQSxJQUdBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FIUCxDQUFBOztBQUFBLE9BS08sQ0FBQyxRQUFSLEdBQW1CLFNBQUEsR0FBQTtTQUNqQjtBQUFBLElBQUEsT0FBQSxFQUNFO0FBQUEsTUFBQSxZQUFBLEVBQWMsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsQ0FBZDtBQUFBLE1BQ0EsV0FBQSxFQUFhLEVBRGI7S0FERjtJQURpQjtBQUFBLENBTG5CLENBQUE7O0FBQUEsT0FVTyxDQUFDLFdBQVIsR0FBc0IsU0FBQSxHQUFBO1NBQ3BCLGlWQURvQjtBQUFBLENBVnRCLENBQUE7O0FBQUEsT0EyQk8sQ0FBQyxRQUFSLEdBQW1CLFNBQUMsTUFBRCxFQUFTLFVBQVQsR0FBQTtBQUNqQixNQUFBLG9IQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQUEsRUFDQyxVQUFXLE9BQVgsT0FERCxDQUFBO0FBRUEsRUFBQSxJQUFBLENBQUEsQ0FBTyxpQkFBQSxJQUFhLENBQUMsQ0FBQyxRQUFGLENBQVcsT0FBWCxDQUFwQixDQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLGdCQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBRkE7QUFBQSxFQU1DLHVCQUFBLFlBQUQsRUFBZSxzQkFBQSxXQU5mLENBQUE7QUFRQSxFQUFBLElBQUEsQ0FBQSxDQUFPLHNCQUFBLElBQWtCLENBQUMsQ0FBQyxPQUFGLENBQVUsWUFBVixDQUF6QixDQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLHNCQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBUkE7QUFBQSxFQVlBLGNBQUEsR0FBaUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxZQUFOLEVBQW9CLFNBQUMsSUFBRCxHQUFBO1dBQ25DLENBQUMsQ0FBQyxRQUFGLENBQVcsSUFBWCxDQUFBLElBQW9CLENBQUMsQ0FBQyxRQUFGLENBQVcsSUFBWCxFQURlO0VBQUEsQ0FBcEIsQ0FaakIsQ0FBQTtBQWVBLEVBQUEsSUFBQSxDQUFBLGNBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksZ0VBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FmQTtBQW1CQSxFQUFBLElBQUEsQ0FBQSxDQUFPLHFCQUFBLElBQWlCLENBQUMsQ0FBQyxPQUFGLENBQVUsV0FBVixDQUF4QixDQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLHFCQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBbkJBO0FBQUEsRUF1QkEsYUFBQSxHQUFnQixDQUFDLENBQUMsR0FBRixDQUFNLFdBQU4sRUFBbUIsU0FBQyxJQUFELEdBQUE7V0FDakMsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxJQUFYLENBQUEsSUFBcUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLE9BQUQsRUFBVSxXQUFWLENBQU4sRUFBOEIsU0FBQyxJQUFELEdBQUE7YUFBVSxDQUFDLENBQUMsVUFBRixDQUFhLElBQUssQ0FBQSxJQUFBLENBQWxCLEVBQVY7SUFBQSxDQUE5QixFQURZO0VBQUEsQ0FBbkIsQ0F2QmhCLENBQUE7QUEwQkEsRUFBQSxJQUFBLENBQUEsYUFBQTtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSx1R0FBWixDQUFBLENBQUE7QUFDQSxXQUFPLE1BQVAsQ0FGRjtHQTFCQTtBQUFBLFNBK0JvQyxPQUFuQyxPQUFRLGlCQUFBLFdBQVcsbUJBQUEsV0EvQnBCLENBQUE7QUFBQSxFQWdDQSxXQUFBLEdBQWMsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLFNBQUQsRUFBWSxXQUFaLEVBQXlCLGNBQXpCLENBQU4sRUFBZ0QsU0FBQyxDQUFELEdBQUE7V0FBTyxJQUFJLENBQUMsUUFBTCxDQUFjLENBQWQsRUFBUDtFQUFBLENBQWhELENBaENkLENBQUE7QUFBQSxFQWtDQSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQWYsR0FBOEIsWUFBWSxDQUFDLE1BQWIsQ0FBb0IsV0FBcEIsQ0FsQzlCLENBQUE7QUFBQSxFQW1DQSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWYsR0FBMkIsU0FuQzNCLENBQUE7QUFBQSxFQW9DQSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQWYsR0FBNkIsV0FwQzdCLENBQUE7QUFBQSxFQXFDQSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWYsR0FBeUIsTUFBTSxDQUFDLE9BckNoQyxDQUFBO1NBdUNBLE9BeENpQjtBQUFBLENBM0JuQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxuXyA9IHJlcXVpcmUgXCJsb2Rhc2hcIlxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBmdWJ1bXZjOlxuICAgIGV4Y2x1ZGVQYXRoczogW1wiYmluXCIsIFwib2JqXCIsIC9eXFwuL11cbiAgICBjb252ZW50aW9uczogW11cblxuZXhwb3J0cy5wbGFjZWhvbGRlciA9IC0+XG4gIFwiXCJcIlxuICBcXHRcblxuICAjIGZ1YnVtdmM6XG4gICAgIyBleGNsdWRlUGF0aHM6IFtcImJpblwiLCBcIm9ialwiLCAvXlxcLi9dXG4gICAgIyBjb252ZW50aW9uczogW1xuICAgICAgIyBwcm92aWRlIDAgb3IgbW9yZSBjb252ZW50aW9uc1xuICAgICAgIyB7IFxuICAgICAgICAjIG1hdGNoOiAoZmlsZSwgZXh0KSAtPlxuICAgICAgICAgICMgdHJ1ZSAjZmlsZW5hbWUgYW5kIGV4dGVuc2lvbiwgcmV0dXJuIHRydWUvZmFsc2UsXG4gICAgICAgICMgdHJhbnNmb3JtOiAoZmlsZSwgcGF0aCkgLT5cbiAgICAgICAgICAjIGZpbGUgI2ZpbGVuYW1lIGFuZCBwYXRoIG1vZHVsZSB0byBkbyBwYXRoLmpvaW4sIGV0Y1xuICAgICAgIyB9XG4gICAgIyBdXG4gIFwiXCJcIlxuXG5leHBvcnRzLnZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgZXJyb3JzID0gW11cbiAge2Z1YnVtdmN9ID0gY29uZmlnXG4gIHVubGVzcyBmdWJ1bXZjPyBhbmQgXy5pc09iamVjdCBmdWJ1bXZjXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjIGNvbmZpZ1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHtleGNsdWRlUGF0aHMsIGNvbnZlbnRpb25zfSA9IGZ1YnVtdmNcblxuICB1bmxlc3MgZXhjbHVkZVBhdGhzPyBhbmQgXy5pc0FycmF5IGV4Y2x1ZGVQYXRoc1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5leGNsdWRlUGF0aHNcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICBleGNsdWRlUGF0aHNPayA9IF8uYWxsIGV4Y2x1ZGVQYXRocywgKGl0ZW0pIC0+XG4gICAgXy5pc1N0cmluZyhpdGVtKSBvciBfLmlzUmVnRXhwKGl0ZW0pXG5cbiAgdW5sZXNzIGV4Y2x1ZGVQYXRoc09rXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmV4Y2x1ZGVQYXRocyBlbnRyaWVzIG11c3QgYmUgZWl0aGVyIHN0cmluZ3Mgb3IgcmVnZXhlc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHVubGVzcyBjb252ZW50aW9ucz8gYW5kIF8uaXNBcnJheSBjb252ZW50aW9uc1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5jb252ZW50aW9uc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIGNvbnZlbnRpb25zT2sgPSBfLmFsbCBjb252ZW50aW9ucywgKGl0ZW0pIC0+XG4gICAgXy5pc09iamVjdChpdGVtKSBhbmQgXy5hbGwgW1wibWF0Y2hcIiwgXCJ0cmFuc2Zvcm1cIl0sIChmdW5jKSAtPiBfLmlzRnVuY3Rpb24gaXRlbVtmdW5jXVxuXG4gIHVubGVzcyBjb252ZW50aW9uc09rXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmNvbnZlbnRpb25zIGVudHJpZXMgbXVzdCBiZSBvYmplY3RzIHdpdGggbWF0Y2g6IChmaWxlLCBleHQpIC0+IGFuZCB0cmFuc2Zvcm06IChmaWxlLCBwYXRoKSAtPlwiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gICNhdXRvLWluY2x1ZGUgdGhlIHNvdXJjZURpciBhbmQgY29tcGlsZWREaXIgaW50byBleGNsdWRlUGF0aHMgbGlzdFxuICB7d2F0Y2g6IHtzb3VyY2VEaXIsIGNvbXBpbGVkRGlyfX0gPSBjb25maWdcbiAgaWdub3JlUGF0aHMgPSBfLm1hcCBbc291cmNlRGlyLCBjb21waWxlZERpciwgJ25vZGVfbW9kdWxlcyddLCAocCkgLT4gcGF0aC5iYXNlbmFtZSBwXG5cbiAgY29uZmlnLmZ1YnVtdmMuZXhjbHVkZVBhdGhzID0gZXhjbHVkZVBhdGhzLmNvbmNhdCBpZ25vcmVQYXRoc1xuICBjb25maWcuZnVidW12Yy5zb3VyY2VEaXIgPSBzb3VyY2VEaXJcbiAgY29uZmlnLmZ1YnVtdmMuY29tcGlsZWREaXIgPSBjb21waWxlZERpclxuICBjb25maWcuZnVidW12Yy5pc0J1aWxkID0gY29uZmlnLmlzQnVpbGRcblxuICBlcnJvcnNcbiJdfQ==
