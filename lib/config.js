"use strict";
var path, _;

_ = require("lodash");

path = require('path');

exports.defaults = function() {
  return {
    fubumvc: {
      usePolling: true,
      interval: 500,
      binaryInterval: 1000,
      excludePaths: ["bin", "obj", /^\./],
      conventions: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n# fubumvc:\n  # usePolling: true\n  # interval: 500\n  # binaryInterval: 1000\n  # excludePaths: [\"bin\", \"obj\", /^\./]\n  # conventions: [\n    # provide 0 or more conventions\n    # { \n      # match: (file, ext, log) ->\n        # true #filename and extension, return true/false,\n      # transform: (file, path, log) ->\n        # file #filename and path module to do path.join, etc\n    # }\n  # ]";
};

exports.validate = function(config, validators) {
  var binaryInterval, compiledDir, conventions, conventionsOk, errors, excludePaths, excludePathsOk, fubumvc, ignorePaths, interval, sourceDir, usePolling, _ref;
  errors = [];
  fubumvc = config.fubumvc;
  if (!((fubumvc != null) && _.isObject(fubumvc))) {
    errors.push("fubumvc config");
    return errors;
  }
  excludePaths = fubumvc.excludePaths, conventions = fubumvc.conventions, usePolling = fubumvc.usePolling, interval = fubumvc.interval, binaryInterval = fubumvc.binaryInterval;
  if (!((usePolling != null) && _.isBoolean(usePolling))) {
    errors.push("fubumvc.usePolling");
    return errors;
  }
  if (!((interval != null) && _.isNumber(interval))) {
    errors.push("fubumvc.interval");
    return errors;
  }
  if (!((binaryInterval != null) && _.isNumber(binaryInterval))) {
    errors.push("fubumvc.binaryInterval");
    return errors;
  }
  if (!((excludePaths != null) && _.isArray(excludePaths))) {
    errors.push("fubumvc.excludePaths");
    return errors;
  }
  excludePathsOk = _.all(excludePaths, function(item) {
    return _.isString(item) || _.isRegExp(item);
  });
  if (!excludePathsOk) {
    errors.push("fubumvc.excludePaths entries must be either strings or regexes");
    return errors;
  }
  if (!((conventions != null) && _.isArray(conventions))) {
    errors.push("fubumvc.conventions");
    return errors;
  }
  conventionsOk = _.all(conventions, function(item) {
    return _.isObject(item) && _.all(["match", "transform"], function(func) {
      return _.isFunction(item[func]);
    });
  });
  if (!conventionsOk) {
    errors.push("fubumvc.conventions entries must be objects with match: (file, ext) -> and transform: (file, path) ->");
    return errors;
  }
  _ref = config.watch, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir;
  ignorePaths = _.map([sourceDir, compiledDir, 'node_modules'], function(p) {
    return path.basename(p);
  });
  config.fubumvc.excludePaths = excludePaths.concat(ignorePaths);
  config.fubumvc.sourceDir = sourceDir;
  config.fubumvc.compiledDir = compiledDir;
  config.fubumvc.isBuild = config.isBuild;
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXHNyY1xcY29uZmlnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLE9BQUE7O0FBQUEsQ0FFQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBRkosQ0FBQTs7QUFBQSxJQUdBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FIUCxDQUFBOztBQUFBLE9BS08sQ0FBQyxRQUFSLEdBQW1CLFNBQUEsR0FBQTtTQUNqQjtBQUFBLElBQUEsT0FBQSxFQUNFO0FBQUEsTUFBQSxVQUFBLEVBQVksSUFBWjtBQUFBLE1BQ0EsUUFBQSxFQUFVLEdBRFY7QUFBQSxNQUVBLGNBQUEsRUFBZ0IsSUFGaEI7QUFBQSxNQUdBLFlBQUEsRUFBYyxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixDQUhkO0FBQUEsTUFJQSxXQUFBLEVBQWEsRUFKYjtLQURGO0lBRGlCO0FBQUEsQ0FMbkIsQ0FBQTs7QUFBQSxPQWFPLENBQUMsV0FBUixHQUFzQixTQUFBLEdBQUE7U0FDcEIsOFpBRG9CO0FBQUEsQ0FidEIsQ0FBQTs7QUFBQSxPQWlDTyxDQUFDLFFBQVIsR0FBbUIsU0FBQyxNQUFELEVBQVMsVUFBVCxHQUFBO0FBQ2pCLE1BQUEsMEpBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxFQUFULENBQUE7QUFBQSxFQUNDLFVBQVcsT0FBWCxPQURELENBQUE7QUFFQSxFQUFBLElBQUEsQ0FBQSxDQUFPLGlCQUFBLElBQWEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYLENBQXBCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksZ0JBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FGQTtBQUFBLEVBTUMsdUJBQUEsWUFBRCxFQUFl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R0FBNkIsV0FoRDdCLENBQUE7QUFBQSxFQWlEQSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWYsR0FBeUIsTUFBTSxDQUFDLE9BakRoQyxDQUFBO1NBbURBLE9BcERpQjtBQUFBLENBakNuQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxuXyA9IHJlcXVpcmUgXCJsb2Rhc2hcIlxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBmdWJ1bXZjOlxuICAgIHVzZVBvbGxpbmc6IHRydWVcbiAgICBpbnRlcnZhbDogNTAwXG4gICAgYmluYXJ5SW50ZXJ2YWw6IDEwMDBcbiAgICBleGNsdWRlUGF0aHM6IFtcImJpblwiLCBcIm9ialwiLCAvXlxcLi9dXG4gICAgY29udmVudGlvbnM6IFtdXG5cbmV4cG9ydHMucGxhY2Vob2xkZXIgPSAtPlxuICBcIlwiXCJcbiAgXFx0XG5cbiAgIyBmdWJ1bXZjOlxuICAgICMgdXNlUG9sbGluZzogdHJ1ZVxuICAgICMgaW50ZXJ2YWw6IDUwMFxuICAgICMgYmluYXJ5SW50ZXJ2YWw6IDEwMDBcbiAgICAjIGV4Y2x1ZGVQYXRoczogW1wiYmluXCIsIFwib2JqXCIsIC9eXFwuL11cbiAgICAjIGNvbnZlbnRpb25zOiBbXG4gICAgICAjIHByb3ZpZGUgMCBvciBtb3JlIGNvbnZlbnRpb25zXG4gICAgICAjIHsgXG4gICAgICAgICMgbWF0Y2g6IChmaWxlLCBleHQsIGxvZykgLT5cbiAgICAgICAgICAjIHRydWUgI2ZpbGVuYW1lIGFuZCBleHRlbnNpb24sIHJldHVybiB0cnVlL2ZhbHNlLFxuICAgICAgICAjIHRyYW5zZm9ybTogKGZpbGUsIHBhdGgsIGxvZykgLT5cbiAgICAgICAgICAjIGZpbGUgI2ZpbGVuYW1lIGFuZCBwYXRoIG1vZHVsZSB0byBkbyBwYXRoLmpvaW4sIGV0Y1xuICAgICAgIyB9XG4gICAgIyBdXG4gIFwiXCJcIlxuXG5leHBvcnRzLnZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgZXJyb3JzID0gW11cbiAge2Z1YnVtdmN9ID0gY29uZmlnXG4gIHVubGVzcyBmdWJ1bXZjPyBhbmQgXy5pc09iamVjdCBmdWJ1bXZjXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjIGNvbmZpZ1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHtleGNsdWRlUGF0aHMsIGNvbnZlbnRpb25zLCB1c2VQb2xsaW5nLCBpbnRlcnZhbCwgYmluYXJ5SW50ZXJ2YWx9ID0gZnVidW12Y1xuXG4gIHVubGVzcyB1c2VQb2xsaW5nPyBhbmQgXy5pc0Jvb2xlYW4gdXNlUG9sbGluZ1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy51c2VQb2xsaW5nXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgdW5sZXNzIGludGVydmFsPyBhbmQgXy5pc051bWJlciBpbnRlcnZhbFxuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5pbnRlcnZhbFwiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHVubGVzcyBiaW5hcnlJbnRlcnZhbD8gYW5kIF8uaXNOdW1iZXIgYmluYXJ5SW50ZXJ2YWxcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuYmluYXJ5SW50ZXJ2YWxcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICB1bmxlc3MgZXhjbHVkZVBhdGhzPyBhbmQgXy5pc0FycmF5IGV4Y2x1ZGVQYXRoc1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5leGNsdWRlUGF0aHNcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICBleGNsdWRlUGF0aHNPayA9IF8uYWxsIGV4Y2x1ZGVQYXRocywgKGl0ZW0pIC0+XG4gICAgXy5pc1N0cmluZyhpdGVtKSBvciBfLmlzUmVnRXhwKGl0ZW0pXG5cbiAgdW5sZXNzIGV4Y2x1ZGVQYXRoc09rXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmV4Y2x1ZGVQYXRocyBlbnRyaWVzIG11c3QgYmUgZWl0aGVyIHN0cmluZ3Mgb3IgcmVnZXhlc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIHVubGVzcyBjb252ZW50aW9ucz8gYW5kIF8uaXNBcnJheSBjb252ZW50aW9uc1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12Yy5jb252ZW50aW9uc1wiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gIGNvbnZlbnRpb25zT2sgPSBfLmFsbCBjb252ZW50aW9ucywgKGl0ZW0pIC0+XG4gICAgXy5pc09iamVjdChpdGVtKSBhbmQgXy5hbGwgW1wibWF0Y2hcIiwgXCJ0cmFuc2Zvcm1cIl0sIChmdW5jKSAtPiBfLmlzRnVuY3Rpb24gaXRlbVtmdW5jXVxuXG4gIHVubGVzcyBjb252ZW50aW9uc09rXG4gICAgZXJyb3JzLnB1c2ggXCJmdWJ1bXZjLmNvbnZlbnRpb25zIGVudHJpZXMgbXVzdCBiZSBvYmplY3RzIHdpdGggbWF0Y2g6IChmaWxlLCBleHQpIC0+IGFuZCB0cmFuc2Zvcm06IChmaWxlLCBwYXRoKSAtPlwiXG4gICAgcmV0dXJuIGVycm9yc1xuXG4gICNhdXRvLWluY2x1ZGUgdGhlIHNvdXJjZURpciBhbmQgY29tcGlsZWREaXIgaW50byBleGNsdWRlUGF0aHMgbGlzdFxuICB7d2F0Y2g6IHtzb3VyY2VEaXIsIGNvbXBpbGVkRGlyfX0gPSBjb25maWdcbiAgaWdub3JlUGF0aHMgPSBfLm1hcCBbc291cmNlRGlyLCBjb21waWxlZERpciwgJ25vZGVfbW9kdWxlcyddLCAocCkgLT4gcGF0aC5iYXNlbmFtZSBwXG5cbiAgY29uZmlnLmZ1YnVtdmMuZXhjbHVkZVBhdGhzID0gZXhjbHVkZVBhdGhzLmNvbmNhdCBpZ25vcmVQYXRoc1xuICBjb25maWcuZnVidW12Yy5zb3VyY2VEaXIgPSBzb3VyY2VEaXJcbiAgY29uZmlnLmZ1YnVtdmMuY29tcGlsZWREaXIgPSBjb21waWxlZERpclxuICBjb25maWcuZnVidW12Yy5pc0J1aWxkID0gY29uZmlnLmlzQnVpbGRcblxuICBlcnJvcnNcbiJdfQ==
