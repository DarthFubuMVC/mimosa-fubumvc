"use strict";
exports.defaults = function() {
  return {
    minify: {
      exclude: ["\\.min\\."]
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n  # minify:                  # Configuration for non-require minification/compression via uglify\n                             # using the --minify flag.\n    # exclude:[/\\.min\\./]    # List of regexes to exclude files when running minification.\n                             # Any path with \".min.\" in its name, like jquery.min.js, is assumed to\n                             # already be minified and is ignored by default. Override this property\n                             # if you have other files that you'd like to exempt from minification.";
};

exports.validate = function(config, validators) {
  var errors, ex, _i, _len, _ref, _ref1;
  errors = [];
  if (validators.ifExistsIsObject(errors, "minify config", config.minify)) {
    if (validators.ifExistsIsArray(errors, "minify.exclude", config.minify.exclude)) {
      _ref = config.minify.exclude;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ex = _ref[_i];
        if (typeof ex !== "string") {
          errors.push("minify.exclude must be an array of strings");
          break;
        }
      }
    }
  }
  if (errors.length === 0 && ((_ref1 = config.minify.exclude) != null ? _ref1.length : void 0) > 0) {
    config.minify.exclude = new RegExp(config.minify.exclude.join("|"), "i");
  }
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVcXGxpYlxcY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVcXHNyY1xcY29uZmlnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxZQUFBLENBQUE7QUFBQSxPQU9PLENBQUMsUUFBUixHQUFtQixTQUFBLEdBQUE7U0FDakI7QUFBQSxJQUFBLE1BQUEsRUFDRTtBQUFBLE1BQUEsT0FBQSxFQUFRLENBQUMsV0FBRCxDQUFSO0tBREY7SUFEaUI7QUFBQSxDQVBuQixDQUFBOztBQUFBLE9BbUJPLENBQUMsV0FBUixHQUFzQixTQUFBLEdBQUE7U0FDcEIsa2pCQURvQjtBQUFBLENBbkJ0QixDQUFBOztBQUFBLE9Bd0NPLENBQUMsUUFBUixHQUFtQixTQUFDLE1BQUQsRUFBUyxVQUFULEdBQUE7QUFDakIsTUFBQSxpQ0FBQTtBQUFBLEVBQUEsTUFBQSxHQUFTLEVBQVQsQ0FBQTtBQUNBLEVBQUEsSUFBRyxVQUFVLENBQUMsZ0JBQVgsQ0FBNEIsTUFBNUIsRUFBb0MsZUFBcEMsRUFBcUQsTUFBTSxDQUFDLE1BQTVELENBQUg7QUFDRSxJQUFBLElBQUcsVUFBVSxDQUFDLGVBQVgsQ0FBMkIsTUFBM0IsRUFBbUMsZ0JBQW5DLEVBQXFELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBbkUsQ0FBSDtBQUNFO0FBQUEsV0FBQSwyQ0FBQTtzQkFBQTtBQUNFLFFBQUEsSUFBTyxNQUFBLENBQUEsRUFBQSxLQUFhLFFBQXBCO0FBQ0UsVUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLDRDQUFaLENBQUEsQ0FBQTtBQUNBLGdCQUZGO1NBREY7QUFBQSxPQURGO0tBREY7R0FEQTtBQWFBLEVBQUEsSUFBRyxNQUFNLENBQUMsTUFBUCxLQUFpQixDQUFqQixvREFBNEMsQ0FBRSxnQkFBdkIsR0FBZ0MsQ0FBMUQ7QUFDRSxJQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBZCxHQUE0QixJQUFBLE1BQUEsQ0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUF0QixDQUEyQixHQUEzQixDQUFQLEVBQXdDLEdBQXhDLENBQTVCLENBREY7R0FiQTtTQWdCQSxPQWpCaUI7QUFBQSxDQXhDbkIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiMjIyMgTW9kdWxlIENvbmZpZ3VyYXRpb25cblxuIyBUaGUgY29kZSBjb250YWluZWQgaGVyZWluIGlzIGFsbCBleGFtcGxlIGNvZGUgYW5kIHNob3VsZG4ndCBiZSB1c2VkIHZlcmJhdGltLlxuIyBUaGUgZXhhbXBsZSBpbiB0aGlzIGNhc2UgaXMgbW9kaWZpZWQgZnJvbSB0aGUgbWltb3NhLW1pbmlmeSBtb2R1bGUuXG5cblwidXNlIHN0cmljdFwiXG5cbiMgVGhlIGRlZmF1bHRzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBKU09OIG9iamVjdCBjb250YWluaW5nIHRoZSBkZWZhdWx0XG4jIGNvbmZpZyBmb3IgeW91ciBtb2R1bGUuIElmIHlvdXIgbW9kdWxlIGhhcyBubyBjb25maWcsIHRoZSBmdW5jdGlvbiBjYW4gYmVcbiMgcmVtb3ZlZCBvciByZXR1cm4gbnVsbC4gTWltb3NhIHVzZXMgdGhpcyBmdW5jdGlvbiB3aGVuIGFwcGx5aW5nIGRlZmF1bHRcbiMgY29uZmlndXJhdGlvbiB0byBhIHVzZXIncyBjb25maWcuXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBtaW5pZnk6XG4gICAgZXhjbHVkZTpbXCJcXFxcLm1pblxcXFwuXCJdXG5cbiMgVGhlIHBsYWNlaG9sZGVyIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZVxuIyBtaW1vc2EtY29uZmlnIHBsYWNlaG9sZGVyIGZvciB5b3VyIGNvbmZpZ3VyYXRpb24gZGVmYXVsdHMgaW5jbHVkaW5nXG4jIGV4cGxhbmF0aW9ucyBmb3IgZWFjaCBjb25maWcgc2V0dGluZyB3aGVyZSBhcHByb3ByaWF0ZS4gIFRoZSBjb250ZW50XG4jIG9mIHRoZSBzdHJpbmcgc2hvdWxkIGJlIGFsbCBjb21tZW50ZWQgb3V0LiBJZiB5b3UgaGF2ZSBubyBjb25maWcsXG4jIHRoZSBmdW5jdGlvbiBjYW4gYmUgcmVtb3ZlZCBvciBjYW4gcmV0dXJuIG51bGwuICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZFxuIyB3aGVuIE1pbW9zYSBpcyBjcmVhdGluZyBhbiBpbml0aWFsIG1pbW9zYS1jb25maWcgdXNpbmcgJ21pbW9zYSBuZXcnIG9yXG4jICdtaW1vc2EgY29uZmlnJ1xuXG5leHBvcnRzLnBsYWNlaG9sZGVyID0gLT5cbiAgXCJcIlwiXG4gIFxcdFxuXG4gICAgIyBtaW5pZnk6ICAgICAgICAgICAgICAgICAgIyBDb25maWd1cmF0aW9uIGZvciBub24tcmVxdWlyZSBtaW5pZmljYXRpb24vY29tcHJlc3Npb24gdmlhIHVnbGlmeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgdXNpbmcgdGhlIC0tbWluaWZ5IGZsYWcuXG4gICAgICAjIGV4Y2x1ZGU6Wy9cXFxcLm1pblxcXFwuL10gICAgIyBMaXN0IG9mIHJlZ2V4ZXMgdG8gZXhjbHVkZSBmaWxlcyB3aGVuIHJ1bm5pbmcgbWluaWZpY2F0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQW55IHBhdGggd2l0aCBcIi5taW4uXCIgaW4gaXRzIG5hbWUsIGxpa2UganF1ZXJ5Lm1pbi5qcywgaXMgYXNzdW1lZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWxyZWFkeSBiZSBtaW5pZmllZCBhbmQgaXMgaWdub3JlZCBieSBkZWZhdWx0LiBPdmVycmlkZSB0aGlzIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpZiB5b3UgaGF2ZSBvdGhlciBmaWxlcyB0aGF0IHlvdSdkIGxpa2UgdG8gZXhlbXB0IGZyb20gbWluaWZpY2F0aW9uLlxuICBcIlwiXCJcblxuIyBUaGUgdmFsaWRhdGUgZnVuY3Rpb24gdGFrZXMgYSBjb25maWcgb2JqZWN0ICh3aGljaCBpcyB0aGUgZW50aXJlXG4jIG1pbW9zYS1jb25maWcpIGFuZCBhIHZhbGlkYXRvcnMgb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHNldmVyYWwgdXNlZnVsXG4jIHZhbGlkYXRpb24gbWV0aG9kcy4gVXNpbmcgY3VzdG9tIHZhbGlkYXRpb24gYW5kIHZhbGlkYXRpb24gcHJvdmlkZWRcbiMgdmlhIHRoZSB2YWxpZGF0b3JzLCB0aGUgdmFsaWRhdGUgbWV0aG9kIHNob3VsZCBmaW5kIHRoZSBtb2R1bGUgc3BlY2lmaWNcbiMgY29uZmlnLCB2YWxpZGF0ZSB0aGUgc2V0dGluZ3MgYW5kIHJldHVybiBhIGxpc3Qgb2Ygc3RyaW5ncyB0aGF0IGFyZVxuIyB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzLiBJZiB0aGVyZSBhcmUgbm8gZXJyb3JzLCByZXR1cm4gYW4gZW1wdHlcbiMgYXJyYXkgb3IgcmV0dXJuIG5vdGhpbmcuICBNaW1vc2EgdXNlcyB0aGlzIGZ1bmN0aW9uIHdoZW4gTWltb3NhIHN0YXJ0c1xuIyB1cCB0byBlbnN1cmUgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gc2V0IHByb3Blcmx5LlxuXG5leHBvcnRzLnZhbGlkYXRlID0gKGNvbmZpZywgdmFsaWRhdG9ycykgLT5cbiAgZXJyb3JzID0gW11cbiAgaWYgdmFsaWRhdG9ycy5pZkV4aXN0c0lzT2JqZWN0KGVycm9ycywgXCJtaW5pZnkgY29uZmlnXCIsIGNvbmZpZy5taW5pZnkpXG4gICAgaWYgdmFsaWRhdG9ycy5pZkV4aXN0c0lzQXJyYXkoZXJyb3JzLCBcIm1pbmlmeS5leGNsdWRlXCIsIGNvbmZpZy5taW5pZnkuZXhjbHVkZSlcbiAgICAgIGZvciBleCBpbiBjb25maWcubWluaWZ5LmV4Y2x1ZGVcbiAgICAgICAgdW5sZXNzIHR5cGVvZiBleCBpcyBcInN0cmluZ1wiXG4gICAgICAgICAgZXJyb3JzLnB1c2ggXCJtaW5pZnkuZXhjbHVkZSBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3NcIlxuICAgICAgICAgIGJyZWFrXG5cbiAgIyBUaGUgdmFsaWRhdGUgZnVuY3Rpb24gaXMgYWxzbyBhbiBvcHBvcnR1bml0eSB0byBkbyBjb25maWd1cmF0aW9uIG1hc3NhZ2luZyxcbiAgIyBmb3IgaW5zdGFuY2UsIHR1cm5pbmcgYSBsaXN0IG9mIHN0cmluZ3MgaW50byBhIHNpbmdsZSBSZWdFeHAuICBDaGFuZ2VzXG4gICMgbWFkZSB0byB0aGUgY29uZmlnIGluc2lkZSB2YWxpZGF0ZSBhcmUgcGVybWFtZW50IGFuZCBjYXJyaWVkIHRocm91Z2hvdXRcbiAgIyB0aGUgY3VycmVudGx5IHJ1bm5pbmcgTWltb3NhIHByb2Nlc3MuXG5cbiAgaWYgZXJyb3JzLmxlbmd0aCBpcyAwIGFuZCBjb25maWcubWluaWZ5LmV4Y2x1ZGU/Lmxlbmd0aCA+IDBcbiAgICBjb25maWcubWluaWZ5LmV4Y2x1ZGUgPSBuZXcgUmVnRXhwIGNvbmZpZy5taW5pZnkuZXhjbHVkZS5qb2luKFwifFwiKSwgXCJpXCJcblxuICBlcnJvcnNcbiJdfQ==
