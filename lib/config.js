"use strict";
var path, _;

_ = require("lodash");

path = require('path');

exports.defaults = function() {
  return {
    fubumvc: {
      excludePaths: ["bin", "obj", /^\./],
      conventions: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n# fubumvc:\n  # excludePaths: [\"bin\", \"obj\", /^\./]\n  # conventions: [\n    # {\n      # match: (file, ext) -> true #filename and extension, return true/false,\n      # transform: (file, path) -> file #is filename, path is path module\n      # }\n  # ]";
};

exports.validate = function(config, validators) {
  var allItemsOk, compiledDir, errors, excludePaths, fubumvc, ignorePaths, sourceDir, _ref, _ref1;
  errors = [];
  fubumvc = config.fubumvc;
  if (!((fubumvc != null) && _.isObject(fubumvc))) {
    errors.push("fubumvc config");
    return errors;
  }
  excludePaths = fubumvc.excludePaths;
  if (!((excludePaths != null) && _.isArray(excludePaths))) {
    errors.push("fubumvc.excludePaths");
    return errors;
  }
  allItemsOk = _.all(excludePaths, function(item) {
    return _.isString(item) || _.isRegExp(item);
  });
  if (!allItemsOk) {
    errors.push("fubumvc.excludePaths entries must be either strings or regexes");
    return errors;
  }
  _ref = config.watch, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir;
  ignorePaths = _.map([sourceDir, compiledDir], function(p) {
    return path.basename(p);
  });
  config.fubumvc.excludePaths = excludePaths.concat(ignorePaths);
  config.fubumvc.sourceDir = sourceDir;
  config.fubumvc.compiledDir = compiledDir;
  config.fubumvc.extensions = ((_ref1 = config.extensions) != null ? _ref1.copy : void 0) || [];
  config.fubumvc.isBuild = config.isBuild;
  return errors;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXEhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYzpcXEhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXHNyY1xcY29uZmlnLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxJQUFBLE9BQUE7O0FBQUEsQ0FFQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBRkosQ0FBQTs7QUFBQSxJQUdBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FIUCxDQUFBOztBQUFBLE9BS08sQ0FBQyxRQUFSLEdBQW1CLFNBQUEsR0FBQTtTQUNqQjtBQUFBLElBQUEsT0FBQSxFQUNFO0FBQUEsTUFBQSxZQUFBLEVBQWMsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsQ0FBZDtBQUFBLE1BQ0EsV0FBQSxFQUFhLEVBRGI7S0FERjtJQURpQjtBQUFBLENBTG5CLENBQUE7O0FBQUEsT0FVTyxDQUFDLFdBQVIsR0FBc0IsU0FBQSxHQUFBO1NBQ3BCLDBRQURvQjtBQUFBLENBVnRCLENBQUE7O0FBQUEsT0F3Qk8sQ0FBQyxRQUFSLEdBQW1CLFNBQUMsTUFBRCxFQUFTLFVBQVQsR0FBQTtBQUNqQixNQUFBLDJGQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQUEsRUFDQyxVQUFXLE9BQVgsT0FERCxDQUFBO0FBRUEsRUFBQSxJQUFBLENBQUEsQ0FBTyxpQkFBQSxJQUFhLENBQUMsQ0FBQyxRQUFGLENBQVcsT0FBWCxDQUFwQixDQUFBO0FBQ0UsSUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZLGdCQUFaLENBQUEsQ0FBQTtBQUNBLFdBQU8sTUFBUCxDQUZGO0dBRkE7QUFBQSxFQU1DLGVBQWdCLFFBQWhCLFlBTkQsQ0FBQTtBQU9BLEVBQUEsSUFBQSxDQUFBLENBQU8sc0JBQUEsSUFBa0IsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxZQUFWLENBQXpCLENBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksc0JBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FQQTtBQUFBLEVBV0EsVUFBQSxHQUFhLENBQUMsQ0FBQyxHQUFGLENBQU0sWUFBTixFQUFvQixTQUFDLElBQUQsR0FBQTtXQUMvQixDQUFDLENBQUMsUUFBRixDQUFXLElBQVgsQ0FBQSxJQUFvQixDQUFDLENBQUMsUUFBRixDQUFXLElBQVgsRUFEVztFQUFBLENBQXBCLENBWGIsQ0FBQTtBQWNBLEVBQUEsSUFBQSxDQUFBLFVBQUE7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksZ0VBQVosQ0FBQSxDQUFBO0FBQ0EsV0FBTyxNQUFQLENBRkY7R0FkQTtBQUFBLFNBcUJvQyxPQUFuQyxPQUFRLGlCQUFBLFdBQVcsbUJBQUEsV0FyQnBCLENBQUE7QUFBQSxFQXNCQSxXQUFBLEdBQWMsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLFNBQUQsRUFBWSxXQUFaLENBQU4sRUFBZ0MsU0FBQyxDQUFELEdBQUE7V0FBTyxJQUFJLENBQUMsUUFBTCxDQUFjLENBQWQsRUFBUDtFQUFBLENBQWhDLENBdEJkLENBQUE7QUFBQSxFQXdCQSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQWYsR0FBOEIsWUFBWSxDQUFDLE1BQWIsQ0FBb0IsV0FBcEIsQ0F4QjlCLENBQUE7QUFBQSxFQXlCQSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWYsR0FBMkIsU0F6QjNCLENBQUE7QUFBQSxFQTBCQSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQWYsR0FBNkIsV0ExQjdCLENBQUE7QUFBQSxFQTJCQSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQWYsK0NBQTZDLENBQUUsY0FBbkIsSUFBMkIsRUEzQnZELENBQUE7QUFBQSxFQTRCQSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWYsR0FBeUIsTUFBTSxDQUFDLE9BNUJoQyxDQUFBO1NBOEJBLE9BL0JpQjtBQUFBLENBeEJuQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxuXyA9IHJlcXVpcmUgXCJsb2Rhc2hcIlxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXG5cbmV4cG9ydHMuZGVmYXVsdHMgPSAtPlxuICBmdWJ1bXZjOlxuICAgIGV4Y2x1ZGVQYXRoczogW1wiYmluXCIsIFwib2JqXCIsIC9eXFwuL11cbiAgICBjb252ZW50aW9uczogW11cblxuZXhwb3J0cy5wbGFjZWhvbGRlciA9IC0+XG4gIFwiXCJcIlxuICBcXHRcblxuICAjIGZ1YnVtdmM6XG4gICAgIyBleGNsdWRlUGF0aHM6IFtcImJpblwiLCBcIm9ialwiLCAvXlxcLi9dXG4gICAgIyBjb252ZW50aW9uczogW1xuICAgICAgIyB7XG4gICAgICAgICMgbWF0Y2g6IChmaWxlLCBleHQpIC0+IHRydWUgI2ZpbGVuYW1lIGFuZCBleHRlbnNpb24sIHJldHVybiB0cnVlL2ZhbHNlLFxuICAgICAgICAjIHRyYW5zZm9ybTogKGZpbGUsIHBhdGgpIC0+IGZpbGUgI2lzIGZpbGVuYW1lLCBwYXRoIGlzIHBhdGggbW9kdWxlXG4gICAgICAgICMgfVxuICAgICMgXVxuICBcIlwiXCJcblxuZXhwb3J0cy52YWxpZGF0ZSA9IChjb25maWcsIHZhbGlkYXRvcnMpIC0+XG4gIGVycm9ycyA9IFtdXG4gIHtmdWJ1bXZjfSA9IGNvbmZpZ1xuICB1bmxlc3MgZnVidW12Yz8gYW5kIF8uaXNPYmplY3QgZnVidW12Y1xuICAgIGVycm9ycy5wdXNoIFwiZnVidW12YyBjb25maWdcIlxuICAgIHJldHVybiBlcnJvcnNcblxuICB7ZXhjbHVkZVBhdGhzfSA9IGZ1YnVtdmNcbiAgdW5sZXNzIGV4Y2x1ZGVQYXRocz8gYW5kIF8uaXNBcnJheSBleGNsdWRlUGF0aHNcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuZXhjbHVkZVBhdGhzXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgYWxsSXRlbXNPayA9IF8uYWxsIGV4Y2x1ZGVQYXRocywgKGl0ZW0pIC0+XG4gICAgXy5pc1N0cmluZyhpdGVtKSBvciBfLmlzUmVnRXhwKGl0ZW0pXG5cbiAgdW5sZXNzIGFsbEl0ZW1zT2tcbiAgICBlcnJvcnMucHVzaCBcImZ1YnVtdmMuZXhjbHVkZVBhdGhzIGVudHJpZXMgbXVzdCBiZSBlaXRoZXIgc3RyaW5ncyBvciByZWdleGVzXCJcbiAgICByZXR1cm4gZXJyb3JzXG5cbiAgI1RPRE86IHZhbGlkYXRpb24gZm9yIGNvbnZlbnRpb25zXG5cbiAgI2F1dG8taW5jbHVkZSB0aGUgc291cmNlRGlyIGFuZCBjb21waWxlZERpciBpbnRvIGV4Y2x1ZGVQYXRocyBsaXN0XG4gIHt3YXRjaDoge3NvdXJjZURpciwgY29tcGlsZWREaXJ9fSA9IGNvbmZpZ1xuICBpZ25vcmVQYXRocyA9IF8ubWFwIFtzb3VyY2VEaXIsIGNvbXBpbGVkRGlyXSwgKHApIC0+IHBhdGguYmFzZW5hbWUgcFxuXG4gIGNvbmZpZy5mdWJ1bXZjLmV4Y2x1ZGVQYXRocyA9IGV4Y2x1ZGVQYXRocy5jb25jYXQgaWdub3JlUGF0aHNcbiAgY29uZmlnLmZ1YnVtdmMuc291cmNlRGlyID0gc291cmNlRGlyXG4gIGNvbmZpZy5mdWJ1bXZjLmNvbXBpbGVkRGlyID0gY29tcGlsZWREaXJcbiAgY29uZmlnLmZ1YnVtdmMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zPy5jb3B5IHx8IFtdXG4gIGNvbmZpZy5mdWJ1bXZjLmlzQnVpbGQgPSBjb25maWcuaXNCdWlsZFxuXG4gIGVycm9yc1xuIl19
