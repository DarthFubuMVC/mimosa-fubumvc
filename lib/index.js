"use strict";
var config, fs, logger, path, registerCommand, registration, watch, wrench, _, _minifyJS;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

config = require('./config');

registration = function(mimosaConfig, register) {
  var e;
  if (mimosaConfig.isMinify) {
    logger = mimosaConfig.log;
    e = mimosaConfig.extensions;
    register(['add', 'update', 'buildFile'], 'afterCompile', _minifyJS, e.javascript);
    return register(['add', 'update', 'buildExtension'], 'beforeWrite', _minifyJS, e.template);
  }
};

_minifyJS = function(mimosaConfig, options, next) {
  return next();
};

registerCommand = function(program, retrieveConfig) {
  return program.command('foo').description("Do something fooey").action(function() {
    return retrieveConfig(false, config(function() {}));
  });
};

module.exports = {
  registration: registration,
  registerCommand: registerCommand,
  defaults: config.defaults,
  placeholder: config.placeholder,
  validate: config.validate
};

//# sourceMappingURL=data:application/json;base64,
