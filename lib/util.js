"use strict";
var log, logger, path, relativeToThisFile, rewire, rewireWithReset, _,
  __slice = [].slice;

logger = require('logmimosa');

path = require('path');

rewire = require('rewire');

_ = require('lodash');

log = function(level, statement) {
  return logger[level]("fubumvc: " + statement);
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

rewireWithReset = function(path) {
  var result;
  result = rewire(path);
  result.__tempSet__ = function() {
    var args, snapShot, varName, varValue;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    varName = args[0];
    varValue = args[1];
    if (_.isObject(varName) && args.length === 1) {
      snapShot = _(varName).map(function(v, k) {
        return [k, result.__get__(k)];
      }).reduce(function(acc, _arg) {
        var key, value;
        key = _arg[0], value = _arg[1];
        acc[key] = value;
        return acc;
      }, {});
    } else if (_.isString(varName) && args.length === 2) {
      snapShot = {};
      snapShot[varName] = varValue;
    }
    result.__set__.apply(result, args);
    return function() {
      return result.__set__(snapShot);
    };
  };
  return result;
};

module.exports = {
  log: log,
  relativeToThisFile: relativeToThisFile,
  rewireWithReset: rewireWithReset
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcdXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImM6XFxob21lXFxnaXRodWJcXG1pbW9zYS1mdWJ1bXZjXFxzcmNcXHV0aWwuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTtBQUFBLElBQUEsaUVBQUE7RUFBQSxrQkFBQTs7QUFBQSxNQUNBLEdBQVMsT0FBQSxDQUFRLFdBQVIsQ0FEVCxDQUFBOztBQUFBLElBRUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUZQLENBQUE7O0FBQUEsTUFHQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBSFQsQ0FBQTs7QUFBQSxDQUlBLEdBQUksT0FBQSxDQUFRLFFBQVIsQ0FKSixDQUFBOztBQUFBLEdBTUEsR0FBTSxTQUFDLEtBQUQsRUFBUSxTQUFSLEdBQUE7U0FDSixNQUFPLENBQUEsS0FBQSxDQUFQLENBQWUsV0FBQSxHQUFVLFNBQXpCLEVBREk7QUFBQSxDQU5OLENBQUE7O0FBQUEsa0JBU0EsR0FBcUIsU0FBQyxRQUFELEVBQVcsT0FBWCxHQUFBOztJQUNuQixVQUFXO0dBQVg7U0FDQSxJQUFJLENBQUMsSUFBTCxDQUFVLE9BQVYsRUFBbUIsUUFBbkIsRUFGbUI7QUFBQSxDQVRyQixDQUFBOztBQUFBLGVBYUEsR0FBa0IsU0FBQyxJQUFELEdBQUE7QUFDaEIsTUFBQSxNQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsTUFBQSxDQUFPLElBQVAsQ0FBVCxDQUFBO0FBQUEsRUFDQSxNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBLEdBQUE7QUFDbkIsUUFBQSxpQ0FBQTtBQUFBLElBRG9CLDhEQUNwQixDQUFBO0FBQUEsSUFBQSxPQUFBLEdBQVUsSUFBSyxDQUFBLENBQUEsQ0FBZixDQUFBO0FBQUEsSUFDQSxRQUFBLEdBQVcsSUFBSyxDQUFBLENBQUEsQ0FEaEIsQ0FBQTtBQUdBLElBQUEsSUFBRyxDQUFDLENBQUMsUUFBRixDQUFXLE9BQVgsQ0FBQSxJQUF3QixJQUFJLENBQUMsTUFBTCxLQUFlLENBQTFDO0FBQ0UsTUFBQSxRQUFBLEdBQVcsQ0FBQSxDQUFFLE9BQUYsQ0FDVCxDQUFDLEdBRFEsQ0FDSixTQUFDLENBQUQsRUFBRyxDQUFILEdBQUE7ZUFBUyxDQUFDLENBQUQsRUFBSSxNQUFNLENBQUMsT0FBUCxDQUFlLENBQWYsQ0FBSixFQUFUO01BQUEsQ0FESSxDQUVULENBQUMsTUFGUSxDQUVELFNBQUMsR0FBRCxFQUFNLElBQU4sR0FBQTtBQUNOLFlBQUEsVUFBQTtBQUFBLFFBRGEsZUFBSyxlQUNsQixDQUFBO0FBQUEsUUFBQSxHQUFJLENBQUEsR0FBQSxDQUFKLEdBQVcsS0FBWCxDQUFBO2VBQ0EsSUFGTTtNQUFBLENBRkMsRUFLUCxFQUxPLENBQVgsQ0FERjtLQUFBLE1BT0ssSUFBRyxDQUFDLENBQUMsUUFBRixDQUFXLE9BQVgsQ0FBQSxJQUF3QixJQUFJLENBQUMsTUFBTCxLQUFlLENBQTFDO0FBQ0gsTUFBQSxRQUFBLEdBQVcsRUFBWCxDQUFBO0FBQUEsTUFDQSxRQUFTLENBQUEsT0FBQSxDQUFULEdBQW9CLFFBRHBCLENBREc7S0FWTDtBQUFBLElBY0EsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQTZCLElBQTdCLENBZEEsQ0FBQTtBQWVBLFdBQU8sU0FBQSxHQUFBO2FBQU0sTUFBTSxDQUFDLE9BQVAsQ0FBZSxRQUFmLEVBQU47SUFBQSxDQUFQLENBaEJtQjtFQUFBLENBRHJCLENBQUE7U0FtQkEsT0FwQmdCO0FBQUEsQ0FibEIsQ0FBQTs7QUFBQSxNQW1DTSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxFQUFDLEtBQUEsR0FBRDtBQUFBLEVBQU0sb0JBQUEsa0JBQU47QUFBQSxFQUEwQixpQkFBQSxlQUExQjtDQW5DakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXHJcbmxvZ2dlciA9IHJlcXVpcmUgJ2xvZ21pbW9zYSdcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbnJld2lyZSA9IHJlcXVpcmUgJ3Jld2lyZSdcclxuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcclxuXHJcbmxvZyA9IChsZXZlbCwgc3RhdGVtZW50KSAtPlxyXG4gIGxvZ2dlcltsZXZlbF0gXCJmdWJ1bXZjOiAje3N0YXRlbWVudH1cIlxyXG5cclxucmVsYXRpdmVUb1RoaXNGaWxlID0gKGZpbGVQYXRoLCBkaXJuYW1lKSAtPlxyXG4gIGRpcm5hbWUgPz0gX19kaXJuYW1lXHJcbiAgcGF0aC5qb2luIGRpcm5hbWUsIGZpbGVQYXRoXHJcblxyXG5yZXdpcmVXaXRoUmVzZXQgPSAocGF0aCkgLT5cclxuICByZXN1bHQgPSByZXdpcmUgcGF0aFxyXG4gIHJlc3VsdC5fX3RlbXBTZXRfXyA9IChhcmdzLi4uKSAtPlxyXG4gICAgdmFyTmFtZSA9IGFyZ3NbMF1cclxuICAgIHZhclZhbHVlID0gYXJnc1sxXVxyXG5cclxuICAgIGlmIF8uaXNPYmplY3QodmFyTmFtZSkgYW5kIGFyZ3MubGVuZ3RoIGlzIDFcclxuICAgICAgc25hcFNob3QgPSBfKHZhck5hbWUpXHJcbiAgICAgICAgLm1hcCAodixrKSAtPiBbaywgcmVzdWx0Ll9fZ2V0X18ga11cclxuICAgICAgICAucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgLT5cclxuICAgICAgICAgIGFjY1trZXldID0gdmFsdWVcclxuICAgICAgICAgIGFjY1xyXG4gICAgICAgICwge30pXHJcbiAgICBlbHNlIGlmIF8uaXNTdHJpbmcodmFyTmFtZSkgYW5kIGFyZ3MubGVuZ3RoIGlzIDJcclxuICAgICAgc25hcFNob3QgPSB7fVxyXG4gICAgICBzbmFwU2hvdFt2YXJOYW1lXSA9IHZhclZhbHVlXHJcblxyXG4gICAgcmVzdWx0Ll9fc2V0X18uYXBwbHkocmVzdWx0LCBhcmdzKVxyXG4gICAgcmV0dXJuICgpIC0+IHJlc3VsdC5fX3NldF9fIHNuYXBTaG90XHJcblxyXG4gIHJlc3VsdFxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7bG9nLCByZWxhdGl2ZVRvVGhpc0ZpbGUsIHJld2lyZVdpdGhSZXNldH1cclxuIl19
