"use strict";
var Bliss, bliss, cleanAssets, copyContents, fs, importAssets, initFiles, logger, makeOptions, path, registerCommand, relativeToThisFile, watch, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

importAssets = function(mimosaConfig, options, next) {
  return next();
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

makeOptions = function() {
  var options;
  return options = {
    name: path.basename(__dirname)
  };
};

initFiles = function(useCoffee) {
  var contents, ext, fileWithContents, files, options, pair, _i, _len, _results;
  if (useCoffee == null) {
    useCoffee = false;
  }
  options = makeOptions();
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  contents = _.chain(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, options);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _results = [];
  for (_i = 0, _len = fileWithContents.length; _i < _len; _i++) {
    pair = fileWithContents[_i];
    _results.push(copyContents(pair));
  }
  return _results;
};

copyContents = function(pair) {
  var contents, fileName;
  fileName = pair[0], contents = pair[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

registerCommand = function(program, retrieveConfig) {
  return program.command('fubu:init').description("creates simple mimosa.config and bower.json for you, execute from within your mvcapp directory").action(function(opts) {
    return initFiles();
  });
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  registerCommand: registerCommand
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVcXGxpYlxcZnVidS1pbXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcaG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidVxcc3JjXFxmdWJ1LWltcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxzSkFBQTs7QUFBQSxFQUVBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsS0FJQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBSlIsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FMVCxDQUFBOztBQUFBLE1BTUEsR0FBUyxPQUFBLENBQVEsV0FBUixDQU5ULENBQUE7O0FBQUEsQ0FPQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBUEosQ0FBQTs7QUFBQSxLQVFBLEdBQVEsT0FBQSxDQUFRLE9BQVIsQ0FSUixDQUFBOztBQUFBLEtBU0EsR0FBWSxJQUFBLEtBQUEsQ0FDVjtBQUFBLEVBQUEsR0FBQSxFQUFLLFFBQUw7QUFBQSxFQUNBLFlBQUEsRUFBYyxLQURkO0FBQUEsRUFFQSxPQUFBLEVBQVMsRUFGVDtDQURVLENBVFosQ0FBQTs7QUFBQSxZQWNBLEdBQWUsU0FBQyxZQUFELEVBQWUsT0FBZixFQUF3QixJQUF4QixHQUFBO1NBQ2IsSUFBQSxDQUFBLEVBRGE7QUFBQSxDQWRmLENBQUE7O0FBQUEsV0FpQkEsR0FBYyxTQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLElBQXhCLEdBQUE7U0FDWixJQUFBLENBQUEsRUFEWTtBQUFBLENBakJkLENBQUE7O0FBQUEsa0JBb0JBLEdBQXFCLFNBQUMsUUFBRCxFQUFXLE9BQVgsR0FBQTs7SUFDbkIsVUFBVztHQUFYO1NBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxPQUFWLEVBQW1CLFFBQW5CLEVBRm1CO0FBQUEsQ0FwQnJCLENBQUE7O0FBQUEsV0F3QkEsR0FBYyxTQUFBLEdBQUE7QUFDWixNQUFBLE9BQUE7U0FBQSxPQUFBLEdBQ0U7QUFBQSxJQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsUUFBTCxDQUFjLFNBQWQsQ0FBTjtJQUZVO0FBQUEsQ0F4QmQsQ0FBQTs7QUFBQSxTQTRCQSxHQUFZLFNBQUMsU0FBRCxHQUFBO0FBQ1YsTUFBQSx5RUFBQTs7SUFEVyxZQUFZO0dBQ3ZCO0FBQUEsRUFBQSxPQUFBLEdBQVUsV0FBQSxDQUFBLENBQVYsQ0FBQTtBQUFBLEVBQ0EsR0FBQSxHQUFTLFNBQUgsR0FBa0IsUUFBbEIsR0FBZ0MsSUFEdEMsQ0FBQTtBQUFBLEVBRUEsS0FBQSxHQUFRLENBQUMsWUFBRCxFQUFnQixnQkFBQSxHQUFlLEdBQS9CLENBRlIsQ0FBQTtBQUFBLEVBR0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxLQUFGLENBQVEsS0FBUixDQUNULENBQUMsR0FEUSxDQUNKLFNBQUMsQ0FBRCxHQUFBO1dBQU8sa0JBQUEsQ0FBb0IsMkJBQUEsR0FBMEIsQ0FBOUMsRUFBUDtFQUFBLENBREksQ0FFVCxDQUFDLEdBRlEsQ0FFSixTQUFDLENBQUQsR0FBQTtXQUFPLEtBQUssQ0FBQyxNQUFOLENBQWEsQ0FBYixFQUFnQixPQUFoQixFQUFQO0VBQUEsQ0FGSSxDQUdULENBQUMsR0FIUSxDQUdKLFNBQUMsQ0FBRCxHQUFBO1dBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBQSxFQUFQO0VBQUEsQ0FISSxDQUlULENBQUMsS0FKUSxDQUFBLENBSFgsQ0FBQTtBQUFBLEVBUUEsZ0JBQUEsR0FBbUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxLQUFOLEVBQWEsUUFBYixDQVJuQixDQUFBO0FBVUE7T0FBQSx1REFBQTtnQ0FBQTtBQUFBLGtCQUFBLFlBQUEsQ0FBYSxJQUFiLEVBQUEsQ0FBQTtBQUFBO2tCQVhVO0FBQUEsQ0E1QlosQ0FBQTs7QUFBQSxZQXlDQSxHQUFlLFNBQUMsSUFBRCxHQUFBO0FBQ2IsTUFBQSxrQkFBQTtBQUFBLEVBQUMsa0JBQUQsRUFBVyxrQkFBWCxDQUFBO0FBQ0EsRUFBQSxJQUFBLENBQUEsRUFBUyxDQUFDLFVBQUgsQ0FBYyxRQUFkLENBQVA7QUFDRSxJQUFBLE1BQU0sQ0FBQyxJQUFQLENBQWEsV0FBQSxHQUFVLFFBQXZCLENBQUEsQ0FBQTtXQUNBLEVBQUUsQ0FBQyxhQUFILENBQWlCLFFBQWpCLEVBQTJCLFFBQTNCLEVBRkY7R0FGYTtBQUFBLENBekNmLENBQUE7O0FBQUEsZUErQ0EsR0FBa0IsU0FBQyxPQUFELEVBQVUsY0FBVixHQUFBO1NBQ2hCLE9BQ0UsQ0FBQyxPQURILENBQ1csV0FEWCxDQUVFLENBQUMsV0FGSCxDQUVlLGdHQUZmLENBR0UsQ0FBQyxNQUhILENBR1UsU0FBQyxJQUFELEdBQUE7V0FFTixTQUFBLENBQUEsRUFGTTtFQUFBLENBSFYsRUFEZ0I7QUFBQSxDQS9DbEIsQ0FBQTs7QUFBQSxNQXVETSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxFQUFDLGNBQUEsWUFBRDtBQUFBLEVBQWUsYUFBQSxXQUFmO0FBQUEsRUFBNEIsaUJBQUEsZUFBNUI7Q0F2RGpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxyXG5cclxuZnMgPSByZXF1aXJlICdmcydcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbndhdGNoID0gcmVxdWlyZSAnY2hva2lkYXInXHJcbndyZW5jaCA9IHJlcXVpcmUgJ3dyZW5jaCdcclxubG9nZ2VyID0gcmVxdWlyZSAnbG9nbWltb3NhJ1xyXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xyXG5CbGlzcyA9IHJlcXVpcmUgJ2JsaXNzJ1xyXG5ibGlzcyA9IG5ldyBCbGlzc1xyXG4gIGV4dDogXCIuYmxpc3NcIlxyXG4gIGNhY2hlRW5hYmxlZDogZmFsc2UsXHJcbiAgY29udGV4dDoge31cclxuXHJcbmltcG9ydEFzc2V0cyA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XHJcbiAgbmV4dCgpXHJcblxyXG5jbGVhbkFzc2V0cyA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XHJcbiAgbmV4dCgpXHJcblxyXG5yZWxhdGl2ZVRvVGhpc0ZpbGUgPSAoZmlsZVBhdGgsIGRpcm5hbWUpIC0+XHJcbiAgZGlybmFtZSA/PSBfX2Rpcm5hbWVcclxuICBwYXRoLmpvaW4gZGlybmFtZSwgZmlsZVBhdGhcclxuXHJcbm1ha2VPcHRpb25zID0gLT5cclxuICBvcHRpb25zID1cclxuICAgIG5hbWU6IHBhdGguYmFzZW5hbWUgX19kaXJuYW1lXHJcblxyXG5pbml0RmlsZXMgPSAodXNlQ29mZmVlID0gZmFsc2UpIC0+XHJcbiAgb3B0aW9ucyA9IG1ha2VPcHRpb25zKClcclxuICBleHQgPSBpZiB1c2VDb2ZmZWUgdGhlbiBcImNvZmZlZVwiIGVsc2UgXCJqc1wiXHJcbiAgZmlsZXMgPSBbXCJib3dlci5qc29uXCIsIFwibWltb3NhLWNvbmZpZy4je2V4dH1cIl1cclxuICBjb250ZW50cyA9IF8uY2hhaW4gZmlsZXNcclxuICAgIC5tYXAgKGYpIC0+IHJlbGF0aXZlVG9UaGlzRmlsZSBcIi4uL2Z1YnUtaW1wb3J0LXRlbXBsYXRlcy8je2Z9XCJcclxuICAgIC5tYXAgKGYpIC0+IGJsaXNzLnJlbmRlciBmLCBvcHRpb25zXHJcbiAgICAubWFwIChmKSAtPiBmLnRyaW0oKVxyXG4gICAgLnZhbHVlKClcclxuICBmaWxlV2l0aENvbnRlbnRzID0gXy56aXAoZmlsZXMsIGNvbnRlbnRzKVxyXG5cclxuICBjb3B5Q29udGVudHMgcGFpciBmb3IgcGFpciBpbiBmaWxlV2l0aENvbnRlbnRzXHJcblxyXG5jb3B5Q29udGVudHMgPSAocGFpcikgLT5cclxuICBbZmlsZU5hbWUsIGNvbnRlbnRzXSA9IHBhaXJcclxuICB1bmxlc3MgZnMuZXhpc3RzU3luYyBmaWxlTmFtZVxyXG4gICAgbG9nZ2VyLmluZm8gXCJjcmVhdGluZyAje2ZpbGVOYW1lfVwiXHJcbiAgICBmcy53cml0ZUZpbGVTeW5jIGZpbGVOYW1lLCBjb250ZW50c1xyXG5cclxucmVnaXN0ZXJDb21tYW5kID0gKHByb2dyYW0sIHJldHJpZXZlQ29uZmlnKSAtPlxyXG4gIHByb2dyYW1cclxuICAgIC5jb21tYW5kKCdmdWJ1OmluaXQnKVxyXG4gICAgLmRlc2NyaXB0aW9uKFwiY3JlYXRlcyBzaW1wbGUgbWltb3NhLmNvbmZpZyBhbmQgYm93ZXIuanNvbiBmb3IgeW91LCBleGVjdXRlIGZyb20gd2l0aGluIHlvdXIgbXZjYXBwIGRpcmVjdG9yeVwiKVxyXG4gICAgLmFjdGlvbiAob3B0cyktPlxyXG4gICAgICAjdG9kbzpcclxuICAgICAgaW5pdEZpbGVzKClcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2ltcG9ydEFzc2V0cywgY2xlYW5Bc3NldHMsIHJlZ2lzdGVyQ29tbWFuZH1cclxuIl19
