"use strict";
var Bliss, Rx, bliss, cleanAssets, copyContents, cwd, excludeStrategies, findSourceFiles, fs, importAssets, initFiles, isExcludedByConfig, logger, makeFolders, mkdirp, parseString, parseXml, path, prepareFileWatcher, relativeToThisFile, setupFileSystem, shouldInclude, startCopying, watch, withoutFromPath, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

mkdirp = require('mkdirp');

parseString = require('xml2js').parseString;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

Rx = require("rx");

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, isBuild;
  extensions = mimosaConfig.extensions.copy;
  excludes = mimosaConfig.fubumvc.excludePaths;
  isBuild = mimosaConfig.isBuild;
  return startCopying(cwd, extensions, excludes, isBuild, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isIncluded = shouldInclude(f, extensions, excludes);
    isFile = fs.statSync(f).isFile();
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, extensions, excludes) {
  var atRoot, excluded, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  atRoot = f.indexOf(path.sep) === -1;
  matchesExtension = _.contains(extensions, path.extname(f));
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = function(input) {
    return withoutFromPath(input, from);
  };
  watchSettings = {
    ignored: function(file) {
      var f, isDirectory;
      isDirectory = fs.statSync(file).isDirectory();
      if (isDirectory) {
        return false;
      } else {
        f = fixPath(file);
        return !(shouldInclude(f, extensions, excludes));
      }
    },
    pesistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable.Throw(e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

withoutFromPath = function(input, fromPath) {
  return input.replace("" + fromPath + path.sep, '');
};

startCopying = function(from, extensions, excludes, isBuild, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, numberOfFiles, unlinks, _ref;
  logger.debug("starting copy from: " + from);
  logger.debug("extensions: " + extensions);
  logger.debug("excludes: " + excludes);
  _ref = prepareFileWatcher(from, extensions, excludes, isBuild), numberOfFiles = _ref.numberOfFiles, adds = _ref.adds, changes = _ref.changes, unlinks = _ref.unlinks, errors = _ref.errors;
  fixPath = function(input) {
    return withoutFromPath(input, from);
  };
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  deletes = fromSource(unlinks);
  return initialCopy.subscribe(function(f) {
    return logger.debug("intial copy: " + f);
  }, function(e) {
    logger.error("error with initial copy: " + e.message);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return logger.debug("copy: " + f);
    }, function(e) {
      return logger.debug("error: " + e);
    });
    if (cb) {
      return cb();
    }
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    logger.info("making sure " + dir + " exists");
    return mkdirp.sync(dir, function(err) {
      return logger.error(err);
    });
  });
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,
