"use strict";
var Rx, cleanAssets, color, cwd, excludeStrategies, findSourceFiles, fs, importAssets, isExcludedByConfig, log, logger, parseString, parseXml, path, prepareFileWatcher, shouldInclude, startCopying, watch, withoutFromPath, wrench, _;

log = require('./util').log;

color = require('ansi-color').set;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

parseString = require('xml2js').parseString;

cwd = process.cwd();

Rx = require("rx");

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isFile = fs.statSync(f).isFile();
    isIncluded = shouldInclude(f, isFile, extensions, excludes);
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, isFile, extensions, excludes) {
  var atRoot, excluded, ext, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  ext = path.extname(f);
  matchesExtension = !isFile || _.contains(extensions, ext);
  atRoot = isFile && f.indexOf(path.sep) === -1;
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

withoutFromPath = function(fromPath) {
  return function(input) {
    return input.replace("" + fromPath + path.sep, '');
  };
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = withoutFromPath(from);
  watchSettings = {
    ignored: function(file) {
      var f, isFile;
      isFile = fs.statSync(file).isFile();
      f = fixPath(file);
      return !(shouldInclude(f, isFile, extensions, excludes));
    },
    pesistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable.Throw(e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

startCopying = function(from, extensions, excludes, isBuild, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, logError, logSuccess, numberOfFiles, unlinks, _ref;
  log("debug", "starting copy from [[ " + from + " ]]");
  log("debug", "allowed extensions [[ " + extensions + " ]]");
  log("debug", "excludes [[ " + excludes + " ]]");
  _ref = prepareFileWatcher(from, extensions, excludes, isBuild), numberOfFiles = _ref.numberOfFiles, adds = _ref.adds, changes = _ref.changes, unlinks = _ref.unlinks, errors = _ref.errors;
  fixPath = withoutFromPath(from);
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  logSuccess = function(f) {
    return log("success", "" + (color("copy", "green")) + " [[ " + f + " ]]");
  };
  logError = function(e) {
    return log("error", "error copying [[ " + e + " ]]");
  };
  initialCopy.subscribe(function(f) {
    return logSuccess(f);
  }, function(e) {
    logError(e);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return logSuccess(f);
    }, function(e) {
      return logError(e);
    });
    if (cb) {
      return cb();
    }
  });
  deletes = fromSource(unlinks);
  return deletes.subscribe(function(f) {
    return log("success", "" + (color("deleting", "red")) + " [[ " + f + " ]]");
  }, function(e) {
    return log("error", "error deleting [[ " + e + " ]]");
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, isBuild;
  extensions = mimosaConfig.extensions.copy;
  excludes = mimosaConfig.fubumvc.excludePaths;
  isBuild = mimosaConfig.isBuild;
  return startCopying(cwd, extensions, excludes, isBuild, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets
};

//# sourceMappingURL=data:application/json;base64,
