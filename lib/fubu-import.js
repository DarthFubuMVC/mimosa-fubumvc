"use strict";
var Bliss, bliss, cleanAssets, copyContents, fs, importAssets, initFiles, logger, makeOptions, path, registerCommand, relativeToThisFile, watch, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

importAssets = function(mimosaConfig, options, next) {
  return next();
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

makeOptions = function() {
  var options;
  return options = {
    name: path.basename(__dirname)
  };
};

initFiles = function(useCoffee) {
  var contents, ext, fileWithContents, files, options, pair, _i, _len, _results;
  if (useCoffee == null) {
    useCoffee = false;
  }
  options = makeOptions();
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  contents = _.chain(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, options);
  }).map(function(f) {
    return f.trim();
  }).value();
  logger.info(options.name);
  fileWithContents = _.zip(files, contents);
  _results = [];
  for (_i = 0, _len = fileWithContents.length; _i < _len; _i++) {
    pair = fileWithContents[_i];
    _results.push(copyContents(pair));
  }
  return _results;
};

copyContents = function(pair) {
  var contents, fileName;
  fileName = pair[0], contents = pair[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

registerCommand = function(program, retrieveConfig) {
  return program.command('fubu:init').description("creates simple mimosa.config and bower.json for you, execute from within your mvcapp directory").action(function(opts) {
    return initFiles();
  });
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  registerCommand: registerCommand
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVcXGxpYlxcZnVidS1pbXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcaG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidVxcc3JjXFxmdWJ1LWltcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxzSkFBQTs7QUFBQSxFQUVBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsS0FJQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBSlIsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FMVCxDQUFBOztBQUFBLE1BTUEsR0FBUyxPQUFBLENBQVEsV0FBUixDQU5ULENBQUE7O0FBQUEsQ0FPQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBUEosQ0FBQTs7QUFBQSxLQVFBLEdBQVEsT0FBQSxDQUFRLE9BQVIsQ0FSUixDQUFBOztBQUFBLEtBU0EsR0FBWSxJQUFBLEtBQUEsQ0FDVjtBQUFBLEVBQUEsR0FBQSxFQUFLLFFBQUw7QUFBQSxFQUNBLFlBQUEsRUFBYyxLQURkO0FBQUEsRUFFQSxPQUFBLEVBQVMsRUFGVDtDQURVLENBVFosQ0FBQTs7QUFBQSxZQWNBLEdBQWUsU0FBQyxZQUFELEVBQWUsT0FBZixFQUF3QixJQUF4QixHQUFBO1NBQ2IsSUFBQSxDQUFBLEVBRGE7QUFBQSxDQWRmLENBQUE7O0FBQUEsV0FpQkEsR0FBYyxTQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLElBQXhCLEdBQUE7U0FDWixJQUFBLENBQUEsRUFEWTtBQUFBLENBakJkLENBQUE7O0FBQUEsa0JBb0JBLEdBQXFCLFNBQUMsUUFBRCxFQUFXLE9BQVgsR0FBQTs7SUFDbkIsVUFBVztHQUFYO1NBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxPQUFWLEVBQW1CLFFBQW5CLEVBRm1CO0FBQUEsQ0FwQnJCLENBQUE7O0FBQUEsV0F3QkEsR0FBYyxTQUFBLEdBQUE7QUFDWixNQUFBLE9BQUE7U0FBQSxPQUFBLEdBQ0U7QUFBQSxJQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsUUFBTCxDQUFjLFNBQWQsQ0FBTjtJQUZVO0FBQUEsQ0F4QmQsQ0FBQTs7QUFBQSxTQTRCQSxHQUFZLFNBQUMsU0FBRCxHQUFBO0FBQ1YsTUFBQSx5RUFBQTs7SUFEVyxZQUFZO0dBQ3ZCO0FBQUEsRUFBQSxPQUFBLEdBQVUsV0FBQSxDQUFBLENBQVYsQ0FBQTtBQUFBLEVBQ0EsR0FBQSxHQUFTLFNBQUgsR0FBa0IsUUFBbEIsR0FBZ0MsSUFEdEMsQ0FBQTtBQUFBLEVBRUEsS0FBQSxHQUFRLENBQUMsWUFBRCxFQUFnQixnQkFBQSxHQUFlLEdBQS9CLENBRlIsQ0FBQTtBQUFBLEVBR0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxLQUFGLENBQVEsS0FBUixDQUNULENBQUMsR0FEUSxDQUNKLFNBQUMsQ0FBRCxHQUFBO1dBQU8sa0JBQUEsQ0FBb0IsMkJBQUEsR0FBMEIsQ0FBOUMsRUFBUDtFQUFBLENBREksQ0FFVCxDQUFDLEdBRlEsQ0FFSixTQUFDLENBQUQsR0FBQTtXQUFPLEtBQUssQ0FBQyxNQUFOLENBQWEsQ0FBYixFQUFnQixPQUFoQixFQUFQO0VBQUEsQ0FGSSxDQUdULENBQUMsR0FIUSxDQUdKLFNBQUMsQ0FBRCxHQUFBO1dBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBQSxFQUFQO0VBQUEsQ0FISSxDQUlULENBQUMsS0FKUSxDQUFBLENBSFgsQ0FBQTtBQUFBLEVBUUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxPQUFPLENBQUMsSUFBcEIsQ0FSQSxDQUFBO0FBQUEsRUFTQSxnQkFBQSxHQUFtQixDQUFDLENBQUMsR0FBRixDQUFNLEtBQU4sRUFBYSxRQUFiLENBVG5CLENBQUE7QUFXQTtPQUFBLHVEQUFBO2dDQUFBO0FBQUEsa0JBQUEsWUFBQSxDQUFhLElBQWIsRUFBQSxDQUFBO0FBQUE7a0JBWlU7QUFBQSxDQTVCWixDQUFBOztBQUFBLFlBMENBLEdBQWUsU0FBQyxJQUFELEdBQUE7QUFDYixNQUFBLGtCQUFBO0FBQUEsRUFBQyxrQkFBRCxFQUFXLGtCQUFYLENBQUE7QUFDQSxFQUFBLElBQUEsQ0FBQSxFQUFTLENBQUMsVUFBSCxDQUFjLFFBQWQsQ0FBUDtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBYSxXQUFBLEdBQVUsUUFBdkIsQ0FBQSxDQUFBO1dBQ0EsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsUUFBakIsRUFBMkIsUUFBM0IsRUFGRjtHQUZhO0FBQUEsQ0ExQ2YsQ0FBQTs7QUFBQSxlQWdEQSxHQUFrQixTQUFDLE9BQUQsRUFBVSxjQUFWLEdBQUE7U0FDaEIsT0FDRSxDQUFDLE9BREgsQ0FDVyxXQURYLENBRUUsQ0FBQyxXQUZILENBRWUsZ0dBRmYsQ0FHRSxDQUFDLE1BSEgsQ0FHVSxTQUFDLElBQUQsR0FBQTtXQUNOLFNBQUEsQ0FBQSxFQURNO0VBQUEsQ0FIVixFQURnQjtBQUFBLENBaERsQixDQUFBOztBQUFBLE1BdURNLENBQUMsT0FBUCxHQUFpQjtBQUFBLEVBQUMsY0FBQSxZQUFEO0FBQUEsRUFBZSxhQUFBLFdBQWY7QUFBQSxFQUE0QixpQkFBQSxlQUE1QjtDQXZEakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXHJcblxyXG5mcyA9IHJlcXVpcmUgJ2ZzJ1xyXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcclxud2F0Y2ggPSByZXF1aXJlICdjaG9raWRhcidcclxud3JlbmNoID0gcmVxdWlyZSAnd3JlbmNoJ1xyXG5sb2dnZXIgPSByZXF1aXJlICdsb2dtaW1vc2EnXHJcbl8gPSByZXF1aXJlICdsb2Rhc2gnXHJcbkJsaXNzID0gcmVxdWlyZSAnYmxpc3MnXHJcbmJsaXNzID0gbmV3IEJsaXNzXHJcbiAgZXh0OiBcIi5ibGlzc1wiXHJcbiAgY2FjaGVFbmFibGVkOiBmYWxzZSxcclxuICBjb250ZXh0OiB7fVxyXG5cclxuaW1wb3J0QXNzZXRzID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cclxuICBuZXh0KClcclxuXHJcbmNsZWFuQXNzZXRzID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cclxuICBuZXh0KClcclxuXHJcbnJlbGF0aXZlVG9UaGlzRmlsZSA9IChmaWxlUGF0aCwgZGlybmFtZSkgLT5cclxuICBkaXJuYW1lID89IF9fZGlybmFtZVxyXG4gIHBhdGguam9pbiBkaXJuYW1lLCBmaWxlUGF0aFxyXG5cclxubWFrZU9wdGlvbnMgPSAtPlxyXG4gIG9wdGlvbnMgPVxyXG4gICAgbmFtZTogcGF0aC5iYXNlbmFtZSBfX2Rpcm5hbWVcclxuXHJcbmluaXRGaWxlcyA9ICh1c2VDb2ZmZWUgPSBmYWxzZSkgLT5cclxuICBvcHRpb25zID0gbWFrZU9wdGlvbnMoKVxyXG4gIGV4dCA9IGlmIHVzZUNvZmZlZSB0aGVuIFwiY29mZmVlXCIgZWxzZSBcImpzXCJcclxuICBmaWxlcyA9IFtcImJvd2VyLmpzb25cIiwgXCJtaW1vc2EtY29uZmlnLiN7ZXh0fVwiXVxyXG4gIGNvbnRlbnRzID0gXy5jaGFpbiBmaWxlc1xyXG4gICAgLm1hcCAoZikgLT4gcmVsYXRpdmVUb1RoaXNGaWxlIFwiLi4vZnVidS1pbXBvcnQtdGVtcGxhdGVzLyN7Zn1cIlxyXG4gICAgLm1hcCAoZikgLT4gYmxpc3MucmVuZGVyIGYsIG9wdGlvbnNcclxuICAgIC5tYXAgKGYpIC0+IGYudHJpbSgpXHJcbiAgICAudmFsdWUoKVxyXG4gIGxvZ2dlci5pbmZvIG9wdGlvbnMubmFtZVxyXG4gIGZpbGVXaXRoQ29udGVudHMgPSBfLnppcChmaWxlcywgY29udGVudHMpXHJcblxyXG4gIGNvcHlDb250ZW50cyBwYWlyIGZvciBwYWlyIGluIGZpbGVXaXRoQ29udGVudHNcclxuXHJcbmNvcHlDb250ZW50cyA9IChwYWlyKSAtPlxyXG4gIFtmaWxlTmFtZSwgY29udGVudHNdID0gcGFpclxyXG4gIHVubGVzcyBmcy5leGlzdHNTeW5jIGZpbGVOYW1lXHJcbiAgICBsb2dnZXIuaW5mbyBcImNyZWF0aW5nICN7ZmlsZU5hbWV9XCJcclxuICAgIGZzLndyaXRlRmlsZVN5bmMgZmlsZU5hbWUsIGNvbnRlbnRzXHJcblxyXG5yZWdpc3RlckNvbW1hbmQgPSAocHJvZ3JhbSwgcmV0cmlldmVDb25maWcpIC0+XHJcbiAgcHJvZ3JhbVxyXG4gICAgLmNvbW1hbmQoJ2Z1YnU6aW5pdCcpXHJcbiAgICAuZGVzY3JpcHRpb24oXCJjcmVhdGVzIHNpbXBsZSBtaW1vc2EuY29uZmlnIGFuZCBib3dlci5qc29uIGZvciB5b3UsIGV4ZWN1dGUgZnJvbSB3aXRoaW4geW91ciBtdmNhcHAgZGlyZWN0b3J5XCIpXHJcbiAgICAuYWN0aW9uIChvcHRzKS0+XHJcbiAgICAgIGluaXRGaWxlcygpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtpbXBvcnRBc3NldHMsIGNsZWFuQXNzZXRzLCByZWdpc3RlckNvbW1hbmR9XHJcbiJdfQ==
