"use strict";
var Rx, cleanAssets, color, copyFile, cwd, deleteFile, excludeStrategies, findSourceFiles, fs, importAssets, isExcludedByConfig, log, parseString, parseXml, path, prepareFileWatcher, shouldInclude, startWatching, watch, withoutFromPath, wrench, _;

log = require('./util').log;

color = require('ansi-color').set;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

_ = require('lodash');

parseString = require('xml2js').parseString;

cwd = process.cwd();

Rx = require("rx");

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isFile = fs.statSync(f).isFile();
    isIncluded = shouldInclude(f, isFile, extensions, excludes);
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, isFile, extensions, excludes) {
  var atRoot, excluded, ext, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  ext = path.extname(f);
  matchesExtension = !isFile || _.contains(extensions, ext);
  atRoot = isFile && f.indexOf(path.sep) === -1;
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

withoutFromPath = function(fromPath) {
  return function(input) {
    return input.replace("" + fromPath + path.sep, '');
  };
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = withoutFromPath(from);
  watchSettings = {
    ignored: function(file) {
      var f, isFile;
      isFile = fs.statSync(file).isFile();
      f = fixPath(file);
      return !(shouldInclude(f, isFile, extensions, excludes));
    },
    persistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable["throw"](e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

startWatching = function(from, _arg, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, numberOfFiles, unlinks;
  numberOfFiles = _arg.numberOfFiles, adds = _arg.adds, changes = _arg.changes, unlinks = _arg.unlinks, errors = _arg.errors;
  fixPath = withoutFromPath(from);
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  initialCopy.subscribe(function(f) {
    return copyFile(f);
  }, function(e) {
    log("warn", "File watching error: " + e);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return copyFile(f);
    }, function(e) {
      return log("warn", "File watching error: " + e);
    });
    if (cb) {
      return cb();
    }
  });
  deletes = fromSource(unlinks);
  return deletes.subscribe(function(f) {
    return deleteFile(f);
  }, function(e) {
    return log("warn", "File watching errors: " + e);
  });
};

copyFile = function(file) {
  return fs.readFile(file, function(err, data) {
    var dirname, outFile;
    if (err) {
      log("error", "Error reading file [[ " + file + " ]], " + err);
      return;
    }
    outFile = file;
    dirname = path.dirname(outFile);
    if (!fs.existsSync(dirname)) {
      wrench.mkdirSyncRecursive(dirname, 0x1ff);
    }
    return fs.writeFile(outFile, data, function(err) {
      if (err) {
        return log("error", "Error reading file [[ " + file + " ]], " + err);
      } else {
        return log("success", "File copied to destination [[ " + outFile + " ]].");
      }
    });
  });
};

deleteFile = function(file) {
  var outFile;
  outFile = file;
  return fs.exists(outFile, function(exists) {
    if (exists) {
      return fs.unlink(outFile, function(err) {
        if (err) {
          return log("error", "Error deleting file [[ " + outFile + " ]], " + err);
        } else {
          return log("success", "File [[ " + outFile + " ]] deleted.");
        }
      });
    }
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, fileWatcher, isBuild, _ref, _ref1;
  extensions = (mimosaConfig != null ? (_ref = mimosaConfig.extensions) != null ? _ref.copy : void 0 : void 0) || [];
  excludes = (mimosaConfig != null ? (_ref1 = mimosaConfig.fubumvc) != null ? _ref1.excludePaths : void 0 : void 0) || [];
  isBuild = (mimosaConfig != null ? mimosaConfig.isBuild : void 0) || true;
  log("debug", "importing assets");
  log("debug", "allowed extensions [[ " + extensions + " ]]");
  log("debug", "excludes [[ " + excludes + " ]]");
  fileWatcher = prepareFileWatcher(cwd, extensions, excludes, isBuild);
  return startWatching(cwd, fileWatcher, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets
};

//# sourceMappingURL=data:application/json;base64,
