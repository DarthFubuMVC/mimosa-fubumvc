"use strict";
var Rx, buildExtensions, cleanAssets, color, copyFile, cwd, deleteDirectory, deleteFile, deleteFileSync, excludeStrategies, findSourceFiles, fs, importAssets, isExcludedByConfig, log, parseString, parseXml, path, prepareFileWatcher, shouldInclude, startWatching, transformPath, watch, withoutPath, wrench, _;

log = require('./util').log;

color = require('ansi-color').set;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

_ = require('lodash');

parseString = require('xml2js').parseString;

cwd = process.cwd();

Rx = require("rx");

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isFile = fs.statSync(f).isFile();
    isIncluded = shouldInclude(f, isFile, extensions, excludes);
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, isFile, extensions, excludes) {
  var atRoot, excluded, ext, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  ext = path.extname(f);
  matchesExtension = !isFile || _.contains(extensions, ext);
  atRoot = isFile && f.indexOf(path.sep) === -1;
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

withoutPath = function(fromPath) {
  return function(input) {
    return input.replace("" + fromPath + path.sep, '');
  };
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = withoutPath(from);
  watchSettings = {
    ignored: function(file) {
      var f, isFile;
      isFile = fs.statSync(file).isFile();
      f = fixPath(file);
      return !(shouldInclude(f, isFile, extensions, excludes));
    },
    persistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable["throw"](e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

startWatching = function(from, _arg, options, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, numberOfFiles, unlinks;
  numberOfFiles = _arg.numberOfFiles, adds = _arg.adds, changes = _arg.changes, unlinks = _arg.unlinks, errors = _arg.errors;
  fixPath = withoutPath(from);
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  initialCopy.subscribe(function(f) {
    return copyFile(f, options);
  }, function(e) {
    log("warn", "File watching error: " + e);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return copyFile(f, options);
    }, function(e) {
      return log("warn", "File watching error: " + e);
    });
    if (cb) {
      return cb();
    }
  });
  deletes = fromSource(unlinks);
  return deletes.subscribe(function(f) {
    var outFile;
    outFile = transformPath(f, options);
    return deleteFile(outFile);
  }, function(e) {
    return log("warn", "File watching errors: " + e);
  });
};

copyFile = function(file, options) {
  return fs.readFile(file, function(err, data) {
    var dirname, outFile;
    if (err) {
      log("error", "Error reading file [[ " + file + " ]], " + err);
      return;
    }
    outFile = transformPath(file, options);
    dirname = path.dirname(outFile);
    if (!fs.existsSync(dirname)) {
      wrench.mkdirSyncRecursive(dirname, 0x1ff);
    }
    return fs.writeFile(outFile, data, function(err) {
      if (err) {
        return log("error", "Error reading file [[ " + file + " ]], " + err);
      } else {
        return log("success", "File copied to destination [[ " + outFile + " ]].");
      }
    });
  });
};

deleteFileSync = function(file) {
  if (fs.existsSync(file)) {
    fs.unlinkSync(file);
    return log("success", "File [[ " + file + " ]] deleted.");
  }
};

deleteFile = function(file) {
  return fs.exists(file, function(exists) {
    if (exists) {
      return fs.unlink(file, function(err) {
        if (err) {
          return log("error", "Error deleting file [[ " + file + " ]], " + err);
        } else {
          return log("success", "File [[ " + file + " ]] deleted.");
        }
      });
    }
  });
};

deleteDirectory = function(dir, cb) {
  if (fs.existsSync(dir)) {
    return fs.rmdir(dir, function(err) {
      if ((err != null ? err.code : void 0) === !"ENOTEMPTY") {
        log("error", "Unable to delete directory [[ " + dir + " ]]");
        log("error", err);
      } else {
        log("info", "Deleted empty directory [[ " + dir + " ]]");
      }
      if (cb) {
        return cb();
      }
    });
  } else {
    if (cb) {
      return cb();
    }
  }
};

transformPath = function(file, _arg) {
  var conventions, result, sourceDir;
  sourceDir = _arg.sourceDir, conventions = _arg.conventions;
  result = _.reduce(conventions, function(acc, _arg1) {
    var ext, match, transform;
    match = _arg1.match, transform = _arg1.transform;
    ext = path.extname(acc);
    if (match(acc, ext)) {
      return transform(acc, path);
    } else {
      return acc;
    }
  }, file);
  return path.join(sourceDir, result);
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

buildExtensions = function(config) {
  var copy, css, extensions, javascript, _ref;
  _ref = config.extensions, copy = _ref.copy, javascript = _ref.javascript, css = _ref.css;
  return extensions = _.union(copy, javascript, css);
};

importAssets = function(mimosaConfig, options, next) {
  var compiledDir, conventions, excludePaths, extensions, fileWatcher, isBuild, sourceDir, _ref;
  _ref = mimosaConfig.fubumvc, excludePaths = _ref.excludePaths, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir, isBuild = _ref.isBuild, conventions = _ref.conventions;
  extensions = buildExtensions(mimosaConfig);
  log("debug", "importing assets");
  log("debug", "allowed extensions [[ " + extensions + " ]]");
  log("debug", "excludePaths [[ " + excludePaths + " ]]");
  fileWatcher = prepareFileWatcher(cwd, extensions, excludePaths, isBuild);
  return startWatching(cwd, fileWatcher, {
    sourceDir: sourceDir,
    conventions: conventions
  }, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  var compiledDir, conventions, dirs, done, excludePaths, extensions, files, isBuild, outputFiles, remainingDirs, sourceDir, _ref;
  _ref = mimosaConfig.fubumvc, extensions = _ref.extensions, excludePaths = _ref.excludePaths, sourceDir = _ref.sourceDir, compiledDir = _ref.compiledDir, isBuild = _ref.isBuild, conventions = _ref.conventions;
  extensions = buildExtensions(mimosaConfig);
  options = {
    sourceDir: sourceDir,
    conventions: conventions
  };
  files = findSourceFiles(cwd, extensions, excludePaths);
  outputFiles = _.map(files, function(f) {
    return transformPath(f, options);
  });
  _.each(outputFiles, function(f) {
    return deleteFileSync(f);
  });
  dirs = _(files).map(function(f) {
    return transformPath(f, options);
  }).map(function(f) {
    return path.dirname(f);
  }).sortBy("length").reverse().value();
  remainingDirs = [].concat(dirs);
  done = function(dir) {
    remainingDirs = _.without(remainingDirs, dir);
    if (remainingDirs.length === 0) {
      return next();
    }
  };
  return _(dirs).map(function(dir) {
    return [
      dir, function() {
        return done(dir);
      }
    ];
  }).each(function(_arg) {
    var cb, dir;
    dir = _arg[0], cb = _arg[1];
    return deleteDirectory(dir, cb);
  });
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets
};

//# sourceMappingURL=data:application/json;base64,
