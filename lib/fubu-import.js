"use strict";
var Bliss, bliss, cleanAssets, copyContents, cwd, excludeStrategies, findSourceFiles, fs, importAssets, initFiles, isExcluded, logger, makeFolders, makeOptions, mkdirp, parseString, parseXml, path, relativeToThisFile, setupFileSystem, watch, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

mkdirp = require('mkdirp');

parseString = require('xml2js').parseString;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, sourceFiles;
  extensions = mimosaConfig.extensions.copy;
  excludes = mimosaConfig.fubumvc.excludePaths;
  sourceFiles = findSourceFiles(extensions, excludes);
  logger.info(sourceFiles);
  return next();
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

findSourceFiles = function(extensions, excludes) {
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  return wrench.readdirSyncRecursive(cwd).filter(function(f) {
    var atRoot, excluded, isFile, matchesExtension;
    atRoot = f.indexOf(path.sep) === -1;
    matchesExtension = _.contains(extensions, path.extname(f));
    isFile = fs.statSync(f).isFile();
    excluded = isExcluded(f, excludes);
    return matchesExtension && isFile && !excluded && !atRoot;
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcluded = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    logger.info("making sure " + dir + " exists");
    return mkdirp.sync(dir, function(err) {
      return logger.error(err);
    });
  });
};

makeOptions = function() {
  var options;
  return options = {
    name: path.basename(cwd)
  };
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, options, pair, useCoffee, _i, _len, _results;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  options = makeOptions();
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, options);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _results = [];
  for (_i = 0, _len = fileWithContents.length; _i < _len; _i++) {
    pair = fileWithContents[_i];
    _results.push(copyContents(pair));
  }
  return _results;
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,
