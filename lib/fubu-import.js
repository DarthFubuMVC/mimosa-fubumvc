"use strict";
var Bliss, bliss, cleanAssets, copyContents, fs, importAssets, initFiles, logger, makeFolders, makeOptions, mkdirp, parseString, parseXml, path, relativeToThisFile, setupFileSystem, watch, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

mkdirp = require('mkdirp');

parseString = require('xml2js').parseString;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

importAssets = function(mimosaConfig, options, next) {
  var extensions;
  extensions = mimosaConfig.extensions.copy;
  return next();
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    logger.info("making sure " + dir + " exists");
    return mkdirp.sync(dir, function(err) {
      return logger.error(err);
    });
  });
};

makeOptions = function() {
  var options;
  return options = {
    name: path.basename(process.cwd())
  };
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, options, pair, useCoffee, _i, _len, _results;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  options = makeOptions();
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, options);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _results = [];
  for (_i = 0, _len = fileWithContents.length; _i < _len; _i++) {
    pair = fileWithContents[_i];
    _results.push(copyContents(pair));
  }
  return _results;
};

copyContents = function(pair) {
  var contents, fileName;
  fileName = pair[0], contents = pair[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcZnVidS1pbXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcaG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidW12Y1xcc3JjXFxmdWJ1LWltcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxrTUFBQTs7QUFBQSxFQUVBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsS0FJQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBSlIsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FMVCxDQUFBOztBQUFBLE1BTUEsR0FBUyxPQUFBLENBQVEsV0FBUixDQU5ULENBQUE7O0FBQUEsQ0FPQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBUEosQ0FBQTs7QUFBQSxNQVFBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FSVCxDQUFBOztBQUFBLFdBU0EsR0FBYyxPQUFBLENBQVEsUUFBUixDQUFpQixDQUFDLFdBVGhDLENBQUE7O0FBQUEsS0FVQSxHQUFRLE9BQUEsQ0FBUSxPQUFSLENBVlIsQ0FBQTs7QUFBQSxLQVdBLEdBQVksSUFBQSxLQUFBLENBQ1Y7QUFBQSxFQUFBLEdBQUEsRUFBSyxRQUFMO0FBQUEsRUFDQSxZQUFBLEVBQWMsS0FEZDtBQUFBLEVBRUEsT0FBQSxFQUFTLEVBRlQ7Q0FEVSxDQVhaLENBQUE7O0FBQUEsWUFnQkEsR0FBZSxTQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLElBQXhCLEdBQUE7QUFDYixNQUFBLFVBQUE7QUFBQSxFQUFBLFVBQUEsR0FBYSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQXJDLENBQUE7U0FLQSxJQUFBLENBQUEsRUFOYTtBQUFBLENBaEJmLENBQUE7O0FBQUEsV0F3QkEsR0FBYyxTQUFDLFlB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LFFBa0VBLEdBQVcsU0FBQyxRQUFELEdBQUE7QUFDVCxNQUFBLGdCQUFBO0FBQUEsRUFBQSxRQUFBLEdBQVcsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsUUFBaEIsQ0FBWCxDQUFBO0FBQUEsRUFDQSxNQUFBLEdBQVMsRUFEVCxDQUFBO0FBQUEsRUFFQSxXQUFBLENBQVksUUFBWixFQUFzQixTQUFDLEdBQUQsRUFBTSxNQUFOLEdBQUE7V0FDcEIsTUFBQSxHQUFTLE9BRFc7RUFBQSxDQUF0QixDQUZBLENBQUE7U0FJQSxPQUxTO0FBQUEsQ0FsRVgsQ0FBQTs7QUFBQSxNQXlFTSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxFQUFDLGNBQUEsWUFBRDtBQUFBLEVBQWUsYUFBQSxXQUFmO0FBQUEsRUFBNEIsaUJBQUEsZUFBNUI7Q0F6RWpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxyXG5cclxuZnMgPSByZXF1aXJlICdmcydcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbndhdGNoID0gcmVxdWlyZSAnY2hva2lkYXInXHJcbndyZW5jaCA9IHJlcXVpcmUgJ3dyZW5jaCdcclxubG9nZ2VyID0gcmVxdWlyZSAnbG9nbWltb3NhJ1xyXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xyXG5ta2RpcnAgPSByZXF1aXJlICdta2RpcnAnXHJcbnBhcnNlU3RyaW5nID0gcmVxdWlyZSgneG1sMmpzJykucGFyc2VTdHJpbmdcclxuQmxpc3MgPSByZXF1aXJlICdibGlzcydcclxuYmxpc3MgPSBuZXcgQmxpc3NcclxuICBleHQ6IFwiLmJsaXNzXCJcclxuICBjYWNoZUVuYWJsZWQ6IGZhbHNlLFxyXG4gIGNvbnRleHQ6IHt9XHJcblxyXG5pbXBvcnRBc3NldHMgPSAobWltb3NhQ29uZmlnLCBvcHRpb25zLCBuZXh0KSAtPlxyXG4gIGV4dGVuc2lvbnMgPSBtaW1vc2FDb25maWcuZXh0ZW5zaW9ucy5jb3B5XHJcbiAgI1RPRE86IGdhdGhlciBzb3VyY2VzXHJcbiAgIy5saW5rc1xyXG4gICNmdWJ1LWNvbnRlbnRcclxuICAjc291cmNlIGRpciAoaW5jbHVkaW5nIGNvbnRlbnQpXHJcbiAgbmV4dCgpXHJcblxyXG5jbGVhbkFzc2V0cyA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XHJcbiAgbmV4dCgpXHJcblxyXG5yZWxhdGl2ZVRvVGhpc0ZpbGUgPSAoZmlsZVBhdGgsIGRpcm5hbWUpIC0+XHJcbiAgZGlybmFtZSA/PSBfX2Rpcm5hbWVcclxuICBwYXRoLmpvaW4gZGlybmFtZSwgZmlsZVBhdGhcclxuXHJcbnNldHVwRmlsZVN5c3RlbSA9IChhcmdzKSAtPlxyXG4gIG1ha2VGb2xkZXJzKClcclxuICBpbml0RmlsZXMoYXJncylcclxuXHJcbm1ha2VGb2xkZXJzID0gLT5cclxuICBmb2xkZXJzID0gWydhc3NldHMvc2NyaXB0cycsICdhc3NldHMvc3R5bGVzJywgJ3B1YmxpYyddXHJcbiAgXy5lYWNoIGZvbGRlcnMsIChkaXIpIC0+XHJcbiAgICBsb2dnZXIuaW5mbyBcIm1ha2luZyBzdXJlICN7ZGlyfSBleGlzdHNcIlxyXG4gICAgbWtkaXJwLnN5bmMgZGlyLCAoZXJyKSAtPlxyXG4gICAgICBsb2dnZXIuZXJyb3IoZXJyKVxyXG5cclxubWFrZU9wdGlvbnMgPSAtPlxyXG4gIG9wdGlvbnMgPVxyXG4gICAgbmFtZTogcGF0aC5iYXNlbmFtZSBwcm9jZXNzLmN3ZCgpXHJcblxyXG5pbml0RmlsZXMgPSAoZmxhZ3MgPSBmYWxzZSkgLT5cclxuICB1c2VDb2ZmZWUgPSBmbGFncyA9PSBcImNvZmZlZVwiXHJcbiAgb3B0aW9ucyA9IG1ha2VPcHRpb25zKClcclxuICBleHQgPSBpZiB1c2VDb2ZmZWUgdGhlbiBcImNvZmZlZVwiIGVsc2UgXCJqc1wiXHJcbiAgZmlsZXMgPSBbXCJib3dlci5qc29uXCIsIFwibWltb3NhLWNvbmZpZy4je2V4dH1cIl1cclxuICBjb250ZW50cyA9IF8gZmlsZXNcclxuICAgIC5tYXAgKGYpIC0+IHJlbGF0aXZlVG9UaGlzRmlsZSBcIi4uL2Z1YnUtaW1wb3J0LXRlbXBsYXRlcy8je2Z9XCJcclxuICAgIC5tYXAgKGYpIC0+IGJsaXNzLnJlbmRlciBmLCBvcHRpb25zXHJcbiAgICAubWFwIChmKSAtPiBmLnRyaW0oKVxyXG4gICAgLnZhbHVlKClcclxuICBmaWxlV2l0aENvbnRlbnRzID0gXy56aXAoZmlsZXMsIGNvbnRlbnRzKVxyXG5cclxuICBjb3B5Q29udGVudHMgcGFpciBmb3IgcGFpciBpbiBmaWxlV2l0aENvbnRlbnRzXHJcblxyXG5jb3B5Q29udGVudHMgPSAocGFpcikgLT5cclxuICBbZmlsZU5hbWUsIGNvbnRlbnRzXSA9IHBhaXJcclxuICB1bmxlc3MgZnMuZXhpc3RzU3luYyBmaWxlTmFtZVxyXG4gICAgbG9nZ2VyLmluZm8gXCJjcmVhdGluZyAje2ZpbGVOYW1lfVwiXHJcbiAgICBmcy53cml0ZUZpbGVTeW5jIGZpbGVOYW1lLCBjb250ZW50c1xyXG5cclxucGFyc2VYbWwgPSAoZmlsZVBhdGgpIC0+XHJcbiAgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMgZmlsZVBhdGhcclxuICByZXN1bHQgPSB7fVxyXG4gIHBhcnNlU3RyaW5nIGNvbnRlbnRzLCAoZXJyLCBvdXRwdXQpIC0+XHJcbiAgICByZXN1bHQgPSBvdXRwdXRcclxuICByZXN1bHRcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2ltcG9ydEFzc2V0cywgY2xlYW5Bc3NldHMsIHNldHVwRmlsZVN5c3RlbX1cclxuIl19
