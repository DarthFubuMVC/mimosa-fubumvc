"use strict";
var Rx, cleanAssets, color, copyFile, cwd, deleteFile, excludeStrategies, findSourceFiles, fs, importAssets, isExcludedByConfig, log, logger, parseString, parseXml, path, prepareFileWatcher, shouldInclude, startWatching, watch, withoutFromPath, wrench, _;

log = require('./util').log;

color = require('ansi-color').set;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

parseString = require('xml2js').parseString;

cwd = process.cwd();

Rx = require("rx");

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isFile = fs.statSync(f).isFile();
    isIncluded = shouldInclude(f, isFile, extensions, excludes);
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, isFile, extensions, excludes) {
  var atRoot, excluded, ext, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  ext = path.extname(f);
  matchesExtension = !isFile || _.contains(extensions, ext);
  atRoot = isFile && f.indexOf(path.sep) === -1;
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

withoutFromPath = function(fromPath) {
  return function(input) {
    return input.replace("" + fromPath + path.sep, '');
  };
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = withoutFromPath(from);
  watchSettings = {
    ignored: function(file) {
      var f, isFile;
      isFile = fs.statSync(file).isFile();
      f = fixPath(file);
      return !(shouldInclude(f, isFile, extensions, excludes));
    },
    pesistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable.Throw(e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

startWatching = function(from, _arg, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, numberOfFiles, unlinks;
  numberOfFiles = _arg.numberOfFiles, adds = _arg.adds, changes = _arg.changes, unlinks = _arg.unlinks, errors = _arg.errors;
  fixPath = withoutFromPath(from);
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  initialCopy.subscribe(function(f) {
    return copyFile(f);
  }, function(e) {
    log("warn", "File watching error: " + e);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return copyFile(f);
    }, function(e) {
      return log("warn", "File watching error: " + e);
    });
    if (cb) {
      return cb();
    }
  });
  deletes = fromSource(unlinks);
  return deletes.subscribe(function(f) {
    return deleteFile(f);
  }, function(e) {
    return log("error", "error deleting [[ " + e + " ]]");
  });
};

copyFile = function(file) {
  return fs.readFile(file, function(err, data) {
    var dirname, outFile;
    if (err) {
      log("error", "Error reading file [[ " + file + " ]], " + err);
      return;
    }
    outFile = file;
    dirname = path.dirname(outFile);
    if (!fs.existsSync(dirname)) {
      wrench.mkdirSyncRecursive(dirname, 0x1ff);
    }
    return fs.writeFile(outFile, data, function(err) {
      if (err) {
        return log("error", "Error reading file [[ " + file + " ]], " + err);
      } else {
        return log("info", "File copied to destination [[ " + outFile + " ]].");
      }
    });
  });
};

deleteFile = function(file) {
  var outFile;
  outFile = file;
  return fs.exists(outFile, function(exists) {
    if (exists) {
      return fs.unlink(outFile, function(err) {
        if (err) {
          return log("error", "Error deleting file [[ " + outFile + " ]], " + err);
        } else {
          return log("info", "File [[ " + outFile + " ]] deleted.");
        }
      });
    }
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, fileWatcher, isBuild, _ref, _ref1;
  extensions = (mimosaConfig != null ? (_ref = mimosaConfig.extensions) != null ? _ref.copy : void 0 : void 0) || [];
  excludes = (mimosaConfig != null ? (_ref1 = mimosaConfig.fubumvc) != null ? _ref1.excludePaths : void 0 : void 0) || [];
  isBuild = (mimosaConfig != null ? mimosaConfig.isBuild : void 0) || true;
  log("debug", "importing assets");
  log("debug", "allowed extensions [[ " + extensions + " ]]");
  log("debug", "excludes [[ " + excludes + " ]]");
  fileWatcher = prepareFileWatcher(cwd, extensions, excludes, isBuild);
  return startWatching(cwd, fileWatcher, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXGhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcZnVidS1pbXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcaG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidW12Y1xcc3JjXFxmdWJ1LWltcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSwwUEFBQTs7QUFBQSxNQUVRLE9BQUEsQ0FBUSxRQUFSLEVBQVAsR0FGRCxDQUFBOztBQUFBLEtBR0EsR0FBUSxPQUFBLENBQVEsWUFBUixDQUFxQixDQUFDLEdBSDlCLENBQUE7O0FBQUEsRUFJQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBSkwsQ0FBQTs7QUFBQSxJQUtBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FMUCxDQUFBOztBQUFBLEtBTUEsR0FBUSxPQUFBLENBQVEsVUFBUixDQU5SLENBQUE7O0FBQUEsTUFPQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBUFQsQ0FBQTs7QUFBQSxNQVFBLEdBQVMsT0FBQSxDQUFRLFdBQVIsQ0FSVCxDQUFBOztBQUFBLENBU0EsR0FBSSxPQUFBLENBQVEsUUFBUixDQVRKLENBQUE7O0FBQUEsV0FVQSxHQUFjLE9BQUEsQ0FBUSxRQUFSLENBQWlCLENBQUMsV0FWaEMsQ0FBQTs7QUFBQSxHQVdBLEdBQU0sT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQVhOLENBQUE7O0FBQUEsRUFZQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBWkwsQ0FBQTs7QUFBQSxlQWNBLEdBQWtCLFNBQUMsSUFBRCxFQUFPLFVBQVAsRUFBbUIsUUFBbkIsR0FBQTtTQUNoQixNQUFNLENBQUMsb0JBQVAsQ0FBNEIsSUFBNUIsQ0FDRSxDQUFDLE1BREgsQ0FDVSxTQUFDLENBQUQsR0FBQTtBQUNOLFFBQUEsa0JBQUE7QUFBQSxJQUFBLE1BQUEsR0FBUyxFQUFFLENBQUMsUUFBSCxDQUFZLENBQVosQ0FBYyxDQUFDLE1BQWYsQ0FB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U0FJQSxPQUxTO0FBQUEsQ0F2SVgsQ0FBQTs7QUFBQSxZQThJQSxHQUFlLFNBQUMsWUFBRCxFQUFlLE9BQWYsRUFBd0IsSUFBeEIsR0FBQTtBQUNiLE1BQUEsdURBQUE7QUFBQSxFQUFBLFVBQUEsMEVBQXFDLENBQUUsdUJBQTFCLElBQWtDLEVBQS9DLENBQUE7QUFBQSxFQUNBLFFBQUEseUVBQWdDLENBQUUsK0JBQXZCLElBQXVDLEVBRGxELENBQUE7QUFBQSxFQUVBLE9BQUEsMkJBQVUsWUFBWSxDQUFFLGlCQUFkLElBQXlCLElBRm5DLENBQUE7QUFBQSxFQUlBLEdBQUEsQ0FBSSxPQUFKLEVBQWEsa0JBQWIsQ0FKQSxDQUFBO0FBQUEsRUFLQSxHQUFBLENBQUksT0FBSixFQUFjLHdCQUFBLEdBQXVCLFVBQXZCLEdBQW1DLEtBQWpELENBTEEsQ0FBQTtBQUFBLEVBTUEsR0FBQSxDQUFJLE9BQUosRUFBYyxjQUFBLEdBQWEsUUFBYixHQUF1QixLQUFyQyxDQU5BLENBQUE7QUFBQSxFQVFBLFdBQUEsR0FBYyxrQkFBQSxDQUFtQixHQUFuQixFQUF3QixVQUF4QixFQUFvQyxRQUFwQyxFQUE4QyxPQUE5QyxDQVJkLENBQUE7U0FTQSxhQUFBLENBQWMsR0FBZCxFQUFtQixXQUFuQixFQUFnQyxJQUFoQyxFQVZhO0FBQUEsQ0E5SWYsQ0FBQTs7QUFBQSxXQThKQSxHQUFjLFNBQUMsWUFBRCxFQUFlLE9BQWYsRUFBd0IsSUFBeEIsR0FBQTtTQUNaLElBQUEsQ0FBQSxFQURZO0FBQUEsQ0E5SmQsQ0FBQTs7QUFBQSxNQWlLTSxDQUFDLE9BQVAsR0FBaUI7QUFBQSxFQUFDLGNBQUEsWUFBRDtBQUFBLEVBQWUsYUFBQSxXQUFmO0NBaktqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcclxuXHJcbntsb2d9ID0gcmVxdWlyZSAnLi91dGlsJ1xyXG5jb2xvciA9IHJlcXVpcmUoJ2Fuc2ktY29sb3InKS5zZXRcclxuZnMgPSByZXF1aXJlICdmcydcclxucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXHJcbndhdGNoID0gcmVxdWlyZSAnY2hva2lkYXInXHJcbndyZW5jaCA9IHJlcXVpcmUgJ3dyZW5jaCdcclxubG9nZ2VyID0gcmVxdWlyZSAnbG9nbWltb3NhJ1xyXG5fID0gcmVxdWlyZSAnbG9kYXNoJ1xyXG5wYXJzZVN0cmluZyA9IHJlcXVpcmUoJ3htbDJqcycpLnBhcnNlU3RyaW5nXHJcbmN3ZCA9IHByb2Nlc3MuY3dkKClcclxuUnggPSByZXF1aXJlIFwicnhcIlxyXG5cclxuZmluZFNvdXJjZUZpbGVzID0gKGZyb20sIGV4dGVuc2lvbnMsIGV4Y2x1ZGVzKSAtPlxyXG4gIHdyZW5jaC5yZWFkZGlyU3luY1JlY3Vyc2l2ZShmcm9tKVxyXG4gICAgLmZpbHRlciAoZikgLT5cclxuICAgICAgaXNGaWxlID0gZnMuc3RhdFN5bmMoZikuaXNGaWxlKClcclxuICAgICAgaXNJbmNsdWRlZCA9IHNob3VsZEluY2x1ZGUgZiwgaXNGaWxlLCBleHRlbnNpb25zLCBleGNsdWRlc1xyXG4gICAgICBpc0luY2x1ZGVkIGFuZCBpc0ZpbGVcclxuXHJcbnNob3VsZEluY2x1ZGUgPSAoZiwgaXNGaWxlLCBleHRlbnNpb25zLCBleGNsdWRlcykgLT5cclxuICAjVE9ETzogb25seSBhZGRzIHRoZSAuIHRvIHlvdSBmb3IgZXh0ZW5zaW9ucyBpZiBpdHMgbGVmdCBvZmZcclxuICBleHRlbnNpb25zID0gZXh0ZW5zaW9ucy5tYXAgKGV4dCkgLT4gXCIuI3tleHR9XCJcclxuICBleHQgPSBwYXRoLmV4dG5hbWUgZlxyXG4gIG1hdGNoZXNFeHRlbnNpb24gPSBub3QgaXNGaWxlIG9yIF8uY29udGFpbnMgZXh0ZW5zaW9ucywgZXh0XHJcbiAgYXRSb290ID0gaXNGaWxlIGFuZCBmLmluZGV4T2YocGF0aC5zZXApID09IC0xXHJcbiAgZXhjbHVkZWQgPSBpc0V4Y2x1ZGVkQnlDb25maWcgZiwgZXhjbHVkZXNcclxuICBtYXRjaGVzRXh0ZW5zaW9uIGFuZCBub3QgZXhjbHVkZWQgYW5kIG5vdCBhdFJvb3RcclxuXHJcbndpdGhvdXRGcm9tUGF0aCA9IChmcm9tUGF0aCkgLT5cclxuICAoaW5wdXQpIC0+IGlucHV0LnJlcGxhY2UgXCIje2Zyb21QYXRofSN7cGF0aC5zZXB9XCIsICcnXHJcblxyXG5wcmVwYXJlRmlsZVdhdGNoZXIgPSAoZnJvbSwgZXh0ZW5zaW9ucywgZXhjbHVkZXMsIGlzQnVpbGQpIC0+XHJcbiAgI1RPRE86IG5vIG1vcmUgc3luYyBjYWxsc1xyXG4gIGZpbGVzICA9IGZpbmRTb3VyY2VGaWxlcyBmcm9tLCBleHRlbnNpb25zLCBleGNsdWRlc1xyXG4gIG51bWJlck9mRmlsZXMgID0gZmlsZXMubGVuZ3RoXHJcbiAgZml4UGF0aCA9IHdpdGhvdXRGcm9tUGF0aCBmcm9tXHJcblxyXG4gIHdhdGNoU2V0dGluZ3MgPVxyXG4gICAgaWdub3JlZDogKGZpbGUpIC0+XHJcbiAgICAgIGlzRmlsZSA9IGZzLnN0YXRTeW5jKGZpbGUpLmlzRmlsZSgpXHJcbiAgICAgIGYgPSBmaXhQYXRoIGZpbGVcclxuICAgICAgbm90IChzaG91bGRJbmNsdWRlIGYsIGlzRmlsZSwgZXh0ZW5zaW9ucywgZXhjbHVkZXMpXHJcbiAgICBwZXNpc3RlbnQ6IG5vdCBpc0J1aWxkXHJcbiAgICB1c2VQb2xsaW5nOiB0cnVlXHJcbiAgICBpbnRlcnZhbDogNTAwXHJcbiAgICBiaW5hcnlJbnRlcnZhbDogMTAwMFxyXG5cclxuICBvYnNlcnZhYmxlRm9yID0gKGV2ZW50KSAtPlxyXG4gICAgUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQgd2F0Y2hlciwgZXZlbnRcclxuXHJcbiAgd2F0Y2hlciA9IHdhdGNoLndhdGNoIGZyb20sIHdhdGNoU2V0dGluZ3NcclxuICBhZGRzID0gb2JzZXJ2YWJsZUZvciBcImFkZFwiXHJcbiAgY2hhbmdlcyA9IG9ic2VydmFibGVGb3IgXCJjaGFuZ2VcIlxyXG4gIHVubGlua3MgPSBvYnNlcnZhYmxlRm9yIFwidW5saW5rXCJcclxuICBlcnJvcnMgPSAob2JzZXJ2YWJsZUZvciBcImVycm9yXCIpLnNlbGVjdE1hbnkgKGUpIC0+IFJ4Lk9ic2VydmFibGUuVGhyb3cgZVxyXG4gIHtudW1iZXJPZkZpbGVzLCBhZGRzLCBjaGFuZ2VzLCB1bmxpbmtzLCBlcnJvcnN9XHJcblxyXG5zdGFydFdhdGNoaW5nID0gKGZyb20sIHtudW1iZXJPZkZpbGVzLCBhZGRzLCBjaGFuZ2VzLCB1bmxpbmtzLCBlcnJvcnN9LCBjYikgLT5cclxuICBmaXhQYXRoID0gd2l0aG91dEZyb21QYXRoIGZyb21cclxuXHJcbiAgZnJvbVNvdXJjZSA9IChvYnMpIC0+XHJcbiAgICBvYnMubWVyZ2UoZXJyb3JzKS5tYXAgZml4UGF0aFxyXG5cclxuICBpbml0aWFsQ29weSA9IGZyb21Tb3VyY2UoYWRkcylcclxuICAgIC50YWtlKG51bWJlck9mRmlsZXMpXHJcblxyXG4gIGluaXRpYWxDb3B5LnN1YnNjcmliZShcclxuICAgIChmKSAtPiBjb3B5RmlsZSBmXHJcbiAgICAoZSkgLT5cclxuICAgICAgbG9nIFwid2FyblwiLCBcIkZpbGUgd2F0Y2hpbmcgZXJyb3I6ICN7ZX1cIlxyXG4gICAgICBjYigpIGlmIGNiXHJcbiAgICAoKSAtPlxyXG4gICAgICBvbmdvaW5nQ29weSA9IGZyb21Tb3VyY2UoYWRkcy5tZXJnZSBjaGFuZ2VzKVxyXG4gICAgICBvbmdvaW5nQ29weS5zdWJzY3JpYmUoXHJcbiAgICAgICAgKGYpIC0+IGNvcHlGaWxlIGZcclxuICAgICAgICAoZSkgLT5cclxuICAgICAgICAgIGxvZyBcIndhcm5cIiwgXCJGaWxlIHdhdGNoaW5nIGVycm9yOiAje2V9XCJcclxuICAgICAgKVxyXG4gICAgICBjYigpIGlmIGNiXHJcbiAgKVxyXG5cclxuICBkZWxldGVzID0gZnJvbVNvdXJjZSh1bmxpbmtzKVxyXG5cclxuICBkZWxldGVzLnN1YnNjcmliZShcclxuICAgIChmKSAtPiBkZWxldGVGaWxlIGZcclxuICAgIChlKSAtPlxyXG4gICAgICBsb2cgXCJlcnJvclwiLCBcImVycm9yIGRlbGV0aW5nIFtbICN7ZX0gXV1cIlxyXG4gIClcclxuXHJcbmNvcHlGaWxlID0gKGZpbGUpIC0+XHJcbiAgZnMucmVhZEZpbGUgZmlsZSwgKGVyciwgZGF0YSkgLT5cclxuICAgIGlmIGVyclxyXG4gICAgICBsb2cgXCJlcnJvclwiLCBcIkVycm9yIHJlYWRpbmcgZmlsZSBbWyAje2ZpbGV9IF1dLCAje2Vycn1cIlxyXG4gICAgICByZXR1cm5cclxuXHJcbiAgICAjVE9ETzogY29udmVudGlvbnMgZm9yIHdoZXJlIHRvIHB1dCBmaWxlc1xyXG4gICAgb3V0RmlsZSA9IGZpbGVcclxuICAgIGRpcm5hbWUgPSBwYXRoLmRpcm5hbWUgb3V0RmlsZVxyXG4gICAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZGlybmFtZVxyXG4gICAgICB3cmVuY2gubWtkaXJTeW5jUmVjdXJzaXZlIGRpcm5hbWUsIDBvMDc3N1xyXG5cclxuICAgIGZzLndyaXRlRmlsZSBvdXRGaWxlLCBkYXRhLCAoZXJyKSAtPlxyXG4gICAgICBpZiBlcnJcclxuICAgICAgICBsb2cgXCJlcnJvclwiLCBcIkVycm9yIHJlYWRpbmcgZmlsZSBbWyAje2ZpbGV9IF1dLCAje2Vycn1cIlxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgbG9nIFwiaW5mb1wiLCBcIkZpbGUgY29waWVkIHRvIGRlc3RpbmF0aW9uIFtbICN7b3V0RmlsZX0gXV0uXCJcclxuXHJcbmRlbGV0ZUZpbGUgPSAoZmlsZSkgLT5cclxuICAjVE9ETzogcmV2ZXJzZSBjb252ZW50aW9ucyBmb3IgaG93IHRvIGdldCBwYXRoIGJhY2tcclxuICBvdXRGaWxlID0gZmlsZVxyXG4gIGZzLmV4aXN0cyBvdXRGaWxlLCAoZXhpc3RzKSAtPlxyXG4gICAgaWYgZXhpc3RzXHJcbiAgICAgIGZzLnVubGluayBvdXRGaWxlLCAoZXJyKSAtPlxyXG4gICAgICAgIGlmIGVyclxyXG4gICAgICAgICAgbG9nIFwiZXJyb3JcIiwgXCJFcnJvciBkZWxldGluZyBmaWxlIFtbICN7b3V0RmlsZX0gXV0sICN7ZXJyfVwiXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgbG9nIFwiaW5mb1wiLCBcIkZpbGUgW1sgI3tvdXRGaWxlfSBdXSBkZWxldGVkLlwiXHJcblxyXG5leGNsdWRlU3RyYXRlZ2llcyA9XHJcbiAgc3RyaW5nOlxyXG4gICAgaWRlbnRpdHk6IF8uaXNTdHJpbmdcclxuICAgIHByZWRpY2F0ZTogKGV4LCBwYXRoKSAtPiBwYXRoLmluZGV4T2YoZXgpID09IDBcclxuICByZWdleDpcclxuICAgIGlkZW50aXR5OiBfLmlzUmVnRXhwXHJcbiAgICBwcmVkaWNhdGU6IChleCwgcGF0aCkgLT4gZXgudGVzdCBwYXRoXHJcblxyXG5pc0V4Y2x1ZGVkQnlDb25maWcgPSAocGF0aCwgZXhjbHVkZXMpIC0+XHJcbiAgb2ZUeXBlID0gKG1ldGhvZCkgLT5cclxuICAgIGV4Y2x1ZGVzLmZpbHRlciAoZikgLT4gbWV0aG9kKGYpXHJcblxyXG4gIF8uYW55IGV4Y2x1ZGVTdHJhdGVnaWVzLCAoe2lkZW50aXR5LCBwcmVkaWNhdGV9KSAtPlxyXG4gICAgXy5hbnkgKG9mVHlwZSBpZGVudGl0eSksIChleCkgLT4gcHJlZGljYXRlIGV4LCBwYXRoXHJcblxyXG5wYXJzZVhtbCA9IChmaWxlUGF0aCkgLT5cclxuICBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyBmaWxlUGF0aFxyXG4gIHJlc3VsdCA9IHt9XHJcbiAgcGFyc2VTdHJpbmcgY29udGVudHMsIChlcnIsIG91dHB1dCkgLT5cclxuICAgIHJlc3VsdCA9IG91dHB1dFxyXG4gIHJlc3VsdFxyXG5cclxuaW1wb3J0QXNzZXRzID0gKG1pbW9zYUNvbmZpZywgb3B0aW9ucywgbmV4dCkgLT5cclxuICBleHRlbnNpb25zID0gbWltb3NhQ29uZmlnPy5leHRlbnNpb25zPy5jb3B5IHx8IFtdXHJcbiAgZXhjbHVkZXMgPSBtaW1vc2FDb25maWc/LmZ1YnVtdmM/LmV4Y2x1ZGVQYXRocyB8fCBbXVxyXG4gIGlzQnVpbGQgPSBtaW1vc2FDb25maWc/LmlzQnVpbGQgfHwgdHJ1ZVxyXG5cclxuICBsb2cgXCJkZWJ1Z1wiLCBcImltcG9ydGluZyBhc3NldHNcIlxyXG4gIGxvZyBcImRlYnVnXCIsIFwiYWxsb3dlZCBleHRlbnNpb25zIFtbICN7ZXh0ZW5zaW9uc30gXV1cIlxyXG4gIGxvZyBcImRlYnVnXCIsIFwiZXhjbHVkZXMgW1sgI3tleGNsdWRlc30gXV1cIlxyXG5cclxuICBmaWxlV2F0Y2hlciA9IHByZXBhcmVGaWxlV2F0Y2hlciBjd2QsIGV4dGVuc2lvbnMsIGV4Y2x1ZGVzLCBpc0J1aWxkXHJcbiAgc3RhcnRXYXRjaGluZyBjd2QsIGZpbGVXYXRjaGVyLCBuZXh0XHJcbiAgI1RPRE86IGdhdGhlciBzb3VyY2VzXHJcbiAgIy5saW5rcywgd2lsbCB1c2UgcGFyc2VYbWwgZm9yIHRoaXNcclxuICAjZnVidS1jb250ZW50XHJcbiAgI3NvdXJjZSBkaXIgKGluY2x1ZGluZyBjb250ZW50KVxyXG5cclxuY2xlYW5Bc3NldHMgPSAobWltb3NhQ29uZmlnLCBvcHRpb25zLCBuZXh0KSAtPlxyXG4gIG5leHQoKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7aW1wb3J0QXNzZXRzLCBjbGVhbkFzc2V0c31cclxuIl19
