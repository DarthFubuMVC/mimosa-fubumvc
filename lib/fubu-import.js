"use strict";
var Bliss, Rx, bliss, cleanAssets, copyContents, cwd, excludeStrategies, findSourceFiles, fs, importAssets, initFiles, isExcludedByConfig, logger, makeFolders, mkdirp, parseString, parseXml, path, prepareFileWatcher, relativeToThisFile, setupFileSystem, shouldInclude, startCopying, watch, withoutFromPath, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

mkdirp = require('mkdirp');

parseString = require('xml2js').parseString;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

Rx = require("rx");

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, isBuild;
  extensions = mimosaConfig.extensions.copy;
  excludes = mimosaConfig.fubumvc.excludePaths;
  isBuild = mimosaConfig.isBuild;
  return startCopying(cwd, extensions, excludes, isBuild, next);
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isIncluded = shouldInclude(f, extensions, excludes);
    isFile = fs.statSync(f).isFile();
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, extensions, excludes) {
  var atRoot, excluded, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  atRoot = f.indexOf(path.sep) === -1;
  matchesExtension = _.contains(extensions, path.extname(f));
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

prepareFileWatcher = function(from, extensions, excludes, isBuild) {
  var adds, changes, errors, files, fixPath, numberOfFiles, observableFor, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  fixPath = function(input) {
    return withoutFromPath(input, from);
  };
  watchSettings = {
    ignored: function(file) {
      var f, isDirectory;
      isDirectory = fs.statSync(file).isDirectory();
      if (isDirectory) {
        return false;
      } else {
        f = fixPath(file);
        return !(shouldInclude(f, extensions, excludes));
      }
    },
    pesistent: !isBuild,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  observableFor = function(event) {
    return Rx.Observable.fromEvent(watcher, event);
  };
  watcher = watch.watch(from, watchSettings);
  adds = observableFor("add");
  changes = observableFor("change");
  unlinks = observableFor("unlink");
  errors = (observableFor("error")).selectMany(function(e) {
    return Rx.Observable.Throw(e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

withoutFromPath = function(input, fromPath) {
  return input.replace("" + fromPath + path.sep, '');
};

startCopying = function(from, extensions, excludes, isBuild, cb) {
  var adds, changes, deletes, errors, fixPath, fromSource, initialCopy, numberOfFiles, unlinks, _ref;
  logger.debug("starting copy from: " + from);
  logger.debug("extensions: " + extensions);
  logger.debug("excludes: " + excludes);
  _ref = prepareFileWatcher(from, extensions, excludes, isBuild), numberOfFiles = _ref.numberOfFiles, adds = _ref.adds, changes = _ref.changes, unlinks = _ref.unlinks, errors = _ref.errors;
  fixPath = function(input) {
    return withoutFromPath(input, from);
  };
  fromSource = function(obs) {
    return obs.merge(errors).map(fixPath);
  };
  initialCopy = fromSource(adds).take(numberOfFiles);
  initialCopy.subscribe(function(f) {
    return logger.info("initial copy: " + f);
  }, function(e) {
    logger.error("error with initial copy: " + e.message);
    if (cb) {
      return cb();
    }
  }, function() {
    var ongoingCopy;
    logger.info("initial copy complete");
    ongoingCopy = fromSource(adds.merge(changes));
    ongoingCopy.subscribe(function(f) {
      return logger.info("copy: " + f);
    }, function(e) {
      return logger.debug("error: " + e);
    });
    if (cb) {
      return cb();
    }
  });
  deletes = fromSource(unlinks);
  return deletes.subscribe(function(f) {
    return logger.info("deleting: " + f);
  }, function(e) {
    return logger.error("error deleting: " + e);
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    logger.info("making sure " + dir + " exists");
    return mkdirp.sync(dir, function(err) {
      return logger.error(err);
    });
  });
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, useCoffee, viewModel;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  viewModel = {
    name: path.basename(cwd)
  };
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, viewModel);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  _.each(fileWithContents, function(pair) {
    return copyContents(pair);
  });
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzpcXEhvbWVcXGdpdGh1YlxcbWltb3NhLWZ1YnVtdmNcXGxpYlxcZnVidS1pbXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjOlxcSG9tZVxcZ2l0aHViXFxtaW1vc2EtZnVidW12Y1xcc3JjXFxmdWJ1LWltcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSx3VEFBQTs7QUFBQSxFQUVBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLElBR0EsR0FBTyxPQUFBLENBQVEsTUFBUixDQUhQLENBQUE7O0FBQUEsS0FJQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBSlIsQ0FBQTs7QUFBQSxNQUtBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FMVCxDQUFBOztBQUFBLE1BTUEsR0FBUyxPQUFBLENBQVEsV0FBUixDQU5ULENBQUE7O0FBQUEsQ0FPQSxHQUFJLE9BQUEsQ0FBUSxRQUFSLENBUEosQ0FBQTs7QUFBQSxNQVFBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FSVCxDQUFBOztBQUFBLFdBU0EsR0FBYyxPQUFBLENBQVEsUUFBUixDQUFpQixDQUFDLFdBVGhDLENBQUE7O0FBQUEsS0FVQSxHQUFRLE9BQUEsQ0FBUSxPQUFSLENBVlIsQ0FBQTs7QUFBQSxLQVdBLEdBQVksSUFBQSxLQUFBLENBQ1Y7QUFBQSxFQUFBLEdBQUEsRUFBSyxRQUFMO0FBQUEsRUFDQSxZQUFBLEVBQWMsS0FEZDtBQUFBLEVBRUEsT0FBQSxFQUFTLEVBRlQ7Q0FEVSxDQVhaLENBQUE7O0FBQUEsR0FlQSxHQUFNLE9BQU8sQ0FBQyxHQUFSLENBQUEsQ0FmTixDQUFBOztBQUFBLEVBZ0JBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FoQkwsQ0FBQTs7QUFBQSxZQWtCQSxHQUFlLFNBQUMsWUFBRCxFQUFlLE9BQWYsRUFBd0IsSUFBeEIsR0FBQTtBQUViLE1BQUEsNkJBQUE7QUFBQSxFQUFBLFVBQUEsR0FBYSxZ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Q0FBYSxJQUFiLEVBRHVCO0VBQUEsQ0FBekIsQ0FaQSxDQURVO0FBQUEsQ0F4SlosQ0FBQTs7QUFBQSxZQTJLQSxHQUFlLFNBQUMsSUFBRCxHQUFBO0FBQ2IsTUFBQSxrQkFBQTtBQUFBLEVBRGUsb0JBQVUsa0JBQ3pCLENBQUE7QUFBQSxFQUFBLElBQUEsQ0FBQSxFQUFTLENBQUMsVUFBSCxDQUFjLFFBQWQsQ0FBUDtBQUNFLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBYSxXQUFBLEdBQVUsUUFBdkIsQ0FBQSxDQUFBO1dBQ0EsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsUUFBakIsRUFBMkIsUUFBM0IsRUFGRjtHQURhO0FBQUEsQ0EzS2YsQ0FBQTs7QUFBQSxRQWdMQSxHQUFXLFNBQUMsUUFBRCxHQUFBO0FBQ1QsTUFBQSxnQkFBQTtBQUFBLEVBQUEsUUFBQSxHQUFXLEVBQUUsQ0FBQyxZQUFILENBQWdCLFFBQWhCLENBQVgsQ0FBQTtBQUFBLEVBQ0EsTUFBQSxHQUFTLEVBRFQsQ0FBQTtBQUFBLEVBRUEsV0FBQSxDQUFZLFFBQVosRUFBc0IsU0FBQyxHQUFELEVBQU0sTUFBTixHQUFBO1dBQ3BCLE1BQUEsR0FBUyxPQURXO0VBQUEsQ0FBdEIsQ0FGQSxDQUFBO1NBSUEsT0FMUztBQUFBLENBaExYLENBQUE7O0FBQUEsTUF1TE0sQ0FBQyxPQUFQLEdBQWlCO0FBQUEsRUFBQyxjQUFBLFlBQUQ7QUFBQSxFQUFlLGFBQUEsV0FBZjtBQUFBLEVBQTRCLGlCQUFBLGVBQTVCO0NBdkxqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcclxuXHJcbmZzID0gcmVxdWlyZSAnZnMnXHJcbnBhdGggPSByZXF1aXJlICdwYXRoJ1xyXG53YXRjaCA9IHJlcXVpcmUgJ2Nob2tpZGFyJ1xyXG53cmVuY2ggPSByZXF1aXJlICd3cmVuY2gnXHJcbmxvZ2dlciA9IHJlcXVpcmUgJ2xvZ21pbW9zYSdcclxuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcclxubWtkaXJwID0gcmVxdWlyZSAnbWtkaXJwJ1xyXG5wYXJzZVN0cmluZyA9IHJlcXVpcmUoJ3htbDJqcycpLnBhcnNlU3RyaW5nXHJcbkJsaXNzID0gcmVxdWlyZSAnYmxpc3MnXHJcbmJsaXNzID0gbmV3IEJsaXNzXHJcbiAgZXh0OiBcIi5ibGlzc1wiXHJcbiAgY2FjaGVFbmFibGVkOiBmYWxzZSxcclxuICBjb250ZXh0OiB7fVxyXG5jd2QgPSBwcm9jZXNzLmN3ZCgpXHJcblJ4ID0gcmVxdWlyZSBcInJ4XCJcclxuXHJcbmltcG9ydEFzc2V0cyA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XHJcbiAgI1RPRE86IGluY2x1ZGUgc2Vuc2libGUgZGVmYXVsdCBleHRlbnNpb25zICguY29mZmVlLCBldGMpIHB1bGwgZnJvbSBjb25maWcgc29tZWhvdz9cclxuICBleHRlbnNpb25zID0gbWltb3NhQ29uZmlnLmV4dGVuc2lvbnMuY29weVxyXG4gIGV4Y2x1ZGVzID0gbWltb3NhQ29uZmlnLmZ1YnVtdmMuZXhjbHVkZVBhdGhzXHJcbiAgaXNCdWlsZCA9IG1pbW9zYUNvbmZpZy5pc0J1aWxkXHJcbiAgc3RhcnRDb3B5aW5nIGN3ZCwgZXh0ZW5zaW9ucywgZXhjbHVkZXMsIGlzQnVpbGQsIG5leHRcclxuICAjVE9ETzogZ2F0aGVyIHNvdXJjZXNcclxuICAjLmxpbmtzLCB3aWxsIHVzZSBwYXJzZVhtbCBmb3IgdGhpc1xyXG4gICNmdWJ1LWNvbnRlbnRcclxuICAjc291cmNlIGRpciAoaW5jbHVkaW5nIGNvbnRlbnQpXHJcblxyXG5jbGVhbkFzc2V0cyA9IChtaW1vc2FDb25maWcsIG9wdGlvbnMsIG5leHQpIC0+XHJcbiAgbmV4dCgpXHJcblxyXG5maW5kU291cmNlRmlsZXMgPSAoZnJvbSwgZXh0ZW5zaW9ucywgZXhjbHVkZXMpIC0+XHJcbiAgd3JlbmNoLnJlYWRkaXJTeW5jUmVjdXJzaXZlKGZyb20pXHJcbiAgICAuZmlsdGVyIChmKSAtPlxyXG4gICAgICBpc0luY2x1ZGVkID0gc2hvdWxkSW5jbHVkZSBmLCBleHRlbnNpb25zLCBleGNsdWRlc1xyXG4gICAgICBpc0ZpbGUgPSBmcy5zdGF0U3luYyhmKS5pc0ZpbGUoKVxyXG4gICAgICBpc0luY2x1ZGVkIGFuZCBpc0ZpbGVcclxuXHJcbnNob3VsZEluY2x1ZGUgPSAoZiwgZXh0ZW5zaW9ucywgZXhjbHVkZXMpIC0+XHJcbiAgI1RPRE86IG9ubHkgYWRkcyB0aGUgLiB0byB5b3UgZm9yIGV4dGVuc2lvbnMgaWYgaXRzIGxlZnQgb2ZmXHJcbiAgZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMubWFwIChleHQpIC0+IFwiLiN7ZXh0fVwiXHJcbiAgYXRSb290ID0gZi5pbmRleE9mKHBhdGguc2VwKSA9PSAtMVxyXG4gIG1hdGNoZXNFeHRlbnNpb24gPSBfLmNvbnRhaW5zIGV4dGVuc2lvbnMsIHBhdGguZXh0bmFtZSBmXHJcbiAgZXhjbHVkZWQgPSBpc0V4Y2x1ZGVkQnlDb25maWcgZiwgZXhjbHVkZXNcclxuICBtYXRjaGVzRXh0ZW5zaW9uIGFuZCBub3QgZXhjbHVkZWQgYW5kIG5vdCBhdFJvb3RcclxuXHJcbnByZXBhcmVGaWxlV2F0Y2hlciA9IChmcm9tLCBleHRlbnNpb25zLCBleGNsdWRlcywgaXNCdWlsZCkgLT5cclxuICAjVE9ETzogbm8gbW9yZSBzeW5jIGNhbGxzXHJcbiAgZmlsZXMgID0gZmluZFNvdXJjZUZpbGVzIGZyb20sIGV4dGVuc2lvbnMsIGV4Y2x1ZGVzXHJcbiAgbnVtYmVyT2ZGaWxlcyAgPSBmaWxlcy5sZW5ndGhcclxuICBmaXhQYXRoID0gKGlucHV0KSAtPiB3aXRob3V0RnJvbVBhdGggaW5wdXQsIGZyb21cclxuXHJcbiAgd2F0Y2hTZXR0aW5ncyA9XHJcbiAgICBpZ25vcmVkOiAoZmlsZSkgLT5cclxuICAgICAgaXNEaXJlY3RvcnkgPSBmcy5zdGF0U3luYyhmaWxlKS5pc0RpcmVjdG9yeSgpXHJcbiAgICAgIGlmIGlzRGlyZWN0b3J5XHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGYgPSBmaXhQYXRoIGZpbGVcclxuICAgICAgICBub3QgKHNob3VsZEluY2x1ZGUgZiwgZXh0ZW5zaW9ucywgZXhjbHVkZXMpXHJcbiAgICBwZXNpc3RlbnQ6IG5vdCBpc0J1aWxkXHJcbiAgICB1c2VQb2xsaW5nOiB0cnVlXHJcbiAgICBpbnRlcnZhbDogNTAwXHJcbiAgICBiaW5hcnlJbnRlcnZhbDogMTAwMFxyXG5cclxuICBvYnNlcnZhYmxlRm9yID0gKGV2ZW50KSAtPlxyXG4gICAgUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQgd2F0Y2hlciwgZXZlbnRcclxuXHJcbiAgd2F0Y2hlciA9IHdhdGNoLndhdGNoIGZyb20sIHdhdGNoU2V0dGluZ3NcclxuICBhZGRzID0gb2JzZXJ2YWJsZUZvciBcImFkZFwiXHJcbiAgY2hhbmdlcyA9IG9ic2VydmFibGVGb3IgXCJjaGFuZ2VcIlxyXG4gIHVubGlua3MgPSBvYnNlcnZhYmxlRm9yIFwidW5saW5rXCJcclxuICBlcnJvcnMgPSAob2JzZXJ2YWJsZUZvciBcImVycm9yXCIpLnNlbGVjdE1hbnkgKGUpIC0+IFJ4Lk9ic2VydmFibGUuVGhyb3cgZVxyXG4gIHtudW1iZXJPZkZpbGVzLCBhZGRzLCBjaGFuZ2VzLCB1bmxpbmtzLCBlcnJvcnN9XHJcblxyXG53aXRob3V0RnJvbVBhdGggPSAoaW5wdXQsIGZyb21QYXRoKSAtPlxyXG4gIGlucHV0LnJlcGxhY2UgXCIje2Zyb21QYXRofSN7cGF0aC5zZXB9XCIsICcnXHJcblxyXG5zdGFydENvcHlpbmcgPSAoZnJvbSwgZXh0ZW5zaW9ucywgZXhjbHVkZXMsIGlzQnVpbGQsIGNiKSAtPlxyXG4gIGxvZ2dlci5kZWJ1ZyBcInN0YXJ0aW5nIGNvcHkgZnJvbTogI3tmcm9tfVwiXHJcbiAgbG9nZ2VyLmRlYnVnIFwiZXh0ZW5zaW9uczogI3tleHRlbnNpb25zfVwiXHJcbiAgbG9nZ2VyLmRlYnVnIFwiZXhjbHVkZXM6ICN7ZXhjbHVkZXN9XCJcclxuXHJcbiAge251bWJlck9mRmlsZXMsIGFkZHMsIGNoYW5nZXMsIHVubGlua3MsIGVycm9yc30gPVxyXG4gICAgcHJlcGFyZUZpbGVXYXRjaGVyIGZyb20sIGV4dGVuc2lvbnMsIGV4Y2x1ZGVzLCBpc0J1aWxkXHJcblxyXG4gIGZpeFBhdGggPSAoaW5wdXQpIC0+IHdpdGhvdXRGcm9tUGF0aCBpbnB1dCwgZnJvbVxyXG5cclxuICBmcm9tU291cmNlID0gKG9icykgLT5cclxuICAgIG9icy5tZXJnZShlcnJvcnMpLm1hcCBmaXhQYXRoXHJcblxyXG4gIGluaXRpYWxDb3B5ID0gZnJvbVNvdXJjZShhZGRzKVxyXG4gICAgLnRha2UobnVtYmVyT2ZGaWxlcylcclxuXHJcbiAgaW5pdGlhbENvcHkuc3Vic2NyaWJlKFxyXG4gICAgKGYpIC0+XHJcbiAgICAgIGxvZ2dlci5pbmZvIFwiaW5pdGlhbCBjb3B5OiAje2Z9XCJcclxuICAgIChlKSAtPlxyXG4gICAgICBsb2dnZXIuZXJyb3IgXCJlcnJvciB3aXRoIGluaXRpYWwgY29weTogI3tlLm1lc3NhZ2V9XCJcclxuICAgICAgY2IoKSBpZiBjYlxyXG4gICAgKCkgLT5cclxuICAgICAgbG9nZ2VyLmluZm8gXCJpbml0aWFsIGNvcHkgY29tcGxldGVcIlxyXG4gICAgICBvbmdvaW5nQ29weSA9IGZyb21Tb3VyY2UoYWRkcy5tZXJnZSBjaGFuZ2VzKVxyXG4gICAgICBvbmdvaW5nQ29weS5zdWJzY3JpYmUoXHJcbiAgICAgICAgKGYpIC0+XHJcbiAgICAgICAgICBsb2dnZXIuaW5mbyBcImNvcHk6ICN7Zn1cIlxyXG4gICAgICAgIChlKSAtPlxyXG4gICAgICAgICAgbG9nZ2VyLmRlYnVnIFwiZXJyb3I6ICN7ZX1cIlxyXG4gICAgICApXHJcbiAgICAgIGNiKCkgaWYgY2JcclxuICApXHJcblxyXG4gIGRlbGV0ZXMgPSBmcm9tU291cmNlKHVubGlua3MpXHJcblxyXG4gIGRlbGV0ZXMuc3Vic2NyaWJlKFxyXG4gICAgKGYpIC0+XHJcbiAgICAgIGxvZ2dlci5pbmZvIFwiZGVsZXRpbmc6ICN7Zn1cIlxyXG4gICAgKGUpIC0+XHJcbiAgICAgIGxvZ2dlci5lcnJvciBcImVycm9yIGRlbGV0aW5nOiAje2V9XCJcclxuICApXHJcblxyXG5leGNsdWRlU3RyYXRlZ2llcyA9XHJcbiAgc3RyaW5nOlxyXG4gICAgaWRlbnRpdHk6IF8uaXNTdHJpbmdcclxuICAgIHByZWRpY2F0ZTogKGV4LCBwYXRoKSAtPiBwYXRoLmluZGV4T2YoZXgpID09IDBcclxuICByZWdleDpcclxuICAgIGlkZW50aXR5OiBfLmlzUmVnRXhwXHJcbiAgICBwcmVkaWNhdGU6IChleCwgcGF0aCkgLT4gZXgudGVzdCBwYXRoXHJcblxyXG5pc0V4Y2x1ZGVkQnlDb25maWcgPSAocGF0aCwgZXhjbHVkZXMpIC0+XHJcbiAgb2ZUeXBlID0gKG1ldGhvZCkgLT5cclxuICAgIGV4Y2x1ZGVzLmZpbHRlciAoZikgLT4gbWV0aG9kKGYpXHJcblxyXG4gIF8uYW55IGV4Y2x1ZGVTdHJhdGVnaWVzLCAoe2lkZW50aXR5LCBwcmVkaWNhdGV9KSAtPlxyXG4gICAgXy5hbnkgKG9mVHlwZSBpZGVudGl0eSksIChleCkgLT4gcHJlZGljYXRlIGV4LCBwYXRoXHJcblxyXG5yZWxhdGl2ZVRvVGhpc0ZpbGUgPSAoZmlsZVBhdGgsIGRpcm5hbWUpIC0+XHJcbiAgZGlybmFtZSA/PSBfX2Rpcm5hbWVcclxuICBwYXRoLmpvaW4gZGlybmFtZSwgZmlsZVBhdGhcclxuXHJcbnNldHVwRmlsZVN5c3RlbSA9IChhcmdzKSAtPlxyXG4gIG1ha2VGb2xkZXJzKClcclxuICBpbml0RmlsZXMoYXJncylcclxuXHJcbm1ha2VGb2xkZXJzID0gLT5cclxuICBmb2xkZXJzID0gWydhc3NldHMvc2NyaXB0cycsICdhc3NldHMvc3R5bGVzJywgJ3B1YmxpYyddXHJcbiAgXy5lYWNoIGZvbGRlcnMsIChkaXIpIC0+XHJcbiAgICBsb2dnZXIuaW5mbyBcIm1ha2luZyBzdXJlICN7ZGlyfSBleGlzdHNcIlxyXG4gICAgbWtkaXJwLnN5bmMgZGlyLCAoZXJyKSAtPlxyXG4gICAgICBsb2dnZXIuZXJyb3IoZXJyKVxyXG5cclxuaW5pdEZpbGVzID0gKGZsYWdzID0gZmFsc2UpIC0+XHJcbiAgdXNlQ29mZmVlID0gZmxhZ3MgPT0gXCJjb2ZmZWVcIlxyXG4gIGV4dCA9IGlmIHVzZUNvZmZlZSB0aGVuIFwiY29mZmVlXCIgZWxzZSBcImpzXCJcclxuICBmaWxlcyA9IFtcImJvd2VyLmpzb25cIiwgXCJtaW1vc2EtY29uZmlnLiN7ZXh0fVwiXVxyXG4gIHZpZXdNb2RlbCA9XHJcbiAgICBuYW1lOiBwYXRoLmJhc2VuYW1lIGN3ZFxyXG4gIGNvbnRlbnRzID0gXyBmaWxlc1xyXG4gICAgLm1hcCAoZikgLT4gcmVsYXRpdmVUb1RoaXNGaWxlIFwiLi4vZnVidS1pbXBvcnQtdGVtcGxhdGVzLyN7Zn1cIlxyXG4gICAgLm1hcCAoZikgLT4gYmxpc3MucmVuZGVyIGYsIHZpZXdNb2RlbFxyXG4gICAgLm1hcCAoZikgLT4gZi50cmltKClcclxuICAgIC52YWx1ZSgpXHJcbiAgZmlsZVdpdGhDb250ZW50cyA9IF8uemlwKGZpbGVzLCBjb250ZW50cylcclxuXHJcbiAgXy5lYWNoIGZpbGVXaXRoQ29udGVudHMsIChwYWlyKSAtPlxyXG4gICAgY29weUNvbnRlbnRzIHBhaXJcclxuICAjYXZvaWQgcmV0dXJuaW5nIGFuIGFycmF5IG9mIG5vdGhpbmcgd2hlbiB1c2luZyBhIGNvbXByZWhlbnNpb24gYXMgeW91ciBsYXN0IGxpbmVcclxuICAjYnkgdXNpbmcgYW4gZXhwbGljaXQgcmV0dXJuXHJcbiAgcmV0dXJuXHJcblxyXG5jb3B5Q29udGVudHMgPSAoW2ZpbGVOYW1lLCBjb250ZW50c10pIC0+XHJcbiAgdW5sZXNzIGZzLmV4aXN0c1N5bmMgZmlsZU5hbWVcclxuICAgIGxvZ2dlci5pbmZvIFwiY3JlYXRpbmcgI3tmaWxlTmFtZX1cIlxyXG4gICAgZnMud3JpdGVGaWxlU3luYyBmaWxlTmFtZSwgY29udGVudHNcclxuXHJcbnBhcnNlWG1sID0gKGZpbGVQYXRoKSAtPlxyXG4gIGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jIGZpbGVQYXRoXHJcbiAgcmVzdWx0ID0ge31cclxuICBwYXJzZVN0cmluZyBjb250ZW50cywgKGVyciwgb3V0cHV0KSAtPlxyXG4gICAgcmVzdWx0ID0gb3V0cHV0XHJcbiAgcmVzdWx0XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtpbXBvcnRBc3NldHMsIGNsZWFuQXNzZXRzLCBzZXR1cEZpbGVTeXN0ZW19XHJcbiJdfQ==
