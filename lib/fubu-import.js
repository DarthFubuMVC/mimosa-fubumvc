"use strict";
var Bliss, Rx, bliss, cleanAssets, copyContents, cwd, excludeStrategies, findSourceFiles, fs, importAssets, initFiles, isExcludedByConfig, logger, makeFolders, makeOptions, mkdirp, parseString, parseXml, path, prepareFileWatcher, relativeToThisFile, setupFileSystem, shouldInclude, startCopying, watch, wrench, _;

fs = require('fs');

path = require('path');

watch = require('chokidar');

wrench = require('wrench');

logger = require('logmimosa');

_ = require('lodash');

mkdirp = require('mkdirp');

parseString = require('xml2js').parseString;

Bliss = require('bliss');

bliss = new Bliss({
  ext: ".bliss",
  cacheEnabled: false,
  context: {}
});

cwd = process.cwd();

Rx = require("rx");

importAssets = function(mimosaConfig, options, next) {
  var excludes, extensions, sourceFiles;
  extensions = mimosaConfig.extensions.copy;
  excludes = mimosaConfig.fubumvc.excludePaths;
  sourceFiles = findSourceFiles(cwd, extensions, excludes);
  logger.info(sourceFiles);
  return next();
};

cleanAssets = function(mimosaConfig, options, next) {
  return next();
};

findSourceFiles = function(from, extensions, excludes) {
  return wrench.readdirSyncRecursive(from).filter(function(f) {
    var isFile, isIncluded;
    isIncluded = shouldInclude(f, extensions, excludes);
    isFile = fs.statSync(f).isFile();
    return isIncluded && isFile;
  });
};

shouldInclude = function(f, extensions, excludes) {
  var atRoot, excluded, matchesExtension;
  extensions = extensions.map(function(ext) {
    return "." + ext;
  });
  atRoot = f.indexOf(path.sep) === -1;
  matchesExtension = _.contains(extensions, path.extname(f));
  excluded = isExcludedByConfig(f, excludes);
  return matchesExtension && !excluded && !atRoot;
};

prepareFileWatcher = function(from, extensions, excludes) {
  var adds, changes, errors, files, numberOfFiles, unlinks, watchSettings, watcher;
  files = findSourceFiles(from, extensions, excludes);
  numberOfFiles = files.length;
  watchSettings = {
    ignored: function(file) {
      var isDirectory;
      isDirectory = fs.statSync(file).isDirectory();
      if (isDirectory) {
        return false;
      } else {
        return !(shouldInclude(file, extensions, excludes));
      }
    },
    pesistent: false,
    usePolling: true,
    interval: 500,
    binaryInterval: 1000
  };
  watcher = watch.watch(from, watchSettings);
  adds = Rx.Observable.fromEvent(watcher, "add");
  changes = Rx.Observable.fromEvent(watcher, "change");
  unlinks = Rx.Observable.fromEvent(watcher, "unlink");
  errors = (Rx.Observable.fromEvent(watcher, "error")).selectMany(function(e) {
    return Rx.Observable.Throw(e);
  });
  return {
    numberOfFiles: numberOfFiles,
    adds: adds,
    changes: changes,
    unlinks: unlinks,
    errors: errors
  };
};

startCopying = function(from, extensions, excludes, cb) {
  var adds, changes, errors, initialCopy, numberOfFiles, ongoingCopy, unlinks, withoutFromPath, _ref;
  _ref = prepareFileWatcher(from, extensions, excludes), numberOfFiles = _ref.numberOfFiles, adds = _ref.adds, changes = _ref.changes, unlinks = _ref.unlinks, errors = _ref.errors;
  withoutFromPath = function(input) {
    return input.replace("" + from + path.sep, '');
  };
  initialCopy = adds.merge(errors).take(numberOfFiles).map(withoutFromPath);
  initialCopy.subscribe(function(f) {
    return logger.info("onNext: " + f);
  }, function(e) {
    logger.info("onError: " + e);
    if (cb) {
      return cb();
    }
  }, function() {
    logger.info("onCompleted");
    if (cb) {
      return cb();
    }
  });
  ongoingCopy = adds.merge(changes).merge(errors).map(withoutFromPath);
  return ongoingCopy.subscribe(function(f) {
    return logger.info("onNext: " + f);
  }, function(e) {
    return logger.info("onError: " + e);
  }, function() {
    return logger.info("onCompleted");
  });
};

excludeStrategies = {
  string: {
    identity: _.isString,
    predicate: function(ex, path) {
      return path.indexOf(ex) === 0;
    }
  },
  regex: {
    identity: _.isRegExp,
    predicate: function(ex, path) {
      return ex.test(path);
    }
  }
};

isExcludedByConfig = function(path, excludes) {
  var ofType;
  ofType = function(method) {
    return excludes.filter(function(f) {
      return method(f);
    });
  };
  return _.any(excludeStrategies, function(_arg) {
    var identity, predicate;
    identity = _arg.identity, predicate = _arg.predicate;
    return _.any(ofType(identity), function(ex) {
      return predicate(ex, path);
    });
  });
};

relativeToThisFile = function(filePath, dirname) {
  if (dirname == null) {
    dirname = __dirname;
  }
  return path.join(dirname, filePath);
};

setupFileSystem = function(args) {
  makeFolders();
  return initFiles(args);
};

makeFolders = function() {
  var folders;
  folders = ['assets/scripts', 'assets/styles', 'public'];
  return _.each(folders, function(dir) {
    logger.info("making sure " + dir + " exists");
    return mkdirp.sync(dir, function(err) {
      return logger.error(err);
    });
  });
};

makeOptions = function() {
  var options;
  return options = {
    name: path.basename(cwd)
  };
};

initFiles = function(flags) {
  var contents, ext, fileWithContents, files, options, pair, useCoffee, _i, _len;
  if (flags == null) {
    flags = false;
  }
  useCoffee = flags === "coffee";
  options = makeOptions();
  ext = useCoffee ? "coffee" : "js";
  files = ["bower.json", "mimosa-config." + ext];
  contents = _(files).map(function(f) {
    return relativeToThisFile("../fubu-import-templates/" + f);
  }).map(function(f) {
    return bliss.render(f, options);
  }).map(function(f) {
    return f.trim();
  }).value();
  fileWithContents = _.zip(files, contents);
  for (_i = 0, _len = fileWithContents.length; _i < _len; _i++) {
    pair = fileWithContents[_i];
    copyContents(pair);
  }
};

copyContents = function(_arg) {
  var contents, fileName;
  fileName = _arg[0], contents = _arg[1];
  if (!fs.existsSync(fileName)) {
    logger.info("creating " + fileName);
    return fs.writeFileSync(fileName, contents);
  }
};

parseXml = function(filePath) {
  var contents, result;
  contents = fs.readFileSync(filePath);
  result = {};
  parseString(contents, function(err, output) {
    return result = output;
  });
  return result;
};

module.exports = {
  importAssets: importAssets,
  cleanAssets: cleanAssets,
  setupFileSystem: setupFileSystem
};

//# sourceMappingURL=data:application/json;base64,
